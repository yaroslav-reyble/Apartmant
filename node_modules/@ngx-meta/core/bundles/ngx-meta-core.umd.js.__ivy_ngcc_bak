(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@ngx-meta/core', ['exports', '@angular/core', '@angular/platform-browser', 'rxjs'], factory) :
    (global = global || self, factory((global['ngx-meta'] = global['ngx-meta'] || {}, global['ngx-meta'].core = {}), global.ng.core, global.ng.platformBrowser, global.rxjs));
}(this, (function (exports, core, platformBrowser, rxjs) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    (function (PageTitlePositioning) {
        PageTitlePositioning[PageTitlePositioning["AppendPageTitle"] = 0] = "AppendPageTitle";
        PageTitlePositioning[PageTitlePositioning["PrependPageTitle"] = 10] = "PrependPageTitle";
    })(exports.PageTitlePositioning || (exports.PageTitlePositioning = {}));

    var MetaLoader = (function () {
        function MetaLoader() {
        }
        return MetaLoader;
    }());
    var MetaStaticLoader = (function () {
        function MetaStaticLoader(providedSettings) {
            if (providedSettings === void 0) { providedSettings = {
                pageTitlePositioning: exports.PageTitlePositioning.PrependPageTitle,
                defaults: {}
            }; }
            this.providedSettings = providedSettings;
        }
        Object.defineProperty(MetaStaticLoader.prototype, "settings", {
            get: function () {
                return this.providedSettings;
            },
            enumerable: true,
            configurable: true
        });
        return MetaStaticLoader;
    }());

    var isPromise = function (obj) { return !!obj && typeof obj.then === 'function'; };
    var isObservable = function (obj) { return !!obj && typeof obj.subscribe === 'function'; };

    var MetaService = (function () {
        function MetaService(loader, title, meta) {
            this.loader = loader;
            this.title = title;
            this.meta = meta;
            this.settings = loader.settings;
            this.isMetaTagSet = {};
        }
        MetaService.prototype.setTitle = function (title, override) {
            var _this = this;
            if (override === void 0) { override = false; }
            var title$ = title ? this.callback(title) : rxjs.of('');
            title$.subscribe(function (res) {
                var fullTitle = '';
                if (!res) {
                    var defaultTitle$ = _this.settings.defaults && _this.settings.defaults.title ? _this.callback(_this.settings.defaults.title) : rxjs.of('');
                    defaultTitle$.subscribe(function (defaultTitle) {
                        if (!override && _this.settings.pageTitleSeparator && _this.settings.applicationName) {
                            _this.callback(_this.settings.applicationName).subscribe(function (applicationName) {
                                fullTitle = applicationName ? _this.getTitleWithPositioning(defaultTitle, applicationName) : defaultTitle;
                                _this.updateTitle(fullTitle);
                            });
                        }
                        else {
                            _this.updateTitle(defaultTitle);
                        }
                    });
                }
                else if (!override && _this.settings.pageTitleSeparator && _this.settings.applicationName) {
                    _this.callback(_this.settings.applicationName).subscribe(function (applicationName) {
                        fullTitle = applicationName ? _this.getTitleWithPositioning(res, applicationName) : res;
                        _this.updateTitle(fullTitle);
                    });
                }
                else {
                    _this.updateTitle(res);
                }
            });
        };
        MetaService.prototype.setTag = function (key, value) {
            var _this = this;
            if (key === 'title') {
                throw new Error("Attempt to set " + key + " through \"setTag\": \"title\" is a reserved tag name. " + 'Please use `MetaService.setTitle` instead.');
            }
            var cur = value || (this.settings.defaults && this.settings.defaults[key] ? this.settings.defaults[key] : '');
            var value$ = key !== 'og:locale' && key !== 'og:locale:alternate' ? this.callback(cur) : rxjs.of(cur);
            value$.subscribe(function (res) {
                _this.updateTag(key, res);
            });
        };
        MetaService.prototype.update = function (currentUrl, metaSettings) {
            var _this = this;
            if (!metaSettings) {
                var fallbackTitle = this.settings.defaults
                    ? this.settings.defaults.title || this.settings.applicationName
                    : this.settings.applicationName;
                this.setTitle(fallbackTitle, true);
            }
            else {
                if (metaSettings.disabled) {
                    this.update(currentUrl);
                    return;
                }
                this.setTitle(metaSettings.title, metaSettings.override);
                Object.keys(metaSettings).forEach(function (key) {
                    var value = metaSettings[key];
                    if (key === 'title' || key === 'override') {
                        return;
                    }
                    else if (key === 'og:locale') {
                        value = value.replace(/-/g, '_');
                    }
                    else if (key === 'og:locale:alternate') {
                        var currentLocale = metaSettings['og:locale'];
                        _this.updateLocales(currentLocale, metaSettings[key]);
                        return;
                    }
                    _this.setTag(key, value);
                });
            }
            if (this.settings.defaults) {
                Object.keys(this.settings.defaults).forEach(function (key) {
                    var value = _this.settings.defaults[key];
                    if ((metaSettings && (key in _this.isMetaTagSet || key in metaSettings)) || key === 'title' || key === 'override') {
                        return;
                    }
                    else if (key === 'og:locale') {
                        value = value.replace(/-/g, '_');
                    }
                    else if (key === 'og:locale:alternate') {
                        var currentLocale = metaSettings ? metaSettings['og:locale'] : undefined;
                        _this.updateLocales(currentLocale, value);
                        return;
                    }
                    _this.setTag(key, value);
                });
            }
            var baseUrl = this.settings.applicationUrl ? this.settings.applicationUrl : '/';
            var url = ("" + baseUrl + currentUrl).replace(/(https?:\/\/)|(\/)+/g, '$1$2').replace(/\/$/g, '');
            this.setTag('og:url', url ? url : '/');
        };
        MetaService.prototype.removeTag = function (key) {
            this.meta.removeTag(key);
        };
        MetaService.prototype.callback = function (value) {
            if (this.settings.callback) {
                var value$ = this.settings.callback(value);
                if (!isObservable(value$)) {
                    return isPromise(value$) ? rxjs.from(value$) : rxjs.of(value$);
                }
                return value$;
            }
            return rxjs.of(value);
        };
        MetaService.prototype.getTitleWithPositioning = function (title, applicationName) {
            switch (this.settings.pageTitlePositioning) {
                case exports.PageTitlePositioning.AppendPageTitle:
                    return applicationName + String(this.settings.pageTitleSeparator) + title;
                case exports.PageTitlePositioning.PrependPageTitle:
                    return title + String(this.settings.pageTitleSeparator) + applicationName;
                default:
                    throw new Error("Invalid pageTitlePositioning specified [" + this.settings.pageTitlePositioning + "]!");
            }
        };
        MetaService.prototype.updateTitle = function (title) {
            this.title.setTitle(title);
            this.meta.updateTag({
                property: 'og:title',
                content: title
            });
        };
        MetaService.prototype.updateLocales = function (currentLocale, availableLocales) {
            var _this = this;
            var cur = currentLocale || (this.settings.defaults ? this.settings.defaults['og:locale'] : '');
            if (cur && this.settings.defaults) {
                this.settings.defaults['og:locale'] = cur.replace(/_/g, '-');
            }
            var elements = this.meta.getTags('property="og:locale:alternate"');
            elements.forEach(function (element) {
                _this.meta.removeTagElement(element);
            });
            if (cur && availableLocales) {
                availableLocales.split(',').forEach(function (locale) {
                    if (cur.replace(/-/g, '_') !== locale.replace(/-/g, '_')) {
                        _this.meta.addTag({
                            property: 'og:locale:alternate',
                            content: locale.replace(/-/g, '_')
                        });
                    }
                });
            }
        };
        MetaService.prototype.updateTag = function (key, value) {
            if (key.lastIndexOf('og:', 0) === 0) {
                this.meta.updateTag({
                    property: key,
                    content: key === 'og:locale' ? value.replace(/-/g, '_') : value
                });
            }
            else {
                this.meta.updateTag({
                    name: key,
                    content: value
                });
            }
            this.isMetaTagSet[key] = true;
            if (key === 'description') {
                this.meta.updateTag({
                    property: 'og:description',
                    content: value
                });
            }
            else if (key === 'author') {
                this.meta.updateTag({
                    property: 'og:author',
                    content: value
                });
            }
            else if (key === 'publisher') {
                this.meta.updateTag({
                    property: 'og:publisher',
                    content: value
                });
            }
            else if (key === 'og:locale') {
                var availableLocales = this.settings.defaults ? this.settings.defaults['og:locale:alternate'] : '';
                this.updateLocales(value, availableLocales);
                this.isMetaTagSet['og:locale:alternate'] = true;
            }
            else if (key === 'og:locale:alternate') {
                var currentLocale = this.meta.getTag('property="og:locale"').content;
                this.updateLocales(currentLocale, value);
                this.isMetaTagSet['og:locale'] = true;
            }
        };
        MetaService.ctorParameters = function () { return [
            { type: MetaLoader },
            { type: platformBrowser.Title },
            { type: platformBrowser.Meta }
        ]; };
        MetaService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [MetaLoader, platformBrowser.Title, platformBrowser.Meta])
        ], MetaService);
        return MetaService;
    }());

    var MetaGuard = (function () {
        function MetaGuard(meta) {
            this.meta = meta;
        }
        MetaGuard.prototype.canActivate = function (route, state) {
            var url = state.url;
            var metaSettings = route.hasOwnProperty('data') ? route.data.meta : undefined;
            this.meta.update(url, metaSettings);
            return true;
        };
        MetaGuard.prototype.canActivateChild = function (route, state) {
            return this.canActivate(route, state);
        };
        MetaGuard.ctorParameters = function () { return [
            { type: MetaService }
        ]; };
        MetaGuard = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [MetaService])
        ], MetaGuard);
        return MetaGuard;
    }());

    var metaFactory = function () { return new MetaStaticLoader(); };
    var MetaModule = (function () {
        function MetaModule(parentModule) {
            if (parentModule) {
                throw new Error('MetaModule already loaded; import in root module only.');
            }
        }
        MetaModule_1 = MetaModule;
        MetaModule.forRoot = function (configuredProvider) {
            if (configuredProvider === void 0) { configuredProvider = {
                provide: MetaLoader,
                useFactory: metaFactory
            }; }
            return {
                ngModule: MetaModule_1,
                providers: [configuredProvider, MetaGuard, MetaService]
            };
        };
        var MetaModule_1;
        MetaModule.ctorParameters = function () { return [
            { type: MetaModule, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        MetaModule = MetaModule_1 = __decorate([
            core.NgModule(),
            __param(0, core.Optional()), __param(0, core.SkipSelf()),
            __metadata("design:paramtypes", [MetaModule])
        ], MetaModule);
        return MetaModule;
    }());

    exports.MetaGuard = MetaGuard;
    exports.MetaLoader = MetaLoader;
    exports.MetaModule = MetaModule;
    exports.MetaService = MetaService;
    exports.MetaStaticLoader = MetaStaticLoader;
    exports.metaFactory = metaFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-meta-core.umd.js.map
