import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Meta, Title } from '@angular/platform-browser';
import { from as observableFrom, of as observableOf } from 'rxjs';
import { MetaLoader } from './meta.loader';
import { PageTitlePositioning } from './models/page-title-positioning';
import { isObservable, isPromise } from './util';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
var MetaService = (function () {
    function MetaService(loader, title, meta) {
        this.loader = loader;
        this.title = title;
        this.meta = meta;
        this.settings = loader.settings;
        this.isMetaTagSet = {};
    }
    MetaService.prototype.setTitle = function (title, override) {
        var _this = this;
        if (override === void 0) { override = false; }
        var title$ = title ? this.callback(title) : observableOf('');
        title$.subscribe(function (res) {
            var fullTitle = '';
            if (!res) {
                var defaultTitle$ = _this.settings.defaults && _this.settings.defaults.title ? _this.callback(_this.settings.defaults.title) : observableOf('');
                defaultTitle$.subscribe(function (defaultTitle) {
                    if (!override && _this.settings.pageTitleSeparator && _this.settings.applicationName) {
                        _this.callback(_this.settings.applicationName).subscribe(function (applicationName) {
                            fullTitle = applicationName ? _this.getTitleWithPositioning(defaultTitle, applicationName) : defaultTitle;
                            _this.updateTitle(fullTitle);
                        });
                    }
                    else {
                        _this.updateTitle(defaultTitle);
                    }
                });
            }
            else if (!override && _this.settings.pageTitleSeparator && _this.settings.applicationName) {
                _this.callback(_this.settings.applicationName).subscribe(function (applicationName) {
                    fullTitle = applicationName ? _this.getTitleWithPositioning(res, applicationName) : res;
                    _this.updateTitle(fullTitle);
                });
            }
            else {
                _this.updateTitle(res);
            }
        });
    };
    MetaService.prototype.setTag = function (key, value) {
        var _this = this;
        if (key === 'title') {
            throw new Error("Attempt to set " + key + " through \"setTag\": \"title\" is a reserved tag name. " + 'Please use `MetaService.setTitle` instead.');
        }
        var cur = value || (this.settings.defaults && this.settings.defaults[key] ? this.settings.defaults[key] : '');
        var value$ = key !== 'og:locale' && key !== 'og:locale:alternate' ? this.callback(cur) : observableOf(cur);
        value$.subscribe(function (res) {
            _this.updateTag(key, res);
        });
    };
    MetaService.prototype.update = function (currentUrl, metaSettings) {
        var _this = this;
        if (!metaSettings) {
            var fallbackTitle = this.settings.defaults
                ? this.settings.defaults.title || this.settings.applicationName
                : this.settings.applicationName;
            this.setTitle(fallbackTitle, true);
        }
        else {
            if (metaSettings.disabled) {
                this.update(currentUrl);
                return;
            }
            this.setTitle(metaSettings.title, metaSettings.override);
            Object.keys(metaSettings).forEach(function (key) {
                var value = metaSettings[key];
                if (key === 'title' || key === 'override') {
                    return;
                }
                else if (key === 'og:locale') {
                    value = value.replace(/-/g, '_');
                }
                else if (key === 'og:locale:alternate') {
                    var currentLocale = metaSettings['og:locale'];
                    _this.updateLocales(currentLocale, metaSettings[key]);
                    return;
                }
                _this.setTag(key, value);
            });
        }
        if (this.settings.defaults) {
            Object.keys(this.settings.defaults).forEach(function (key) {
                var value = _this.settings.defaults[key];
                if ((metaSettings && (key in _this.isMetaTagSet || key in metaSettings)) || key === 'title' || key === 'override') {
                    return;
                }
                else if (key === 'og:locale') {
                    value = value.replace(/-/g, '_');
                }
                else if (key === 'og:locale:alternate') {
                    var currentLocale = metaSettings ? metaSettings['og:locale'] : undefined;
                    _this.updateLocales(currentLocale, value);
                    return;
                }
                _this.setTag(key, value);
            });
        }
        var baseUrl = this.settings.applicationUrl ? this.settings.applicationUrl : '/';
        var url = ("" + baseUrl + currentUrl).replace(/(https?:\/\/)|(\/)+/g, '$1$2').replace(/\/$/g, '');
        this.setTag('og:url', url ? url : '/');
    };
    MetaService.prototype.removeTag = function (key) {
        this.meta.removeTag(key);
    };
    MetaService.prototype.callback = function (value) {
        if (this.settings.callback) {
            var value$ = this.settings.callback(value);
            if (!isObservable(value$)) {
                return isPromise(value$) ? observableFrom(value$) : observableOf(value$);
            }
            return value$;
        }
        return observableOf(value);
    };
    MetaService.prototype.getTitleWithPositioning = function (title, applicationName) {
        switch (this.settings.pageTitlePositioning) {
            case PageTitlePositioning.AppendPageTitle:
                return applicationName + String(this.settings.pageTitleSeparator) + title;
            case PageTitlePositioning.PrependPageTitle:
                return title + String(this.settings.pageTitleSeparator) + applicationName;
            default:
                throw new Error("Invalid pageTitlePositioning specified [" + this.settings.pageTitlePositioning + "]!");
        }
    };
    MetaService.prototype.updateTitle = function (title) {
        this.title.setTitle(title);
        this.meta.updateTag({
            property: 'og:title',
            content: title
        });
    };
    MetaService.prototype.updateLocales = function (currentLocale, availableLocales) {
        var _this = this;
        var cur = currentLocale || (this.settings.defaults ? this.settings.defaults['og:locale'] : '');
        if (cur && this.settings.defaults) {
            this.settings.defaults['og:locale'] = cur.replace(/_/g, '-');
        }
        var elements = this.meta.getTags('property="og:locale:alternate"');
        elements.forEach(function (element) {
            _this.meta.removeTagElement(element);
        });
        if (cur && availableLocales) {
            availableLocales.split(',').forEach(function (locale) {
                if (cur.replace(/-/g, '_') !== locale.replace(/-/g, '_')) {
                    _this.meta.addTag({
                        property: 'og:locale:alternate',
                        content: locale.replace(/-/g, '_')
                    });
                }
            });
        }
    };
    MetaService.prototype.updateTag = function (key, value) {
        if (key.lastIndexOf('og:', 0) === 0) {
            this.meta.updateTag({
                property: key,
                content: key === 'og:locale' ? value.replace(/-/g, '_') : value
            });
        }
        else {
            this.meta.updateTag({
                name: key,
                content: value
            });
        }
        this.isMetaTagSet[key] = true;
        if (key === 'description') {
            this.meta.updateTag({
                property: 'og:description',
                content: value
            });
        }
        else if (key === 'author') {
            this.meta.updateTag({
                property: 'og:author',
                content: value
            });
        }
        else if (key === 'publisher') {
            this.meta.updateTag({
                property: 'og:publisher',
                content: value
            });
        }
        else if (key === 'og:locale') {
            var availableLocales = this.settings.defaults ? this.settings.defaults['og:locale:alternate'] : '';
            this.updateLocales(value, availableLocales);
            this.isMetaTagSet['og:locale:alternate'] = true;
        }
        else if (key === 'og:locale:alternate') {
            var currentLocale = this.meta.getTag('property="og:locale"').content;
            this.updateLocales(currentLocale, value);
            this.isMetaTagSet['og:locale'] = true;
        }
    };
    MetaService.ctorParameters = function () { return [
        { type: MetaLoader },
        { type: Title },
        { type: Meta }
    ]; };
    MetaService = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [MetaLoader, Title, Meta])
    ], MetaService);
MetaService.ɵfac = function MetaService_Factory(t) { return new (t || MetaService)(ɵngcc0.ɵɵinject(MetaLoader), ɵngcc0.ɵɵinject(ɵngcc1.Title), ɵngcc0.ɵɵinject(ɵngcc1.Meta)); };
MetaService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MetaService, factory: function (t) { return MetaService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MetaService, [{
        type: Injectable
    }], function () { return [{ type: MetaLoader }, { type: ɵngcc1.Title }, { type: ɵngcc1.Meta }]; }, null); })();
    return MetaService;
}());
export { MetaService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZzovQG5neC1tZXRhL2NvcmUvbWV0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLElBQUksSUFBSSxjQUFjLEVBQWMsRUFBRSxJQUFJLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUU5RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFDOzs7QUFHakQ7SUFJRSxxQkFBcUIsTUFBa0IsRUFBbUIsS0FBWSxFQUFtQixJQUFVO1FBQTlFLFdBQU0sR0FBTixNQUFNLENBQVk7UUFBbUIsVUFBSyxHQUFMLEtBQUssQ0FBTztRQUFtQixTQUFJLEdBQUosSUFBSSxDQUFNO1FBQ2pHLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsOEJBQVEsR0FBUixVQUFTLEtBQWEsRUFBRSxRQUFnQjtRQUF4QyxpQkE2QkM7UUE3QnVCLHlCQUFBLEVBQUEsZ0JBQWdCO1FBQ3RDLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRS9ELE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBQyxHQUFXO1lBQzNCLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztZQUVuQixJQUFJLENBQUMs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dCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNZXRhLCBUaXRsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgZnJvbSBhcyBvYnNlcnZhYmxlRnJvbSwgT2JzZXJ2YWJsZSwgb2YgYXMgb2JzZXJ2YWJsZU9mIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IE1ldGFMb2FkZXIgfSBmcm9tICcuL21ldGEubG9hZGVyJztcbmltcG9ydCB7IE1ldGFTZXR0aW5ncyB9IGZyb20gJy4vbW9kZWxzL21ldGEtc2V0dGluZ3MnO1xuaW1wb3J0IHsgUGFnZVRpdGxlUG9zaXRpb25pbmcgfSBmcm9tICcuL21vZGVscy9wYWdlLXRpdGxlLXBvc2l0aW9uaW5nJztcbmltcG9ydCB7IGlzT2JzZXJ2YWJsZSwgaXNQcm9taXNlIH0gZnJvbSAnLi91dGlsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1ldGFTZXJ2aWNlIHtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHNldHRpbmdzOiBNZXRhU2V0dGluZ3M7XG4gIHByaXZhdGUgcmVhZG9ubHkgaXNNZXRhVGFnU2V0OiBhbnk7XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgbG9hZGVyOiBNZXRhTG9hZGVyLCBwcml2YXRlIHJlYWRvbmx5IHRpdGxlOiBUaXRsZSwgcHJpdmF0ZSByZWFkb25seSBtZXRhOiBNZXRhKSB7XG4gICAgdGhpcy5zZXR0aW5ncyA9IGxvYWRlci5zZXR0aW5ncztcbiAgICB0aGlzLmlzTWV0YVRhZ1NldCA9IHt9O1xuICB9XG5cbiAgc2V0VGl0bGUodGl0bGU6IHN0cmluZywgb3ZlcnJpZGUgPSBmYWxzZSk6IHZvaWQge1xuICAgIGNvbnN0IHRpdGxlJCA9IHRpdGxlID8gdGhpcy5jYWxsYmFjayh0aXRsZSkgOiBvYnNlcnZhYmxlT2YoJycpO1xuXG4gICAgdGl0bGUkLnN1YnNjcmliZSgocmVzOiBzdHJpbmcpID0+IHtcbiAgICAgIGxldCBmdWxsVGl0bGUgPSAnJztcblxuICAgICAgaWYgKCFyZXMpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdFRpdGxlJCA9XG4gICAgICAgICAgdGhpcy5zZXR0aW5ncy5kZWZhdWx0cyAmJiB0aGlzLnNldHRpbmdzLmRlZmF1bHRzLnRpdGxlID8gdGhpcy5jYWxsYmFjayh0aGlzLnNldHRpbmdzLmRlZmF1bHRzLnRpdGxlKSA6IG9ic2VydmFibGVPZignJyk7XG5cbiAgICAgICAgZGVmYXVsdFRpdGxlJC5zdWJzY3JpYmUoKGRlZmF1bHRUaXRsZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgaWYgKCFvdmVycmlkZSAmJiB0aGlzLnNldHRpbmdzLnBhZ2VUaXRsZVNlcGFyYXRvciAmJiB0aGlzLnNldHRpbmdzLmFwcGxpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLnNldHRpbmdzLmFwcGxpY2F0aW9uTmFtZSkuc3Vic2NyaWJlKChhcHBsaWNhdGlvbk5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICBmdWxsVGl0bGUgPSBhcHBsaWNhdGlvbk5hbWUgPyB0aGlzLmdldFRpdGxlV2l0aFBvc2l0aW9uaW5nKGRlZmF1bHRUaXRsZSwgYXBwbGljYXRpb25OYW1lKSA6IGRlZmF1bHRUaXRsZTtcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVUaXRsZShmdWxsVGl0bGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVGl0bGUoZGVmYXVsdFRpdGxlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICghb3ZlcnJpZGUgJiYgdGhpcy5zZXR0aW5ncy5wYWdlVGl0bGVTZXBhcmF0b3IgJiYgdGhpcy5zZXR0aW5ncy5hcHBsaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLnNldHRpbmdzLmFwcGxpY2F0aW9uTmFtZSkuc3Vic2NyaWJlKChhcHBsaWNhdGlvbk5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgIGZ1bGxUaXRsZSA9IGFwcGxpY2F0aW9uTmFtZSA/IHRoaXMuZ2V0VGl0bGVXaXRoUG9zaXRpb25pbmcocmVzLCBhcHBsaWNhdGlvbk5hbWUpIDogcmVzO1xuICAgICAgICAgIHRoaXMudXBkYXRlVGl0bGUoZnVsbFRpdGxlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVwZGF0ZVRpdGxlKHJlcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzZXRUYWcoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoa2V5ID09PSAndGl0bGUnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBBdHRlbXB0IHRvIHNldCAke2tleX0gdGhyb3VnaCBcInNldFRhZ1wiOiBcInRpdGxlXCIgaXMgYSByZXNlcnZlZCB0YWcgbmFtZS4gYCArICdQbGVhc2UgdXNlIGBNZXRhU2VydmljZS5zZXRUaXRsZWAgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGN1ciA9IHZhbHVlIHx8ICh0aGlzLnNldHRpbmdzLmRlZmF1bHRzICYmIHRoaXMuc2V0dGluZ3MuZGVmYXVsdHNba2V5XSA/IHRoaXMuc2V0dGluZ3MuZGVmYXVsdHNba2V5XSA6ICcnKTtcblxuICAgIGNvbnN0IHZhbHVlJCA9IGtleSAhPT0gJ29nOmxvY2FsZScgJiYga2V5ICE9PSAnb2c6bG9jYWxlOmFsdGVybmF0ZScgPyB0aGlzLmNhbGxiYWNrKGN1cikgOiBvYnNlcnZhYmxlT2YoY3VyKTtcblxuICAgIHZhbHVlJC5zdWJzY3JpYmUoKHJlczogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZVRhZyhrZXksIHJlcyk7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGUoY3VycmVudFVybDogc3RyaW5nLCBtZXRhU2V0dGluZ3M/OiBhbnkpOiB2b2lkIHtcbiAgICBpZiAoIW1ldGFTZXR0aW5ncykge1xuICAgICAgY29uc3QgZmFsbGJhY2tUaXRsZSA9IHRoaXMuc2V0dGluZ3MuZGVmYXVsdHNcbiAgICAgICAgPyB0aGlzLnNldHRpbmdzLmRlZmF1bHRzLnRpdGxlIHx8IHRoaXMuc2V0dGluZ3MuYXBwbGljYXRpb25OYW1lXG4gICAgICAgIDogdGhpcy5zZXR0aW5ncy5hcHBsaWNhdGlvbk5hbWU7XG5cbiAgICAgIHRoaXMuc2V0VGl0bGUoZmFsbGJhY2tUaXRsZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtZXRhU2V0dGluZ3MuZGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy51cGRhdGUoY3VycmVudFVybCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFRpdGxlKG1ldGFTZXR0aW5ncy50aXRsZSwgbWV0YVNldHRpbmdzLm92ZXJyaWRlKTtcblxuICAgICAgT2JqZWN0LmtleXMobWV0YVNldHRpbmdzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGxldCB2YWx1ZSA9IG1ldGFTZXR0aW5nc1trZXldO1xuXG4gICAgICAgIGlmIChrZXkgPT09ICd0aXRsZScgfHwga2V5ID09PSAnb3ZlcnJpZGUnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ29nOmxvY2FsZScpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLy0vZywgJ18nKTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdvZzpsb2NhbGU6YWx0ZXJuYXRlJykge1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRMb2NhbGUgPSBtZXRhU2V0dGluZ3NbJ29nOmxvY2FsZSddO1xuICAgICAgICAgIHRoaXMudXBkYXRlTG9jYWxlcyhjdXJyZW50TG9jYWxlLCBtZXRhU2V0dGluZ3Nba2V5XSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFRhZyhrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNldHRpbmdzLmRlZmF1bHRzKSB7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnNldHRpbmdzLmRlZmF1bHRzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuc2V0dGluZ3MuZGVmYXVsdHNba2V5XTtcblxuICAgICAgICBpZiAoKG1ldGFTZXR0aW5ncyAmJiAoa2V5IGluIHRoaXMuaXNNZXRhVGFnU2V0IHx8IGtleSBpbiBtZXRhU2V0dGluZ3MpKSB8fCBrZXkgPT09ICd0aXRsZScgfHwga2V5ID09PSAnb3ZlcnJpZGUnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ29nOmxvY2FsZScpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLy0vZywgJ18nKTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdvZzpsb2NhbGU6YWx0ZXJuYXRlJykge1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRMb2NhbGUgPSBtZXRhU2V0dGluZ3MgPyBtZXRhU2V0dGluZ3NbJ29nOmxvY2FsZSddIDogdW5kZWZpbmVkO1xuICAgICAgICAgIHRoaXMudXBkYXRlTG9jYWxlcyhjdXJyZW50TG9jYWxlLCB2YWx1ZSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFRhZyhrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGJhc2VVcmwgPSB0aGlzLnNldHRpbmdzLmFwcGxpY2F0aW9uVXJsID8gdGhpcy5zZXR0aW5ncy5hcHBsaWNhdGlvblVybCA6ICcvJztcbiAgICBjb25zdCB1cmwgPSBgJHtiYXNlVXJsfSR7Y3VycmVudFVybH1gLnJlcGxhY2UoLyhodHRwcz86XFwvXFwvKXwoXFwvKSsvZywgJyQxJDInKS5yZXBsYWNlKC9cXC8kL2csICcnKTtcblxuICAgIHRoaXMuc2V0VGFnKCdvZzp1cmwnLCB1cmwgPyB1cmwgOiAnLycpO1xuICB9XG5cbiAgcmVtb3ZlVGFnKGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5tZXRhLnJlbW92ZVRhZyhrZXkpO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxsYmFjayh2YWx1ZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICBpZiAodGhpcy5zZXR0aW5ncy5jYWxsYmFjaykge1xuICAgICAgY29uc3QgdmFsdWUkID0gdGhpcy5zZXR0aW5ncy5jYWxsYmFjayh2YWx1ZSk7XG5cbiAgICAgIGlmICghaXNPYnNlcnZhYmxlKHZhbHVlJCkpIHtcbiAgICAgICAgcmV0dXJuIGlzUHJvbWlzZSh2YWx1ZSQpID8gb2JzZXJ2YWJsZUZyb20odmFsdWUkKSA6IG9ic2VydmFibGVPZih2YWx1ZSQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWUkO1xuICAgIH1cblxuICAgIHJldHVybiBvYnNlcnZhYmxlT2YodmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRUaXRsZVdpdGhQb3NpdGlvbmluZyh0aXRsZTogc3RyaW5nLCBhcHBsaWNhdGlvbk5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgc3dpdGNoICh0aGlzLnNldHRpbmdzLnBhZ2VUaXRsZVBvc2l0aW9uaW5nKSB7XG4gICAgICBjYXNlIFBhZ2VUaXRsZVBvc2l0aW9uaW5nLkFwcGVuZFBhZ2VUaXRsZTpcbiAgICAgICAgcmV0dXJuIGFwcGxpY2F0aW9uTmFtZSArIFN0cmluZyh0aGlzLnNldHRpbmdzLnBhZ2VUaXRsZVNlcGFyYXRvcikgKyB0aXRsZTtcbiAgICAgIGNhc2UgUGFnZVRpdGxlUG9zaXRpb25pbmcuUHJlcGVuZFBhZ2VUaXRsZTpcbiAgICAgICAgcmV0dXJuIHRpdGxlICsgU3RyaW5nKHRoaXMuc2V0dGluZ3MucGFnZVRpdGxlU2VwYXJhdG9yKSArIGFwcGxpY2F0aW9uTmFtZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwYWdlVGl0bGVQb3NpdGlvbmluZyBzcGVjaWZpZWQgWyR7dGhpcy5zZXR0aW5ncy5wYWdlVGl0bGVQb3NpdGlvbmluZ31dIWApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlVGl0bGUodGl0bGU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMudGl0bGUuc2V0VGl0bGUodGl0bGUpO1xuICAgIHRoaXMubWV0YS51cGRhdGVUYWcoe1xuICAgICAgcHJvcGVydHk6ICdvZzp0aXRsZScsXG4gICAgICBjb250ZW50OiB0aXRsZVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVMb2NhbGVzKGN1cnJlbnRMb2NhbGU6IHN0cmluZywgYXZhaWxhYmxlTG9jYWxlczogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgY3VyID0gY3VycmVudExvY2FsZSB8fCAodGhpcy5zZXR0aW5ncy5kZWZhdWx0cyA/IHRoaXMuc2V0dGluZ3MuZGVmYXVsdHNbJ29nOmxvY2FsZSddIDogJycpO1xuXG4gICAgaWYgKGN1ciAmJiB0aGlzLnNldHRpbmdzLmRlZmF1bHRzKSB7XG4gICAgICB0aGlzLnNldHRpbmdzLmRlZmF1bHRzWydvZzpsb2NhbGUnXSA9IGN1ci5yZXBsYWNlKC9fL2csICctJyk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogc2V0IEhUTUwgbGFuZyBhdHRyaWJ1dGUgLSBodHRwczovL2dpdGh1Yi5jb20vbmd4LW1ldGEvY29yZS9pc3N1ZXMvMzJcbiAgICAvLyBjb25zdCBodG1sID0gdGhpcy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdodG1sJyk7XG4gICAgLy8gaHRtbC5zZXRBdHRyaWJ1dGUoJ2xhbmcnLCBjdXIpO1xuXG4gICAgY29uc3QgZWxlbWVudHMgPSB0aGlzLm1ldGEuZ2V0VGFncygncHJvcGVydHk9XCJvZzpsb2NhbGU6YWx0ZXJuYXRlXCInKTtcblxuICAgIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQ6IGFueSkgPT4ge1xuICAgICAgdGhpcy5tZXRhLnJlbW92ZVRhZ0VsZW1lbnQoZWxlbWVudCk7XG4gICAgfSk7XG5cbiAgICBpZiAoY3VyICYmIGF2YWlsYWJsZUxvY2FsZXMpIHtcbiAgICAgIGF2YWlsYWJsZUxvY2FsZXMuc3BsaXQoJywnKS5mb3JFYWNoKChsb2NhbGU6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoY3VyLnJlcGxhY2UoLy0vZywgJ18nKSAhPT0gbG9jYWxlLnJlcGxhY2UoLy0vZywgJ18nKSkge1xuICAgICAgICAgIHRoaXMubWV0YS5hZGRUYWcoe1xuICAgICAgICAgICAgcHJvcGVydHk6ICdvZzpsb2NhbGU6YWx0ZXJuYXRlJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGxvY2FsZS5yZXBsYWNlKC8tL2csICdfJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVUYWcoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoa2V5Lmxhc3RJbmRleE9mKCdvZzonLCAwKSA9PT0gMCkge1xuICAgICAgdGhpcy5tZXRhLnVwZGF0ZVRhZyh7XG4gICAgICAgIHByb3BlcnR5OiBrZXksXG4gICAgICAgIGNvbnRlbnQ6IGtleSA9PT0gJ29nOmxvY2FsZScgPyB2YWx1ZS5yZXBsYWNlKC8tL2csICdfJykgOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWV0YS51cGRhdGVUYWcoe1xuICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgIGNvbnRlbnQ6IHZhbHVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmlzTWV0YVRhZ1NldFtrZXldID0gdHJ1ZTtcblxuICAgIGlmIChrZXkgPT09ICdkZXNjcmlwdGlvbicpIHtcbiAgICAgIHRoaXMubWV0YS51cGRhdGVUYWcoe1xuICAgICAgICBwcm9wZXJ0eTogJ29nOmRlc2NyaXB0aW9uJyxcbiAgICAgICAgY29udGVudDogdmFsdWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnYXV0aG9yJykge1xuICAgICAgdGhpcy5tZXRhLnVwZGF0ZVRhZyh7XG4gICAgICAgIHByb3BlcnR5OiAnb2c6YXV0aG9yJyxcbiAgICAgICAgY29udGVudDogdmFsdWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncHVibGlzaGVyJykge1xuICAgICAgdGhpcy5tZXRhLnVwZGF0ZVRhZyh7XG4gICAgICAgIHByb3BlcnR5OiAnb2c6cHVibGlzaGVyJyxcbiAgICAgICAgY29udGVudDogdmFsdWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnb2c6bG9jYWxlJykge1xuICAgICAgY29uc3QgYXZhaWxhYmxlTG9jYWxlcyA9IHRoaXMuc2V0dGluZ3MuZGVmYXVsdHMgPyB0aGlzLnNldHRpbmdzLmRlZmF1bHRzWydvZzpsb2NhbGU6YWx0ZXJuYXRlJ10gOiAnJztcblxuICAgICAgdGhpcy51cGRhdGVMb2NhbGVzKHZhbHVlLCBhdmFpbGFibGVMb2NhbGVzKTtcbiAgICAgIHRoaXMuaXNNZXRhVGFnU2V0WydvZzpsb2NhbGU6YWx0ZXJuYXRlJ10gPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnb2c6bG9jYWxlOmFsdGVybmF0ZScpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRMb2NhbGUgPSB0aGlzLm1ldGEuZ2V0VGFnKCdwcm9wZXJ0eT1cIm9nOmxvY2FsZVwiJykuY29udGVudDtcblxuICAgICAgdGhpcy51cGRhdGVMb2NhbGVzKGN1cnJlbnRMb2NhbGUsIHZhbHVlKTtcbiAgICAgIHRoaXMuaXNNZXRhVGFnU2V0WydvZzpsb2NhbGUnXSA9IHRydWU7XG4gICAgfVxuICB9XG59XG4iXX0=