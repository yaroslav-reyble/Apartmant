import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { MetaService } from './meta.service';
import * as ɵngcc0 from '@angular/core';
let MetaGuard = class MetaGuard {
    constructor(meta) {
        this.meta = meta;
    }
    canActivate(route, state) {
        const url = state.url;
        const metaSettings = route.hasOwnProperty('data') ? route.data.meta : undefined;
        this.meta.update(url, metaSettings);
        return true;
    }
    canActivateChild(route, state) {
        return this.canActivate(route, state);
    }
};
MetaGuard.ɵfac = function MetaGuard_Factory(t) { return new (t || MetaGuard)(ɵngcc0.ɵɵinject(MetaService)); };
MetaGuard.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MetaGuard, factory: MetaGuard.ɵfac });
MetaGuard.ctorParameters = () => [
    { type: MetaService }
];
MetaGuard = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [MetaService])
], MetaGuard);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MetaGuard, [{
        type: Injectable
    }], function () { return [{ type: MetaService }]; }, null); })();
export { MetaGuard };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS5ndWFyZC5qcyIsInNvdXJjZXMiOlsibmc6L0BuZ3gtbWV0YS9jb3JlL21ldGEuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUc3QyxJQUFhLFNBQVMsR0FBdEIsTUFBYSxTQUFTO0lBQ3BCLFlBQTZCLElBQWlCO1FBQWpCLFNBQUksR0FBSixJQUFJLENBQWE7SUFBRyxDQUFDO0lBRWxELFdBQVcsQ0FBQyxLQUE2QixFQUFFLEtBQTBCO1FBQ25FLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFFdEIsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUVoRixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFcEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsS0FBNkIsRUFBRSxLQUEwQjtRQUN4RSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Q0FDRjs7MkZBQUE7O1lBZm9DLFdBQVc7O0FBRG5DLFNBQVMsdUJBQXVCLEtBRDVDLFVBQVUsRUFBRSxqQkFDVCwwQ0FDaUMsV0FBVztHQURuQyxTQUFTLENBZ0JyQjs7O3FFQUNEO1NBakJhLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBDYW5BY3RpdmF0ZSwgQ2FuQWN0aXZhdGVDaGlsZCwgUm91dGVyU3RhdGVTbmFwc2hvdCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IE1ldGFTZXJ2aWNlIH0gZnJvbSAnLi9tZXRhLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTWV0YUd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUsIENhbkFjdGl2YXRlQ2hpbGQge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG1ldGE6IE1ldGFTZXJ2aWNlKSB7fVxuXG4gIGNhbkFjdGl2YXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHVybCA9IHN0YXRlLnVybDtcblxuICAgIGNvbnN0IG1ldGFTZXR0aW5ncyA9IHJvdXRlLmhhc093blByb3BlcnR5KCdkYXRhJykgPyByb3V0ZS5kYXRhLm1ldGEgOiB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLm1ldGEudXBkYXRlKHVybCwgbWV0YVNldHRpbmdzKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY2FuQWN0aXZhdGVDaGlsZChyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jYW5BY3RpdmF0ZShyb3V0ZSwgc3RhdGUpO1xuICB9XG59XG4iXX0=