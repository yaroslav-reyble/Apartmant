import { Observable } from 'rxjs';
import { BreakPointRegistry } from '../breakpoints/break-point-registry';
import { MatchMedia } from '../match-media/match-media';
import { MediaChange } from '../media-change';
import { PrintHook } from './print-hook';
import * as ɵngcc0 from '@angular/core';
declare type ClearCallback = () => void;
declare type UpdateCallback = (val: any) => void;
export interface ElementMatcher {
    element: HTMLElement;
    key: string;
    value: any;
}
/**
 * MediaMarshaller - register responsive values from directives and
 *                   trigger them based on media query events
 */
export declare class MediaMarshaller {
    protected matchMedia: MatchMedia;
    protected breakpoints: BreakPointRegistry;
    protected hook: PrintHook;
    private activatedBreakpoints;
    private elementMap;
    private elementKeyMap;
    private watcherMap;
    private updateMap;
    private clearMap;
    private subject;
    get activatedAlias(): string;
    constructor(matchMedia: MatchMedia, breakpoints: BreakPointRegistry, hook: PrintHook);
    /**
     * Update styles on breakpoint activates or deactivates
     * @param mc
     */
    onMediaChange(mc: MediaChange): void;
    /**
     * initialize the marshaller with necessary elements for delegation on an element
     * @param element
     * @param key
     * @param updateFn optional callback so that custom bp directives don't have to re-provide this
     * @param clearFn optional callback so that custom bp directives don't have to re-provide this
     * @param extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)
     */
    init(element: HTMLElement, key: string, updateFn?: UpdateCallback, clearFn?: ClearCallback, extraTriggers?: Observable<any>[]): void;
    /**
     * get the value for an element and key and optionally a given breakpoint
     * @param element
     * @param key
     * @param bp
     */
    getValue(element: HTMLElement, key: string, bp?: string): any;
    /**
     * whether the element has values for a given key
     * @param element
     * @param key
     */
    hasValue(element: HTMLElement, key: string): boolean;
    /**
     * Set the value for an input on a directive
     * @param element the element in question
     * @param key the type of the directive (e.g. flex, layout-gap, etc)
     * @param bp the breakpoint suffix (empty string = default)
     * @param val the value for the breakpoint
     */
    setValue(element: HTMLElement, key: string, val: any, bp: string): void;
    /** Track element value changes for a specific key */
    trackValue(element: HTMLElement, key: string): Observable<ElementMatcher>;
    /** update all styles for all elements on the current breakpoint */
    updateStyles(): void;
    /**
     * clear the styles for a given element
     * @param element
     * @param key
     */
    clearElement(element: HTMLElement, key: string): void;
    /**
     * update a given element with the activated values for a given key
     * @param element
     * @param key
     * @param value
     */
    updateElement(element: HTMLElement, key: string, value: any): void;
    /**
     * release all references to a given element
     * @param element
     */
    releaseElement(element: HTMLElement): void;
    /**
     * trigger an update for a given element and key (e.g. layout)
     * @param element
     * @param key
     */
    triggerUpdate(element: HTMLElement, key?: string): void;
    /** Cross-reference for HTMLElement with directive key */
    private buildElementKeyMap;
    /**
     * Other triggers that should force style updates:
     * - directionality
     * - layout changes
     * - mutationobserver updates
     */
    private watchExtraTriggers;
    /** Breakpoint locator by mediaQuery */
    private findByQuery;
    /**
     * get the fallback breakpoint for a given element, starting with the current breakpoint
     * @param bpMap
     * @param key
     */
    private getActivatedValues;
    /**
     * Watch for mediaQuery breakpoint activations
     */
    private observeActivations;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MediaMarshaller>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEtbWFyc2hhbGxlci5kLnRzIiwic291cmNlcyI6WyJtZWRpYS1tYXJzaGFsbGVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEdBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQnJlYWtQb2ludFJlZ2lzdHJ5IH0gZnJvbSAnLi4vYnJlYWtwb2ludHMvYnJlYWstcG9pbnQtcmVnaXN0cnknO1xuaW1wb3J0IHsgTWF0Y2hNZWRpYSB9IGZyb20gJy4uL21hdGNoLW1lZGlhL21hdGNoLW1lZGlhJztcbmltcG9ydCB7IE1lZGlhQ2hhbmdlIH0gZnJvbSAnLi4vbWVkaWEtY2hhbmdlJztcbmltcG9ydCB7IFByaW50SG9vayB9IGZyb20gJy4vcHJpbnQtaG9vayc7XG5kZWNsYXJlIHR5cGUgQ2xlYXJDYWxsYmFjayA9ICgpID0+IHZvaWQ7XG5kZWNsYXJlIHR5cGUgVXBkYXRlQ2FsbGJhY2sgPSAodmFsOiBhbnkpID0+IHZvaWQ7XG5leHBvcnQgaW50ZXJmYWNlIEVsZW1lbnRNYXRjaGVyIHtcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBrZXk6IHN0cmluZztcbiAgICB2YWx1ZTogYW55O1xufVxuLyoqXG4gKiBNZWRpYU1hcnNoYWxsZXIgLSByZWdpc3RlciByZXNwb25zaXZlIHZhbHVlcyBmcm9tIGRpcmVjdGl2ZXMgYW5kXG4gKiAgICAgICAgICAgICAgICAgICB0cmlnZ2VyIHRoZW0gYmFzZWQgb24gbWVkaWEgcXVlcnkgZXZlbnRzXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1lZGlhTWFyc2hhbGxlciB7XG4gICAgcHJvdGVjdGVkIG1hdGNoTWVkaWE6IE1hdGNoTWVkaWE7XG4gICAgcHJvdGVjdGVkIGJyZWFrcG9pbnRzOiBCcmVha1BvaW50UmVnaXN0cnk7XG4gICAgcHJvdGVjdGVkIGhvb2s6IFByaW50SG9vaztcbiAgICBwcml2YXRlIGFjdGl2YXRlZEJyZWFrcG9pbnRzO1xuICAgIHByaXZhdGUgZWxlbWVudE1hcDtcbiAgICBwcml2YXRlIGVsZW1lbnRLZXlNYXA7XG4gICAgcHJpdmF0ZSB3YXRjaGVyTWFwO1xuICAgIHByaXZhdGUgdXBkYXRlTWFwO1xuICAgIHByaXZhdGUgY2xlYXJNYXA7XG4gICAgcHJpdmF0ZSBzdWJqZWN0O1xuICAgIGdldCBhY3RpdmF0ZWRBbGlhcygpOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IobWF0Y2hNZWRpYTogTWF0Y2hNZWRpYSwgYnJlYWtwb2ludHM6IEJyZWFrUG9pbnRSZWdpc3RyeSwgaG9vazogUHJpbnRIb29rKTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgc3R5bGVzIG9uIGJyZWFrcG9pbnQgYWN0aXZhdGVzIG9yIGRlYWN0aXZhdGVzXG4gICAgICogQHBhcmFtIG1jXG4gICAgICovXG4gICAgb25NZWRpYUNoYW5nZShtYzogTWVkaWFDaGFuZ2UpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIGluaXRpYWxpemUgdGhlIG1hcnNoYWxsZXIgd2l0aCBuZWNlc3NhcnkgZWxlbWVudHMgZm9yIGRlbGVnYXRpb24gb24gYW4gZWxlbWVudFxuICAgICAqIEBwYXJhbSBlbGVtZW50XG4gICAgICogQHBhcmFtIGtleVxuICAgICAqIEBwYXJhbSB1cGRhdGVGbiBvcHRpb25hbCBjYWxsYmFjayBzbyB0aGF0IGN1c3RvbSBicCBkaXJlY3RpdmVzIGRvbid0IGhhdmUgdG8gcmUtcHJvdmlkZSB0aGlzXG4gICAgICogQHBhcmFtIGNsZWFyRm4gb3B0aW9uYWwgY2FsbGJhY2sgc28gdGhhdCBjdXN0b20gYnAgZGlyZWN0aXZlcyBkb24ndCBoYXZlIHRvIHJlLXByb3ZpZGUgdGhpc1xuICAgICAqIEBwYXJhbSBleHRyYVRyaWdnZXJzIG90aGVyIHRyaWdnZXJzIHRvIGZvcmNlIHN0eWxlIHVwZGF0ZXMgKGUuZy4gbGF5b3V0LCBkaXJlY3Rpb25hbGl0eSwgZXRjKVxuICAgICAqL1xuICAgIGluaXQoZWxlbWVudDogSFRNTEVsZW1lbnQsIGtleTogc3RyaW5nLCB1cGRhdGVGbj86IFVwZGF0ZUNhbGxiYWNrLCBjbGVhckZuPzogQ2xlYXJDYWxsYmFjaywgZXh0cmFUcmlnZ2Vycz86IE9ic2VydmFibGU8YW55PltdKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIHZhbHVlIGZvciBhbiBlbGVtZW50IGFuZCBrZXkgYW5kIG9wdGlvbmFsbHkgYSBnaXZlbiBicmVha3BvaW50XG4gICAgICogQHBhcmFtIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ga2V5XG4gICAgICogQHBhcmFtIGJwXG4gICAgICovXG4gICAgZ2V0VmFsdWUoZWxlbWVudDogSFRNTEVsZW1lbnQsIGtleTogc3RyaW5nLCBicD86IHN0cmluZyk6IGFueTtcbiAgICAvKipcbiAgICAgKiB3aGV0aGVyIHRoZSBlbGVtZW50IGhhcyB2YWx1ZXMgZm9yIGEgZ2l2ZW4ga2V5XG4gICAgICogQHBhcmFtIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ga2V5XG4gICAgICovXG4gICAgaGFzVmFsdWUoZWxlbWVudDogSFRNTEVsZW1lbnQsIGtleTogc3RyaW5nKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHZhbHVlIGZvciBhbiBpbnB1dCBvbiBhIGRpcmVjdGl2ZVxuICAgICAqIEBwYXJhbSBlbGVtZW50IHRoZSBlbGVtZW50IGluIHF1ZXN0aW9uXG4gICAgICogQHBhcmFtIGtleSB0aGUgdHlwZSBvZiB0aGUgZGlyZWN0aXZlIChlLmcuIGZsZXgsIGxheW91dC1nYXAsIGV0YylcbiAgICAgKiBAcGFyYW0gYnAgdGhlIGJyZWFrcG9pbnQgc3VmZml4IChlbXB0eSBzdHJpbmcgPSBkZWZhdWx0KVxuICAgICAqIEBwYXJhbSB2YWwgdGhlIHZhbHVlIGZvciB0aGUgYnJlYWtwb2ludFxuICAgICAqL1xuICAgIHNldFZhbHVlKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBrZXk6IHN0cmluZywgdmFsOiBhbnksIGJwOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKiBUcmFjayBlbGVtZW50IHZhbHVlIGNoYW5nZXMgZm9yIGEgc3BlY2lmaWMga2V5ICovXG4gICAgdHJhY2tWYWx1ZShlbGVtZW50OiBIVE1MRWxlbWVudCwga2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPEVsZW1lbnRNYXRjaGVyPjtcbiAgICAvKiogdXBkYXRlIGFsbCBzdHlsZXMgZm9yIGFsbCBlbGVtZW50cyBvbiB0aGUgY3VycmVudCBicmVha3BvaW50ICovXG4gICAgdXBkYXRlU3R5bGVzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogY2xlYXIgdGhlIHN0eWxlcyBmb3IgYSBnaXZlbiBlbGVtZW50XG4gICAgICogQHBhcmFtIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ga2V5XG4gICAgICovXG4gICAgY2xlYXJFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBrZXk6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogdXBkYXRlIGEgZ2l2ZW4gZWxlbWVudCB3aXRoIHRoZSBhY3RpdmF0ZWQgdmFsdWVzIGZvciBhIGdpdmVuIGtleVxuICAgICAqIEBwYXJhbSBlbGVtZW50XG4gICAgICogQHBhcmFtIGtleVxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqL1xuICAgIHVwZGF0ZUVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQsIGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiByZWxlYXNlIGFsbCByZWZlcmVuY2VzIHRvIGEgZ2l2ZW4gZWxlbWVudFxuICAgICAqIEBwYXJhbSBlbGVtZW50XG4gICAgICovXG4gICAgcmVsZWFzZUVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIHRyaWdnZXIgYW4gdXBkYXRlIGZvciBhIGdpdmVuIGVsZW1lbnQgYW5kIGtleSAoZS5nLiBsYXlvdXQpXG4gICAgICogQHBhcmFtIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ga2V5XG4gICAgICovXG4gICAgdHJpZ2dlclVwZGF0ZShlbGVtZW50OiBIVE1MRWxlbWVudCwga2V5Pzogc3RyaW5nKTogdm9pZDtcbiAgICAvKiogQ3Jvc3MtcmVmZXJlbmNlIGZvciBIVE1MRWxlbWVudCB3aXRoIGRpcmVjdGl2ZSBrZXkgKi9cbiAgICBwcml2YXRlIGJ1aWxkRWxlbWVudEtleU1hcDtcbiAgICAvKipcbiAgICAgKiBPdGhlciB0cmlnZ2VycyB0aGF0IHNob3VsZCBmb3JjZSBzdHlsZSB1cGRhdGVzOlxuICAgICAqIC0gZGlyZWN0aW9uYWxpdHlcbiAgICAgKiAtIGxheW91dCBjaGFuZ2VzXG4gICAgICogLSBtdXRhdGlvbm9ic2VydmVyIHVwZGF0ZXNcbiAgICAgKi9cbiAgICBwcml2YXRlIHdhdGNoRXh0cmFUcmlnZ2VycztcbiAgICAvKiogQnJlYWtwb2ludCBsb2NhdG9yIGJ5IG1lZGlhUXVlcnkgKi9cbiAgICBwcml2YXRlIGZpbmRCeVF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIGdldCB0aGUgZmFsbGJhY2sgYnJlYWtwb2ludCBmb3IgYSBnaXZlbiBlbGVtZW50LCBzdGFydGluZyB3aXRoIHRoZSBjdXJyZW50IGJyZWFrcG9pbnRcbiAgICAgKiBAcGFyYW0gYnBNYXBcbiAgICAgKiBAcGFyYW0ga2V5XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRBY3RpdmF0ZWRWYWx1ZXM7XG4gICAgLyoqXG4gICAgICogV2F0Y2ggZm9yIG1lZGlhUXVlcnkgYnJlYWtwb2ludCBhY3RpdmF0aW9uc1xuICAgICAqL1xuICAgIHByaXZhdGUgb2JzZXJ2ZUFjdGl2YXRpb25zO1xufVxuZXhwb3J0IHt9O1xuIl19