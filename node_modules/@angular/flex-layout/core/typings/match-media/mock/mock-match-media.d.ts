/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { NgZone } from '@angular/core';
import { MatchMedia } from '../match-media';
import { BreakPointRegistry } from '../../breakpoints/break-point-registry';
/**
 * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated
 * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery
 * range and to clearAll mediaQuery listeners.
 */
import * as ɵngcc0 from '@angular/core';
export declare class MockMatchMedia extends MatchMedia {
    private _breakpoints;
    autoRegisterQueries: boolean;
    useOverlaps: boolean;
    constructor(_zone: NgZone, _platformId: Object, _document: any, _breakpoints: BreakPointRegistry);
    /** Easy method to clear all listeners for all mediaQueries */
    clearAll(): void;
    /** Feature to support manual, simulated activation of a mediaQuery. */
    activate(mediaQuery: string, useOverlaps?: boolean): boolean;
    /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */
    _validateQuery(queryOrAlias: string): string;
    /**
     * Manually onMediaChange any overlapping mediaQueries to simulate
     * similar functionality in the window.matchMedia()
     */
    private _activateWithOverlaps;
    /**
     *
     */
    private _activateByAlias;
    /**
     *
     */
    private _activateByQuery;
    /** Deactivate all current MQLs and reset the buffer */
    private _deactivateAll;
    /** Insure the mediaQuery is registered with MatchMedia */
    private _registerMediaQuery;
    /**
     * Call window.matchMedia() to build a MediaQueryList; which
     * supports 0..n listeners for activation/deactivation
     */
    protected buildMQL(query: string): MediaQueryList;
    protected get hasActivated(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MockMatchMedia>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MockMatchMedia>;
}
/**
 * Special internal class to simulate a MediaQueryList and
 * - supports manual activation to simulate mediaQuery matching
 * - manages listeners
 */
export declare class MockMediaQueryList implements MediaQueryList {
    private _mediaQuery;
    private _isActive;
    private _listeners;
    get matches(): boolean;
    get media(): string;
    constructor(_mediaQuery: string);
    /**
     * Destroy the current list by deactivating the
     * listeners and clearing the internal list
     */
    destroy(): void;
    /** Notify all listeners that 'matches === TRUE' */
    activate(): MockMediaQueryList;
    /** Notify all listeners that 'matches === false' */
    deactivate(): MockMediaQueryList;
    /** Add a listener to our internal list to activate later */
    addListener(listener: MediaQueryListListener): void;
    /** Don't need to remove listeners in the testing environment */
    removeListener(_: MediaQueryListListener | null): void;
    addEventListener<K extends keyof MediaQueryListEventMap>(_: K, __: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, ___?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MediaQueryListEventMap>(_: K, __: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, ___?: boolean | EventListenerOptions): void;
    dispatchEvent(_: Event): boolean;
    onchange: MediaQueryListListener;
}
/**
 * Pre-configured provider for MockMatchMedia
 */
export declare const MockMatchMediaProvider: {
    provide: typeof MatchMedia;
    useClass: typeof MockMatchMedia;
};
declare type MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1tYXRjaC1tZWRpYS5kLnRzIiwic291cmNlcyI6WyJtb2NrLW1hdGNoLW1lZGlhLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0NBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdGNoTWVkaWEgfSBmcm9tICcuLi9tYXRjaC1tZWRpYSc7XG5pbXBvcnQgeyBCcmVha1BvaW50UmVnaXN0cnkgfSBmcm9tICcuLi8uLi9icmVha3BvaW50cy9icmVhay1wb2ludC1yZWdpc3RyeSc7XG4vKipcbiAqIE1vY2tNYXRjaE1lZGlhIG1vY2tzIGNhbGxzIHRvIHRoZSBXaW5kb3cgQVBJIG1hdGNoTWVkaWEgd2l0aCBhIGJ1aWxkIG9mIGEgc2ltdWxhdGVkXG4gKiBNb2NrTWVkaWFRdWVyeUxpc3RlbmVyLiBNZXRob2RzIGFyZSBhdmFpbGFibGUgdG8gc2ltdWxhdGUgYW4gYWN0aXZhdGlvbiBvZiBhIG1lZGlhUXVlcnlcbiAqIHJhbmdlIGFuZCB0byBjbGVhckFsbCBtZWRpYVF1ZXJ5IGxpc3RlbmVycy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTW9ja01hdGNoTWVkaWEgZXh0ZW5kcyBNYXRjaE1lZGlhIHtcbiAgICBwcml2YXRlIF9icmVha3BvaW50cztcbiAgICBhdXRvUmVnaXN0ZXJRdWVyaWVzOiBib29sZWFuO1xuICAgIHVzZU92ZXJsYXBzOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKF96b25lOiBOZ1pvbmUsIF9wbGF0Zm9ybUlkOiBPYmplY3QsIF9kb2N1bWVudDogYW55LCBfYnJlYWtwb2ludHM6IEJyZWFrUG9pbnRSZWdpc3RyeSk7XG4gICAgLyoqIEVhc3kgbWV0aG9kIHRvIGNsZWFyIGFsbCBsaXN0ZW5lcnMgZm9yIGFsbCBtZWRpYVF1ZXJpZXMgKi9cbiAgICBjbGVhckFsbCgpOiB2b2lkO1xuICAgIC8qKiBGZWF0dXJlIHRvIHN1cHBvcnQgbWFudWFsLCBzaW11bGF0ZWQgYWN0aXZhdGlvbiBvZiBhIG1lZGlhUXVlcnkuICovXG4gICAgYWN0aXZhdGUobWVkaWFRdWVyeTogc3RyaW5nLCB1c2VPdmVybGFwcz86IGJvb2xlYW4pOiBib29sZWFuO1xuICAgIC8qKiBDb252ZXJ0cyBhbiBvcHRpb25hbCBtZWRpYVF1ZXJ5IGFsaWFzIHRvIGEgc3BlY2lmaWMsIHZhbGlkIG1lZGlhUXVlcnkgKi9cbiAgICBfdmFsaWRhdGVRdWVyeShxdWVyeU9yQWxpYXM6IHN0cmluZyk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBNYW51YWxseSBvbk1lZGlhQ2hhbmdlIGFueSBvdmVybGFwcGluZyBtZWRpYVF1ZXJpZXMgdG8gc2ltdWxhdGVcbiAgICAgKiBzaW1pbGFyIGZ1bmN0aW9uYWxpdHkgaW4gdGhlIHdpbmRvdy5tYXRjaE1lZGlhKClcbiAgICAgKi9cbiAgICBwcml2YXRlIF9hY3RpdmF0ZVdpdGhPdmVybGFwcztcbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgX2FjdGl2YXRlQnlBbGlhcztcbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgX2FjdGl2YXRlQnlRdWVyeTtcbiAgICAvKiogRGVhY3RpdmF0ZSBhbGwgY3VycmVudCBNUUxzIGFuZCByZXNldCB0aGUgYnVmZmVyICovXG4gICAgcHJpdmF0ZSBfZGVhY3RpdmF0ZUFsbDtcbiAgICAvKiogSW5zdXJlIHRoZSBtZWRpYVF1ZXJ5IGlzIHJlZ2lzdGVyZWQgd2l0aCBNYXRjaE1lZGlhICovXG4gICAgcHJpdmF0ZSBfcmVnaXN0ZXJNZWRpYVF1ZXJ5O1xuICAgIC8qKlxuICAgICAqIENhbGwgd2luZG93Lm1hdGNoTWVkaWEoKSB0byBidWlsZCBhIE1lZGlhUXVlcnlMaXN0OyB3aGljaFxuICAgICAqIHN1cHBvcnRzIDAuLm4gbGlzdGVuZXJzIGZvciBhY3RpdmF0aW9uL2RlYWN0aXZhdGlvblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBidWlsZE1RTChxdWVyeTogc3RyaW5nKTogTWVkaWFRdWVyeUxpc3Q7XG4gICAgcHJvdGVjdGVkIGdldCBoYXNBY3RpdmF0ZWQoKTogYm9vbGVhbjtcbn1cbi8qKlxuICogU3BlY2lhbCBpbnRlcm5hbCBjbGFzcyB0byBzaW11bGF0ZSBhIE1lZGlhUXVlcnlMaXN0IGFuZFxuICogLSBzdXBwb3J0cyBtYW51YWwgYWN0aXZhdGlvbiB0byBzaW11bGF0ZSBtZWRpYVF1ZXJ5IG1hdGNoaW5nXG4gKiAtIG1hbmFnZXMgbGlzdGVuZXJzXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1vY2tNZWRpYVF1ZXJ5TGlzdCBpbXBsZW1lbnRzIE1lZGlhUXVlcnlMaXN0IHtcbiAgICBwcml2YXRlIF9tZWRpYVF1ZXJ5O1xuICAgIHByaXZhdGUgX2lzQWN0aXZlO1xuICAgIHByaXZhdGUgX2xpc3RlbmVycztcbiAgICBnZXQgbWF0Y2hlcygpOiBib29sZWFuO1xuICAgIGdldCBtZWRpYSgpOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoX21lZGlhUXVlcnk6IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogRGVzdHJveSB0aGUgY3VycmVudCBsaXN0IGJ5IGRlYWN0aXZhdGluZyB0aGVcbiAgICAgKiBsaXN0ZW5lcnMgYW5kIGNsZWFyaW5nIHRoZSBpbnRlcm5hbCBsaXN0XG4gICAgICovXG4gICAgZGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKiBOb3RpZnkgYWxsIGxpc3RlbmVycyB0aGF0ICdtYXRjaGVzID09PSBUUlVFJyAqL1xuICAgIGFjdGl2YXRlKCk6IE1vY2tNZWRpYVF1ZXJ5TGlzdDtcbiAgICAvKiogTm90aWZ5IGFsbCBsaXN0ZW5lcnMgdGhhdCAnbWF0Y2hlcyA9PT0gZmFsc2UnICovXG4gICAgZGVhY3RpdmF0ZSgpOiBNb2NrTWVkaWFRdWVyeUxpc3Q7XG4gICAgLyoqIEFkZCBhIGxpc3RlbmVyIHRvIG91ciBpbnRlcm5hbCBsaXN0IHRvIGFjdGl2YXRlIGxhdGVyICovXG4gICAgYWRkTGlzdGVuZXIobGlzdGVuZXI6IE1lZGlhUXVlcnlMaXN0TGlzdGVuZXIpOiB2b2lkO1xuICAgIC8qKiBEb24ndCBuZWVkIHRvIHJlbW92ZSBsaXN0ZW5lcnMgaW4gdGhlIHRlc3RpbmcgZW52aXJvbm1lbnQgKi9cbiAgICByZW1vdmVMaXN0ZW5lcihfOiBNZWRpYVF1ZXJ5TGlzdExpc3RlbmVyIHwgbnVsbCk6IHZvaWQ7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcjxLIGV4dGVuZHMga2V5b2YgTWVkaWFRdWVyeUxpc3RFdmVudE1hcD4oXzogSywgX186ICh0aGlzOiBNZWRpYVF1ZXJ5TGlzdCwgZXY6IE1lZGlhUXVlcnlMaXN0RXZlbnRNYXBbS10pID0+IGFueSwgX19fPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKTogdm9pZDtcbiAgICByZW1vdmVFdmVudExpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiBNZWRpYVF1ZXJ5TGlzdEV2ZW50TWFwPihfOiBLLCBfXzogKHRoaXM6IE1lZGlhUXVlcnlMaXN0LCBldjogTWVkaWFRdWVyeUxpc3RFdmVudE1hcFtLXSkgPT4gYW55LCBfX18/OiBib29sZWFuIHwgRXZlbnRMaXN0ZW5lck9wdGlvbnMpOiB2b2lkO1xuICAgIGRpc3BhdGNoRXZlbnQoXzogRXZlbnQpOiBib29sZWFuO1xuICAgIG9uY2hhbmdlOiBNZWRpYVF1ZXJ5TGlzdExpc3RlbmVyO1xufVxuLyoqXG4gKiBQcmUtY29uZmlndXJlZCBwcm92aWRlciBmb3IgTW9ja01hdGNoTWVkaWFcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgTW9ja01hdGNoTWVkaWFQcm92aWRlcjoge1xuICAgIHByb3ZpZGU6IHR5cGVvZiBNYXRjaE1lZGlhO1xuICAgIHVzZUNsYXNzOiB0eXBlb2YgTW9ja01hdGNoTWVkaWE7XG59O1xuZGVjbGFyZSB0eXBlIE1lZGlhUXVlcnlMaXN0TGlzdGVuZXIgPSAoKHRoaXM6IE1lZGlhUXVlcnlMaXN0LCBldjogTWVkaWFRdWVyeUxpc3RFdmVudCkgPT4gYW55KSB8IG51bGw7XG5leHBvcnQge307XG4iXX0=