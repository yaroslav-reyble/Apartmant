import { BreakPoint } from './break-point';
import * as ɵngcc0 from '@angular/core';
export declare type OptionalBreakPoint = BreakPoint | null;
/**
 * Registry of 1..n MediaQuery breakpoint ranges
 * This is published as a provider and may be overridden from custom, application-specific ranges
 *
 */
export declare class BreakPointRegistry {
    readonly items: BreakPoint[];
    constructor(list: BreakPoint[]);
    /**
     * Search breakpoints by alias (e.g. gt-xs)
     */
    findByAlias(alias: string): OptionalBreakPoint;
    findByQuery(query: string): OptionalBreakPoint;
    /**
     * Get all the breakpoints whose ranges could overlapping `normal` ranges;
     * e.g. gt-sm overlaps md, lg, and xl
     */
    get overlappings(): BreakPoint[];
    /**
     * Get list of all registered (non-empty) breakpoint aliases
     */
    get aliases(): string[];
    /**
     * Aliases are mapped to properties using suffixes
     * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'
     * for property layoutGtSM.
     */
    get suffixes(): string[];
    /**
     * Memoized lookup using custom predicate function
     */
    private findWithPredicate;
    /**
     * Memoized BreakPoint Lookups
     */
    private readonly findByMap;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BreakPointRegistry>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWstcG9pbnQtcmVnaXN0cnkuZC50cyIsInNvdXJjZXMiOlsiYnJlYWstcG9pbnQtcmVnaXN0cnkuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcmVha1BvaW50IH0gZnJvbSAnLi9icmVhay1wb2ludCc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIE9wdGlvbmFsQnJlYWtQb2ludCA9IEJyZWFrUG9pbnQgfCBudWxsO1xuLyoqXG4gKiBSZWdpc3RyeSBvZiAxLi5uIE1lZGlhUXVlcnkgYnJlYWtwb2ludCByYW5nZXNcbiAqIFRoaXMgaXMgcHVibGlzaGVkIGFzIGEgcHJvdmlkZXIgYW5kIG1heSBiZSBvdmVycmlkZGVuIGZyb20gY3VzdG9tLCBhcHBsaWNhdGlvbi1zcGVjaWZpYyByYW5nZXNcbiAqXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEJyZWFrUG9pbnRSZWdpc3RyeSB7XG4gICAgcmVhZG9ubHkgaXRlbXM6IEJyZWFrUG9pbnRbXTtcbiAgICBjb25zdHJ1Y3RvcihsaXN0OiBCcmVha1BvaW50W10pO1xuICAgIC8qKlxuICAgICAqIFNlYXJjaCBicmVha3BvaW50cyBieSBhbGlhcyAoZS5nLiBndC14cylcbiAgICAgKi9cbiAgICBmaW5kQnlBbGlhcyhhbGlhczogc3RyaW5nKTogT3B0aW9uYWxCcmVha1BvaW50O1xuICAgIGZpbmRCeVF1ZXJ5KHF1ZXJ5OiBzdHJpbmcpOiBPcHRpb25hbEJyZWFrUG9pbnQ7XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCB0aGUgYnJlYWtwb2ludHMgd2hvc2UgcmFuZ2VzIGNvdWxkIG92ZXJsYXBwaW5nIGBub3JtYWxgIHJhbmdlcztcbiAgICAgKiBlLmcuIGd0LXNtIG92ZXJsYXBzIG1kLCBsZywgYW5kIHhsXG4gICAgICovXG4gICAgZ2V0IG92ZXJsYXBwaW5ncygpOiBCcmVha1BvaW50W107XG4gICAgLyoqXG4gICAgICogR2V0IGxpc3Qgb2YgYWxsIHJlZ2lzdGVyZWQgKG5vbi1lbXB0eSkgYnJlYWtwb2ludCBhbGlhc2VzXG4gICAgICovXG4gICAgZ2V0IGFsaWFzZXMoKTogc3RyaW5nW107XG4gICAgLyoqXG4gICAgICogQWxpYXNlcyBhcmUgbWFwcGVkIHRvIHByb3BlcnRpZXMgdXNpbmcgc3VmZml4ZXNcbiAgICAgKiBlLmcuICAnZ3Qtc20nIGZvciBwcm9wZXJ0eSAnbGF5b3V0JyAgdXNlcyBzdWZmaXggJ0d0U20nXG4gICAgICogZm9yIHByb3BlcnR5IGxheW91dEd0U00uXG4gICAgICovXG4gICAgZ2V0IHN1ZmZpeGVzKCk6IHN0cmluZ1tdO1xuICAgIC8qKlxuICAgICAqIE1lbW9pemVkIGxvb2t1cCB1c2luZyBjdXN0b20gcHJlZGljYXRlIGZ1bmN0aW9uXG4gICAgICovXG4gICAgcHJpdmF0ZSBmaW5kV2l0aFByZWRpY2F0ZTtcbiAgICAvKipcbiAgICAgKiBNZW1vaXplZCBCcmVha1BvaW50IExvb2t1cHNcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IGZpbmRCeU1hcDtcbn1cbiJdfQ==