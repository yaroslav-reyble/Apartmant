import { NgZone } from '@angular/core';
import { BreakPoint, ɵMatchMedia as MatchMedia, LayoutConfigOptions } from '@angular/flex-layout/core';
/**
 * Special server-only class to simulate a MediaQueryList and
 * - supports manual activation to simulate mediaQuery matching
 * - manages listeners
 */
import * as ɵngcc0 from '@angular/core';
export declare class ServerMediaQueryList implements MediaQueryList {
    private _mediaQuery;
    private _isActive;
    private _listeners;
    get matches(): boolean;
    get media(): string;
    constructor(_mediaQuery: string, _isActive?: boolean);
    /**
     * Destroy the current list by deactivating the
     * listeners and clearing the internal list
     */
    destroy(): void;
    /** Notify all listeners that 'matches === TRUE' */
    activate(): ServerMediaQueryList;
    /** Notify all listeners that 'matches === false' */
    deactivate(): ServerMediaQueryList;
    /** Add a listener to our internal list to activate later */
    addListener(listener: MediaQueryListListener): void;
    /** Don't need to remove listeners in the server environment */
    removeListener(_: MediaQueryListListener | null): void;
    addEventListener<K extends keyof MediaQueryListEventMap>(_: K, __: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, ___?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MediaQueryListEventMap>(_: K, __: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, ___?: boolean | EventListenerOptions): void;
    dispatchEvent(_: Event): boolean;
    onchange: MediaQueryListListener;
}
/**
 * Special server-only implementation of MatchMedia that uses the above
 * ServerMediaQueryList as its internal representation
 *
 * Also contains methods to activate and deactivate breakpoints
 */
export declare class ServerMatchMedia extends MatchMedia {
    protected _zone: NgZone;
    protected _platformId: Object;
    protected _document: any;
    protected breakpoints: BreakPoint[];
    protected layoutConfig: LayoutConfigOptions;
    private _activeBreakpoints;
    constructor(_zone: NgZone, _platformId: Object, _document: any, breakpoints: BreakPoint[], layoutConfig: LayoutConfigOptions);
    /** Activate the specified breakpoint if we're on the server, no-op otherwise */
    activateBreakpoint(bp: BreakPoint): void;
    /** Deactivate the specified breakpoint if we're on the server, no-op otherwise */
    deactivateBreakpoint(bp: BreakPoint): void;
    /**
     * Call window.matchMedia() to build a MediaQueryList; which
     * supports 0..n listeners for activation/deactivation
     */
    protected buildMQL(query: string): ServerMediaQueryList;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ServerMatchMedia>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ServerMatchMedia>;
}
declare type MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLW1hdGNoLW1lZGlhLmQudHMiLCJzb3VyY2VzIjpbInNlcnZlci1tYXRjaC1tZWRpYS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdEQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnJlYWtQb2ludCwgybVNYXRjaE1lZGlhIGFzIE1hdGNoTWVkaWEsIExheW91dENvbmZpZ09wdGlvbnMgfSBmcm9tICdAYW5ndWxhci9mbGV4LWxheW91dC9jb3JlJztcbi8qKlxuICogU3BlY2lhbCBzZXJ2ZXItb25seSBjbGFzcyB0byBzaW11bGF0ZSBhIE1lZGlhUXVlcnlMaXN0IGFuZFxuICogLSBzdXBwb3J0cyBtYW51YWwgYWN0aXZhdGlvbiB0byBzaW11bGF0ZSBtZWRpYVF1ZXJ5IG1hdGNoaW5nXG4gKiAtIG1hbmFnZXMgbGlzdGVuZXJzXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNlcnZlck1lZGlhUXVlcnlMaXN0IGltcGxlbWVudHMgTWVkaWFRdWVyeUxpc3Qge1xuICAgIHByaXZhdGUgX21lZGlhUXVlcnk7XG4gICAgcHJpdmF0ZSBfaXNBY3RpdmU7XG4gICAgcHJpdmF0ZSBfbGlzdGVuZXJzO1xuICAgIGdldCBtYXRjaGVzKCk6IGJvb2xlYW47XG4gICAgZ2V0IG1lZGlhKCk6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihfbWVkaWFRdWVyeTogc3RyaW5nLCBfaXNBY3RpdmU/OiBib29sZWFuKTtcbiAgICAvKipcbiAgICAgKiBEZXN0cm95IHRoZSBjdXJyZW50IGxpc3QgYnkgZGVhY3RpdmF0aW5nIHRoZVxuICAgICAqIGxpc3RlbmVycyBhbmQgY2xlYXJpbmcgdGhlIGludGVybmFsIGxpc3RcbiAgICAgKi9cbiAgICBkZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqIE5vdGlmeSBhbGwgbGlzdGVuZXJzIHRoYXQgJ21hdGNoZXMgPT09IFRSVUUnICovXG4gICAgYWN0aXZhdGUoKTogU2VydmVyTWVkaWFRdWVyeUxpc3Q7XG4gICAgLyoqIE5vdGlmeSBhbGwgbGlzdGVuZXJzIHRoYXQgJ21hdGNoZXMgPT09IGZhbHNlJyAqL1xuICAgIGRlYWN0aXZhdGUoKTogU2VydmVyTWVkaWFRdWVyeUxpc3Q7XG4gICAgLyoqIEFkZCBhIGxpc3RlbmVyIHRvIG91ciBpbnRlcm5hbCBsaXN0IHRvIGFjdGl2YXRlIGxhdGVyICovXG4gICAgYWRkTGlzdGVuZXIobGlzdGVuZXI6IE1lZGlhUXVlcnlMaXN0TGlzdGVuZXIpOiB2b2lkO1xuICAgIC8qKiBEb24ndCBuZWVkIHRvIHJlbW92ZSBsaXN0ZW5lcnMgaW4gdGhlIHNlcnZlciBlbnZpcm9ubWVudCAqL1xuICAgIHJlbW92ZUxpc3RlbmVyKF86IE1lZGlhUXVlcnlMaXN0TGlzdGVuZXIgfCBudWxsKTogdm9pZDtcbiAgICBhZGRFdmVudExpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiBNZWRpYVF1ZXJ5TGlzdEV2ZW50TWFwPihfOiBLLCBfXzogKHRoaXM6IE1lZGlhUXVlcnlMaXN0LCBldjogTWVkaWFRdWVyeUxpc3RFdmVudE1hcFtLXSkgPT4gYW55LCBfX18/OiBib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMpOiB2b2lkO1xuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI8SyBleHRlbmRzIGtleW9mIE1lZGlhUXVlcnlMaXN0RXZlbnRNYXA+KF86IEssIF9fOiAodGhpczogTWVkaWFRdWVyeUxpc3QsIGV2OiBNZWRpYVF1ZXJ5TGlzdEV2ZW50TWFwW0tdKSA9PiBhbnksIF9fXz86IGJvb2xlYW4gfCBFdmVudExpc3RlbmVyT3B0aW9ucyk6IHZvaWQ7XG4gICAgZGlzcGF0Y2hFdmVudChfOiBFdmVudCk6IGJvb2xlYW47XG4gICAgb25jaGFuZ2U6IE1lZGlhUXVlcnlMaXN0TGlzdGVuZXI7XG59XG4vKipcbiAqIFNwZWNpYWwgc2VydmVyLW9ubHkgaW1wbGVtZW50YXRpb24gb2YgTWF0Y2hNZWRpYSB0aGF0IHVzZXMgdGhlIGFib3ZlXG4gKiBTZXJ2ZXJNZWRpYVF1ZXJ5TGlzdCBhcyBpdHMgaW50ZXJuYWwgcmVwcmVzZW50YXRpb25cbiAqXG4gKiBBbHNvIGNvbnRhaW5zIG1ldGhvZHMgdG8gYWN0aXZhdGUgYW5kIGRlYWN0aXZhdGUgYnJlYWtwb2ludHNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2VydmVyTWF0Y2hNZWRpYSBleHRlbmRzIE1hdGNoTWVkaWEge1xuICAgIHByb3RlY3RlZCBfem9uZTogTmdab25lO1xuICAgIHByb3RlY3RlZCBfcGxhdGZvcm1JZDogT2JqZWN0O1xuICAgIHByb3RlY3RlZCBfZG9jdW1lbnQ6IGFueTtcbiAgICBwcm90ZWN0ZWQgYnJlYWtwb2ludHM6IEJyZWFrUG9pbnRbXTtcbiAgICBwcm90ZWN0ZWQgbGF5b3V0Q29uZmlnOiBMYXlvdXRDb25maWdPcHRpb25zO1xuICAgIHByaXZhdGUgX2FjdGl2ZUJyZWFrcG9pbnRzO1xuICAgIGNvbnN0cnVjdG9yKF96b25lOiBOZ1pvbmUsIF9wbGF0Zm9ybUlkOiBPYmplY3QsIF9kb2N1bWVudDogYW55LCBicmVha3BvaW50czogQnJlYWtQb2ludFtdLCBsYXlvdXRDb25maWc6IExheW91dENvbmZpZ09wdGlvbnMpO1xuICAgIC8qKiBBY3RpdmF0ZSB0aGUgc3BlY2lmaWVkIGJyZWFrcG9pbnQgaWYgd2UncmUgb24gdGhlIHNlcnZlciwgbm8tb3Agb3RoZXJ3aXNlICovXG4gICAgYWN0aXZhdGVCcmVha3BvaW50KGJwOiBCcmVha1BvaW50KTogdm9pZDtcbiAgICAvKiogRGVhY3RpdmF0ZSB0aGUgc3BlY2lmaWVkIGJyZWFrcG9pbnQgaWYgd2UncmUgb24gdGhlIHNlcnZlciwgbm8tb3Agb3RoZXJ3aXNlICovXG4gICAgZGVhY3RpdmF0ZUJyZWFrcG9pbnQoYnA6IEJyZWFrUG9pbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENhbGwgd2luZG93Lm1hdGNoTWVkaWEoKSB0byBidWlsZCBhIE1lZGlhUXVlcnlMaXN0OyB3aGljaFxuICAgICAqIHN1cHBvcnRzIDAuLm4gbGlzdGVuZXJzIGZvciBhY3RpdmF0aW9uL2RlYWN0aXZhdGlvblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBidWlsZE1RTChxdWVyeTogc3RyaW5nKTogU2VydmVyTWVkaWFRdWVyeUxpc3Q7XG59XG5kZWNsYXJlIHR5cGUgTWVkaWFRdWVyeUxpc3RMaXN0ZW5lciA9ICgodGhpczogTWVkaWFRdWVyeUxpc3QsIGV2OiBNZWRpYVF1ZXJ5TGlzdEV2ZW50KSA9PiBhbnkpIHwgbnVsbDtcbmV4cG9ydCB7fTtcbiJdfQ==