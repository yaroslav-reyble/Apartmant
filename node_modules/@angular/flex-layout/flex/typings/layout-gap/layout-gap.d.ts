/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnDestroy, NgZone, AfterContentInit } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { BaseDirective2, StyleBuilder, StyleDefinition, StyleUtils, MediaMarshaller, ElementMatcher } from '@angular/flex-layout/core';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export interface LayoutGapParent {
    directionality: string;
    items: HTMLElement[];
    layout: string;
}
export declare class LayoutGapStyleBuilder extends StyleBuilder {
    private _styler;
    constructor(_styler: StyleUtils);
    buildStyles(gapValue: string, parent: LayoutGapParent): StyleDefinition;
    sideEffect(gapValue: string, _styles: StyleDefinition, parent: LayoutGapParent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LayoutGapStyleBuilder>;
}
/**
 * 'layout-padding' styling directive
 *  Defines padding of child elements in a layout container
 */
export declare class LayoutGapDirective extends BaseDirective2 implements AfterContentInit, OnDestroy {
    protected zone: NgZone;
    protected directionality: Directionality;
    protected styleUtils: StyleUtils;
    protected layout: string;
    protected DIRECTIVE_KEY: string;
    protected observerSubject: Subject<void>;
    /** Special accessor to query for all child 'element' nodes regardless of type, class, etc */
    protected get childrenNodes(): HTMLElement[];
    constructor(elRef: ElementRef, zone: NgZone, directionality: Directionality, styleUtils: StyleUtils, styleBuilder: LayoutGapStyleBuilder, marshal: MediaMarshaller);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /**
     * Cache the parent container 'flex-direction' and update the 'margin' styles
     */
    protected onLayoutChange(matcher: ElementMatcher): void;
    /**
     *
     */
    protected updateWithValue(value: string): void;
    /** We need to override clearStyles because in most cases mru isn't populated */
    protected clearStyles(): void;
    /** Determine if an element will show or hide based on current activation */
    protected willDisplay(source: HTMLElement): boolean;
    protected buildChildObservable(): void;
    protected observer?: MutationObserver;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LayoutGapDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LayoutGapDirective, never, never, {}, {}, never>;
}
export declare class DefaultLayoutGapDirective extends LayoutGapDirective {
    protected inputs: string[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DefaultLayoutGapDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DefaultLayoutGapDirective, "  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]", never, {
    "fxLayoutGap": "fxLayoutGap";
    "fxLayoutGap.xs": "fxLayoutGap.xs";
    "fxLayoutGap.sm": "fxLayoutGap.sm";
    "fxLayoutGap.md": "fxLayoutGap.md";
    "fxLayoutGap.lg": "fxLayoutGap.lg";
    "fxLayoutGap.xl": "fxLayoutGap.xl";
    "fxLayoutGap.lt-sm": "fxLayoutGap.lt-sm";
    "fxLayoutGap.lt-md": "fxLayoutGap.lt-md";
    "fxLayoutGap.lt-lg": "fxLayoutGap.lt-lg";
    "fxLayoutGap.lt-xl": "fxLayoutGap.lt-xl";
    "fxLayoutGap.gt-xs": "fxLayoutGap.gt-xs";
    "fxLayoutGap.gt-sm": "fxLayoutGap.gt-sm";
    "fxLayoutGap.gt-md": "fxLayoutGap.gt-md";
    "fxLayoutGap.gt-lg": "fxLayoutGap.gt-lg";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LWdhcC5kLnRzIiwic291cmNlcyI6WyJsYXlvdXQtZ2FwLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztBQVdBOzs7Ozs7Ozs7OztBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgTmdab25lLCBBZnRlckNvbnRlbnRJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEaXJlY3Rpb25hbGl0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9iaWRpJztcbmltcG9ydCB7IEJhc2VEaXJlY3RpdmUyLCBTdHlsZUJ1aWxkZXIsIFN0eWxlRGVmaW5pdGlvbiwgU3R5bGVVdGlscywgTWVkaWFNYXJzaGFsbGVyLCBFbGVtZW50TWF0Y2hlciB9IGZyb20gJ0Bhbmd1bGFyL2ZsZXgtbGF5b3V0L2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuZXhwb3J0IGludGVyZmFjZSBMYXlvdXRHYXBQYXJlbnQge1xuICAgIGRpcmVjdGlvbmFsaXR5OiBzdHJpbmc7XG4gICAgaXRlbXM6IEhUTUxFbGVtZW50W107XG4gICAgbGF5b3V0OiBzdHJpbmc7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMYXlvdXRHYXBTdHlsZUJ1aWxkZXIgZXh0ZW5kcyBTdHlsZUJ1aWxkZXIge1xuICAgIHByaXZhdGUgX3N0eWxlcjtcbiAgICBjb25zdHJ1Y3Rvcihfc3R5bGVyOiBTdHlsZVV0aWxzKTtcbiAgICBidWlsZFN0eWxlcyhnYXBWYWx1ZTogc3RyaW5nLCBwYXJlbnQ6IExheW91dEdhcFBhcmVudCk6IFN0eWxlRGVmaW5pdGlvbjtcbiAgICBzaWRlRWZmZWN0KGdhcFZhbHVlOiBzdHJpbmcsIF9zdHlsZXM6IFN0eWxlRGVmaW5pdGlvbiwgcGFyZW50OiBMYXlvdXRHYXBQYXJlbnQpOiB2b2lkO1xufVxuLyoqXG4gKiAnbGF5b3V0LXBhZGRpbmcnIHN0eWxpbmcgZGlyZWN0aXZlXG4gKiAgRGVmaW5lcyBwYWRkaW5nIG9mIGNoaWxkIGVsZW1lbnRzIGluIGEgbGF5b3V0IGNvbnRhaW5lclxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMYXlvdXRHYXBEaXJlY3RpdmUgZXh0ZW5kcyBCYXNlRGlyZWN0aXZlMiBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZTtcbiAgICBwcm90ZWN0ZWQgZGlyZWN0aW9uYWxpdHk6IERpcmVjdGlvbmFsaXR5O1xuICAgIHByb3RlY3RlZCBzdHlsZVV0aWxzOiBTdHlsZVV0aWxzO1xuICAgIHByb3RlY3RlZCBsYXlvdXQ6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgRElSRUNUSVZFX0tFWTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBvYnNlcnZlclN1YmplY3Q6IFN1YmplY3Q8dm9pZD47XG4gICAgLyoqIFNwZWNpYWwgYWNjZXNzb3IgdG8gcXVlcnkgZm9yIGFsbCBjaGlsZCAnZWxlbWVudCcgbm9kZXMgcmVnYXJkbGVzcyBvZiB0eXBlLCBjbGFzcywgZXRjICovXG4gICAgcHJvdGVjdGVkIGdldCBjaGlsZHJlbk5vZGVzKCk6IEhUTUxFbGVtZW50W107XG4gICAgY29uc3RydWN0b3IoZWxSZWY6IEVsZW1lbnRSZWYsIHpvbmU6IE5nWm9uZSwgZGlyZWN0aW9uYWxpdHk6IERpcmVjdGlvbmFsaXR5LCBzdHlsZVV0aWxzOiBTdHlsZVV0aWxzLCBzdHlsZUJ1aWxkZXI6IExheW91dEdhcFN0eWxlQnVpbGRlciwgbWFyc2hhbDogTWVkaWFNYXJzaGFsbGVyKTtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENhY2hlIHRoZSBwYXJlbnQgY29udGFpbmVyICdmbGV4LWRpcmVjdGlvbicgYW5kIHVwZGF0ZSB0aGUgJ21hcmdpbicgc3R5bGVzXG4gICAgICovXG4gICAgcHJvdGVjdGVkIG9uTGF5b3V0Q2hhbmdlKG1hdGNoZXI6IEVsZW1lbnRNYXRjaGVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHByb3RlY3RlZCB1cGRhdGVXaXRoVmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqIFdlIG5lZWQgdG8gb3ZlcnJpZGUgY2xlYXJTdHlsZXMgYmVjYXVzZSBpbiBtb3N0IGNhc2VzIG1ydSBpc24ndCBwb3B1bGF0ZWQgKi9cbiAgICBwcm90ZWN0ZWQgY2xlYXJTdHlsZXMoKTogdm9pZDtcbiAgICAvKiogRGV0ZXJtaW5lIGlmIGFuIGVsZW1lbnQgd2lsbCBzaG93IG9yIGhpZGUgYmFzZWQgb24gY3VycmVudCBhY3RpdmF0aW9uICovXG4gICAgcHJvdGVjdGVkIHdpbGxEaXNwbGF5KHNvdXJjZTogSFRNTEVsZW1lbnQpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBidWlsZENoaWxkT2JzZXJ2YWJsZSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBvYnNlcnZlcj86IE11dGF0aW9uT2JzZXJ2ZXI7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEZWZhdWx0TGF5b3V0R2FwRGlyZWN0aXZlIGV4dGVuZHMgTGF5b3V0R2FwRGlyZWN0aXZlIHtcbiAgICBwcm90ZWN0ZWQgaW5wdXRzOiBzdHJpbmdbXTtcbn1cbiJdfQ==