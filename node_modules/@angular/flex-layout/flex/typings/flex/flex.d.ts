/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnInit } from '@angular/core';
import { BaseDirective2, LayoutConfigOptions, StyleUtils, StyleBuilder, StyleDefinition, MediaMarshaller, ElementMatcher } from '@angular/flex-layout/core';
import * as ɵngcc0 from '@angular/core';
interface FlexBuilderParent {
    direction: string;
    hasWrap: boolean;
}
export declare class FlexStyleBuilder extends StyleBuilder {
    protected layoutConfig: LayoutConfigOptions;
    constructor(layoutConfig: LayoutConfigOptions);
    buildStyles(input: string, parent: FlexBuilderParent): StyleDefinition;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FlexStyleBuilder>;
}
/**
 * Directive to control the size of a flex item using flex-basis, flex-grow, and flex-shrink.
 * Corresponds to the css `flex` shorthand property.
 *
 * @see https://css-tricks.com/snippets/css/a-guide-to-flexbox/
 */
export declare class FlexDirective extends BaseDirective2 implements OnInit {
    protected layoutConfig: LayoutConfigOptions;
    protected marshal: MediaMarshaller;
    protected DIRECTIVE_KEY: string;
    protected direction?: string;
    protected wrap?: boolean;
    get shrink(): string;
    set shrink(value: string);
    get grow(): string;
    set grow(value: string);
    protected flexGrow: string;
    protected flexShrink: string;
    constructor(elRef: ElementRef, styleUtils: StyleUtils, layoutConfig: LayoutConfigOptions, styleBuilder: FlexStyleBuilder, marshal: MediaMarshaller);
    ngOnInit(): void;
    /**
     * Caches the parent container's 'flex-direction' and updates the element's style.
     * Used as a handler for layout change events from the parent flex container.
     */
    protected onLayoutChange(matcher: ElementMatcher): void;
    /** Input to this is exclusively the basis input value */
    protected updateWithValue(value: string): void;
    /** Trigger a style reflow, usually based on a shrink/grow input event */
    protected triggerReflow(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FlexDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<FlexDirective, never, never, {
    "shrink": "fxShrink";
    "grow": "fxGrow";
}, {}, never>;
}
export declare class DefaultFlexDirective extends FlexDirective {
    protected inputs: string[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DefaultFlexDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DefaultFlexDirective, "  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]", never, {
    "fxFlex": "fxFlex";
    "fxFlex.xs": "fxFlex.xs";
    "fxFlex.sm": "fxFlex.sm";
    "fxFlex.md": "fxFlex.md";
    "fxFlex.lg": "fxFlex.lg";
    "fxFlex.xl": "fxFlex.xl";
    "fxFlex.lt-sm": "fxFlex.lt-sm";
    "fxFlex.lt-md": "fxFlex.lt-md";
    "fxFlex.lt-lg": "fxFlex.lt-lg";
    "fxFlex.lt-xl": "fxFlex.lt-xl";
    "fxFlex.gt-xs": "fxFlex.gt-xs";
    "fxFlex.gt-sm": "fxFlex.gt-sm";
    "fxFlex.gt-md": "fxFlex.gt-md";
    "fxFlex.gt-lg": "fxFlex.gt-lg";
}, {}, never>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleC5kLnRzIiwic291cmNlcyI6WyJmbGV4LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFTQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VEaXJlY3RpdmUyLCBMYXlvdXRDb25maWdPcHRpb25zLCBTdHlsZVV0aWxzLCBTdHlsZUJ1aWxkZXIsIFN0eWxlRGVmaW5pdGlvbiwgTWVkaWFNYXJzaGFsbGVyLCBFbGVtZW50TWF0Y2hlciB9IGZyb20gJ0Bhbmd1bGFyL2ZsZXgtbGF5b3V0L2NvcmUnO1xuaW50ZXJmYWNlIEZsZXhCdWlsZGVyUGFyZW50IHtcbiAgICBkaXJlY3Rpb246IHN0cmluZztcbiAgICBoYXNXcmFwOiBib29sZWFuO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmxleFN0eWxlQnVpbGRlciBleHRlbmRzIFN0eWxlQnVpbGRlciB7XG4gICAgcHJvdGVjdGVkIGxheW91dENvbmZpZzogTGF5b3V0Q29uZmlnT3B0aW9ucztcbiAgICBjb25zdHJ1Y3RvcihsYXlvdXRDb25maWc6IExheW91dENvbmZpZ09wdGlvbnMpO1xuICAgIGJ1aWxkU3R5bGVzKGlucHV0OiBzdHJpbmcsIHBhcmVudDogRmxleEJ1aWxkZXJQYXJlbnQpOiBTdHlsZURlZmluaXRpb247XG59XG4vKipcbiAqIERpcmVjdGl2ZSB0byBjb250cm9sIHRoZSBzaXplIG9mIGEgZmxleCBpdGVtIHVzaW5nIGZsZXgtYmFzaXMsIGZsZXgtZ3JvdywgYW5kIGZsZXgtc2hyaW5rLlxuICogQ29ycmVzcG9uZHMgdG8gdGhlIGNzcyBgZmxleGAgc2hvcnRoYW5kIHByb3BlcnR5LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3MvYS1ndWlkZS10by1mbGV4Ym94L1xuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGbGV4RGlyZWN0aXZlIGV4dGVuZHMgQmFzZURpcmVjdGl2ZTIgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByb3RlY3RlZCBsYXlvdXRDb25maWc6IExheW91dENvbmZpZ09wdGlvbnM7XG4gICAgcHJvdGVjdGVkIG1hcnNoYWw6IE1lZGlhTWFyc2hhbGxlcjtcbiAgICBwcm90ZWN0ZWQgRElSRUNUSVZFX0tFWTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBkaXJlY3Rpb24/OiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHdyYXA/OiBib29sZWFuO1xuICAgIGdldCBzaHJpbmsoKTogc3RyaW5nO1xuICAgIHNldCBzaHJpbmsodmFsdWU6IHN0cmluZyk7XG4gICAgZ2V0IGdyb3coKTogc3RyaW5nO1xuICAgIHNldCBncm93KHZhbHVlOiBzdHJpbmcpO1xuICAgIHByb3RlY3RlZCBmbGV4R3Jvdzogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBmbGV4U2hyaW5rOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoZWxSZWY6IEVsZW1lbnRSZWYsIHN0eWxlVXRpbHM6IFN0eWxlVXRpbHMsIGxheW91dENvbmZpZzogTGF5b3V0Q29uZmlnT3B0aW9ucywgc3R5bGVCdWlsZGVyOiBGbGV4U3R5bGVCdWlsZGVyLCBtYXJzaGFsOiBNZWRpYU1hcnNoYWxsZXIpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2FjaGVzIHRoZSBwYXJlbnQgY29udGFpbmVyJ3MgJ2ZsZXgtZGlyZWN0aW9uJyBhbmQgdXBkYXRlcyB0aGUgZWxlbWVudCdzIHN0eWxlLlxuICAgICAqIFVzZWQgYXMgYSBoYW5kbGVyIGZvciBsYXlvdXQgY2hhbmdlIGV2ZW50cyBmcm9tIHRoZSBwYXJlbnQgZmxleCBjb250YWluZXIuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIG9uTGF5b3V0Q2hhbmdlKG1hdGNoZXI6IEVsZW1lbnRNYXRjaGVyKTogdm9pZDtcbiAgICAvKiogSW5wdXQgdG8gdGhpcyBpcyBleGNsdXNpdmVseSB0aGUgYmFzaXMgaW5wdXQgdmFsdWUgKi9cbiAgICBwcm90ZWN0ZWQgdXBkYXRlV2l0aFZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKiBUcmlnZ2VyIGEgc3R5bGUgcmVmbG93LCB1c3VhbGx5IGJhc2VkIG9uIGEgc2hyaW5rL2dyb3cgaW5wdXQgZXZlbnQgKi9cbiAgICBwcm90ZWN0ZWQgdHJpZ2dlclJlZmxvdygpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGVmYXVsdEZsZXhEaXJlY3RpdmUgZXh0ZW5kcyBGbGV4RGlyZWN0aXZlIHtcbiAgICBwcm90ZWN0ZWQgaW5wdXRzOiBzdHJpbmdbXTtcbn1cbmV4cG9ydCB7fTtcbiJdfQ==