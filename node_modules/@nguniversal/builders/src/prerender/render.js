/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/builders/src/prerender/render", ["require", "exports", "fs", "path"], factory);
    }
})(function (require, exports) {
    "use strict";
    var __syncRequire = typeof module === "object" && typeof module.exports === "object";
    Object.defineProperty(exports, "__esModule", { value: true });
    const fs = require("fs");
    const path = require("path");
    const [indexHtml, serverBundlePath, browserOutputPath, ...routes] = process.argv.slice(2);
    /**
     * Handles importing the server bundle.
     */
    function getServerBundle(bundlePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const { AppServerModule, AppServerModuleNgFactory, renderModule, renderModuleFactory, } = yield __syncRequire ? Promise.resolve().then(() => require(bundlePath)) : new Promise((resolve_1, reject_1) => { require([bundlePath], resolve_1, reject_1); });
            if (renderModuleFactory && AppServerModuleNgFactory) {
                // Happens when in ViewEngine mode.
                return {
                    renderModuleFn: renderModuleFactory,
                    AppServerModuleDef: AppServerModuleNgFactory,
                };
            }
            if (renderModule && AppServerModule) {
                // Happens when in Ivy mode.
                return {
                    renderModuleFn: renderModule,
                    AppServerModuleDef: AppServerModule,
                };
            }
            throw new Error(`renderModule method and/or AppServerModule were not exported from: ${serverBundlePath}.`);
        });
    }
    /**
     * Renders each route in routes and writes them to <outputPath>/<route>/index.html.
     */
    (() => __awaiter(void 0, void 0, void 0, function* () {
        const { renderModuleFn, AppServerModuleDef } = yield getServerBundle(serverBundlePath);
        const browserIndexOutputPath = path.join(browserOutputPath, 'index.html');
        for (const route of routes) {
            const renderOpts = {
                document: indexHtml + '<!-- This page was prerendered with Angular Universal -->',
                url: route,
            };
            const html = yield renderModuleFn(AppServerModuleDef, renderOpts);
            const outputFolderPath = path.join(browserOutputPath, route);
            const outputIndexPath = path.join(outputFolderPath, 'index.html');
            // This case happens when we are prerendering "/".
            if (browserIndexOutputPath === outputIndexPath) {
                const browserIndexOutputPathOriginal = path.join(browserOutputPath, 'index.original.html');
                fs.writeFileSync(browserIndexOutputPathOriginal, indexHtml);
            }
            try {
                fs.mkdirSync(outputFolderPath, { recursive: true });
                fs.writeFileSync(outputIndexPath, html);
                const bytes = Buffer.byteLength(html).toFixed(0);
                if (process.send) {
                    process.send({ success: true, outputIndexPath, bytes });
                }
            }
            catch (e) {
                if (process.send) {
                    process.send({ success: false, error: e.message, outputIndexPath });
                }
            }
        }
    }))().then().catch();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9idWlsZGVycy9zcmMvcHJlcmVuZGVyL3JlbmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFSCx5QkFBeUI7SUFDekIsNkJBQTZCO0lBRTdCLE1BQU0sQ0FDSixTQUFTLEVBQ1QsZ0JBQWdCLEVBQ2hCLGlCQUFpQixFQUNqQixHQUFHLE1BQU0sQ0FDVixHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFCOztPQUVHO0lBQ0gsU0FBZSxlQUFlLENBQUMsVUFBa0I7O1lBQy9DLE1BQU0sRUFDSixlQUFlLEVBQ2Ysd0JBQXdCLEVBQ3hCLFlBQVksRUFDWixtQkFBbUIsR0FDcEIsR0FBRywyREFBYSxVQUFVLHFEQUFWLFVBQVUsMkJBQUMsQ0FBQztZQUU3QixJQUFJLG1CQUFtQixJQUFJLHdCQUF3QixFQUFFO2dCQUNuRCxtQ0FBbUM7Z0JBQ25DLE9BQU87b0JBQ0wsY0FBYyxFQUFFLG1CQUFtQjtvQkFDbkMsa0JBQWtCLEVBQUUsd0JBQXdCO2lCQUM3QyxDQUFDO2FBQ0g7WUFFRCxJQUFJLFlBQVksSUFBSSxlQUFlLEVBQUU7Z0JBQ25DLDRCQUE0QjtnQkFDNUIsT0FBTztvQkFDTCxjQUFjLEVBQUUsWUFBWTtvQkFDNUIsa0JBQWtCLEVBQUUsZUFBZTtpQkFDcEMsQ0FBQzthQUNIO1lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxzRUFBc0UsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1FBQzdHLENBQUM7S0FBQTtJQUVEOztPQUVHO0lBQ0gsQ0FBQyxHQUFTLEVBQUU7UUFDVixNQUFNLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLEdBQUcsTUFBTSxlQUFlLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN2RixNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDMUUsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLEVBQUU7WUFDMUIsTUFBTSxVQUFVLEdBQUc7Z0JBQ2pCLFFBQVEsRUFBRSxTQUFTLEdBQUcsMkRBQTJEO2dCQUNqRixHQUFHLEVBQUUsS0FBSzthQUNYLENBQUM7WUFDRixNQUFNLElBQUksR0FBRyxNQUFNLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUVsRSxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDN0QsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUVsRSxrREFBa0Q7WUFDbEQsSUFBSSxzQkFBc0IsS0FBSyxlQUFlLEVBQUU7Z0JBQzlDLE1BQU0sOEJBQThCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO2dCQUMzRixFQUFFLENBQUMsYUFBYSxDQUFDLDhCQUE4QixFQUFFLFNBQVMsQ0FBQyxDQUFDO2FBQzdEO1lBRUQsSUFBSTtnQkFDRixFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQ3BELEVBQUUsQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUN4QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakQsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO29CQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztpQkFDekQ7YUFDRjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtvQkFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztpQkFDckU7YUFDRjtTQUNGO0lBQ0gsQ0FBQyxDQUFBLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmNvbnN0IFtcbiAgaW5kZXhIdG1sLFxuICBzZXJ2ZXJCdW5kbGVQYXRoLFxuICBicm93c2VyT3V0cHV0UGF0aCxcbiAgLi4ucm91dGVzXG5dID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuXG4vKipcbiAqIEhhbmRsZXMgaW1wb3J0aW5nIHRoZSBzZXJ2ZXIgYnVuZGxlLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRTZXJ2ZXJCdW5kbGUoYnVuZGxlUGF0aDogc3RyaW5nKSB7XG4gIGNvbnN0IHtcbiAgICBBcHBTZXJ2ZXJNb2R1bGUsXG4gICAgQXBwU2VydmVyTW9kdWxlTmdGYWN0b3J5LFxuICAgIHJlbmRlck1vZHVsZSxcbiAgICByZW5kZXJNb2R1bGVGYWN0b3J5LFxuICB9ID0gYXdhaXQgaW1wb3J0KGJ1bmRsZVBhdGgpO1xuXG4gIGlmIChyZW5kZXJNb2R1bGVGYWN0b3J5ICYmIEFwcFNlcnZlck1vZHVsZU5nRmFjdG9yeSkge1xuICAgIC8vIEhhcHBlbnMgd2hlbiBpbiBWaWV3RW5naW5lIG1vZGUuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlbmRlck1vZHVsZUZuOiByZW5kZXJNb2R1bGVGYWN0b3J5LFxuICAgICAgQXBwU2VydmVyTW9kdWxlRGVmOiBBcHBTZXJ2ZXJNb2R1bGVOZ0ZhY3RvcnksXG4gICAgfTtcbiAgfVxuXG4gIGlmIChyZW5kZXJNb2R1bGUgJiYgQXBwU2VydmVyTW9kdWxlKSB7XG4gICAgLy8gSGFwcGVucyB3aGVuIGluIEl2eSBtb2RlLlxuICAgIHJldHVybiB7XG4gICAgICByZW5kZXJNb2R1bGVGbjogcmVuZGVyTW9kdWxlLFxuICAgICAgQXBwU2VydmVyTW9kdWxlRGVmOiBBcHBTZXJ2ZXJNb2R1bGUsXG4gICAgfTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYHJlbmRlck1vZHVsZSBtZXRob2QgYW5kL29yIEFwcFNlcnZlck1vZHVsZSB3ZXJlIG5vdCBleHBvcnRlZCBmcm9tOiAke3NlcnZlckJ1bmRsZVBhdGh9LmApO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgZWFjaCByb3V0ZSBpbiByb3V0ZXMgYW5kIHdyaXRlcyB0aGVtIHRvIDxvdXRwdXRQYXRoPi88cm91dGU+L2luZGV4Lmh0bWwuXG4gKi9cbihhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHsgcmVuZGVyTW9kdWxlRm4sIEFwcFNlcnZlck1vZHVsZURlZiB9ID0gYXdhaXQgZ2V0U2VydmVyQnVuZGxlKHNlcnZlckJ1bmRsZVBhdGgpO1xuICBjb25zdCBicm93c2VySW5kZXhPdXRwdXRQYXRoID0gcGF0aC5qb2luKGJyb3dzZXJPdXRwdXRQYXRoLCAnaW5kZXguaHRtbCcpO1xuICBmb3IgKGNvbnN0IHJvdXRlIG9mIHJvdXRlcykge1xuICAgIGNvbnN0IHJlbmRlck9wdHMgPSB7XG4gICAgICBkb2N1bWVudDogaW5kZXhIdG1sICsgJzwhLS0gVGhpcyBwYWdlIHdhcyBwcmVyZW5kZXJlZCB3aXRoIEFuZ3VsYXIgVW5pdmVyc2FsIC0tPicsXG4gICAgICB1cmw6IHJvdXRlLFxuICAgIH07XG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlck1vZHVsZUZuKEFwcFNlcnZlck1vZHVsZURlZiwgcmVuZGVyT3B0cyk7XG5cbiAgICBjb25zdCBvdXRwdXRGb2xkZXJQYXRoID0gcGF0aC5qb2luKGJyb3dzZXJPdXRwdXRQYXRoLCByb3V0ZSk7XG4gICAgY29uc3Qgb3V0cHV0SW5kZXhQYXRoID0gcGF0aC5qb2luKG91dHB1dEZvbGRlclBhdGgsICdpbmRleC5odG1sJyk7XG5cbiAgICAvLyBUaGlzIGNhc2UgaGFwcGVucyB3aGVuIHdlIGFyZSBwcmVyZW5kZXJpbmcgXCIvXCIuXG4gICAgaWYgKGJyb3dzZXJJbmRleE91dHB1dFBhdGggPT09IG91dHB1dEluZGV4UGF0aCkge1xuICAgICAgY29uc3QgYnJvd3NlckluZGV4T3V0cHV0UGF0aE9yaWdpbmFsID0gcGF0aC5qb2luKGJyb3dzZXJPdXRwdXRQYXRoLCAnaW5kZXgub3JpZ2luYWwuaHRtbCcpO1xuICAgICAgZnMud3JpdGVGaWxlU3luYyhicm93c2VySW5kZXhPdXRwdXRQYXRoT3JpZ2luYWwsIGluZGV4SHRtbCk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGZzLm1rZGlyU3luYyhvdXRwdXRGb2xkZXJQYXRoLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICAgIGZzLndyaXRlRmlsZVN5bmMob3V0cHV0SW5kZXhQYXRoLCBodG1sKTtcbiAgICAgIGNvbnN0IGJ5dGVzID0gQnVmZmVyLmJ5dGVMZW5ndGgoaHRtbCkudG9GaXhlZCgwKTtcbiAgICAgIGlmIChwcm9jZXNzLnNlbmQpIHtcbiAgICAgICAgcHJvY2Vzcy5zZW5kKHsgc3VjY2VzczogdHJ1ZSwgb3V0cHV0SW5kZXhQYXRoLCBieXRlcyB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5zZW5kKSB7XG4gICAgICAgIHByb2Nlc3Muc2VuZCh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZS5tZXNzYWdlLCBvdXRwdXRJbmRleFBhdGggfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KSgpLnRoZW4oKS5jYXRjaCgpO1xuIl19