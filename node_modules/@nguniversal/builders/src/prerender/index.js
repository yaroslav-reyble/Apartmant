/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/builders/src/prerender/index", ["require", "exports", "@angular-devkit/architect", "child_process", "fs", "path", "@nguniversal/builders/src/prerender/utils"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const architect_1 = require("@angular-devkit/architect");
    const child_process_1 = require("child_process");
    const fs = require("fs");
    const path = require("path");
    const utils_1 = require("@nguniversal/builders/src/prerender/utils");
    /**
     * Schedules the server and browser builds and returns their results if both builds are successful.
     */
    function _scheduleBuilds(options, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const browserTarget = architect_1.targetFromTargetString(options.browserTarget);
            const serverTarget = architect_1.targetFromTargetString(options.serverTarget);
            const browserTargetRun = yield context.scheduleTarget(browserTarget, {
                watch: false,
                serviceWorker: false,
            });
            const serverTargetRun = yield context.scheduleTarget(serverTarget, {
                watch: false,
            });
            try {
                const [browserResult, serverResult] = yield Promise.all([
                    browserTargetRun.result,
                    serverTargetRun.result,
                ]);
                const success = browserResult.success && serverResult.success && browserResult.baseOutputPath !== undefined;
                const error = browserResult.error || serverResult.error;
                return { success, error, browserResult, serverResult };
            }
            catch (e) {
                return { success: false, error: e.message };
            }
            finally {
                yield Promise.all([browserTargetRun.stop(), serverTargetRun.stop()]);
            }
        });
    }
    function _parallelRenderRoutes(shardedRoutes, context, indexHtml, outputPath, serverBundlePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const workerFile = path.join(__dirname, 'render.js');
            const childProcesses = shardedRoutes.map(routes => new Promise((resolve, reject) => {
                child_process_1.fork(workerFile, [
                    indexHtml,
                    serverBundlePath,
                    outputPath,
                    ...routes,
                ])
                    .on('message', data => {
                    if (data.success) {
                        context.logger.info(`CREATE ${data.outputIndexPath} (${data.bytes} bytes)`);
                    }
                    else {
                        context.logger.error(`Error: ${data.error.message}`);
                        context.logger.error(`Unable to render ${data.outputIndexPath}`);
                    }
                })
                    .on('exit', resolve)
                    .on('error', reject);
            }));
            yield Promise.all(childProcesses);
        });
    }
    /**
     * Renders each route and writes them to
     * <route>/index.html for each output path in the browser result.
     */
    function _renderUniversal(routes, context, browserResult, serverResult, numProcesses) {
        return __awaiter(this, void 0, void 0, function* () {
            // We need to render the routes for each locale from the browser output.
            for (const outputPath of browserResult.outputPaths) {
                const browserIndexOutputPath = path.join(outputPath, 'index.html');
                const indexHtml = fs.readFileSync(browserIndexOutputPath, 'utf8');
                const { baseOutputPath = '' } = serverResult;
                const localeDirectory = path.relative(browserResult.baseOutputPath, outputPath);
                const serverBundlePath = path.join(baseOutputPath, localeDirectory, 'main.js');
                if (!fs.existsSync(serverBundlePath)) {
                    throw new Error(`Could not find the main bundle: ${serverBundlePath}`);
                }
                const shardedRoutes = utils_1.shardArray(routes, numProcesses);
                context.logger.info(`\nPrerendering ${routes.length} route(s) to ${outputPath}`);
                yield _parallelRenderRoutes(shardedRoutes, context, indexHtml, outputPath, serverBundlePath);
            }
            return browserResult;
        });
    }
    /**
     * Builds the browser and server, then renders each route in options.routes
     * and writes them to prerender/<route>/index.html for each output path in
     * the browser result.
     */
    function execute(options, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const routes = yield utils_1.getRoutes(options, context);
            if (!routes.length) {
                throw new Error(`Could not find any routes to prerender.`);
            }
            const result = yield _scheduleBuilds(options, context);
            const { success, error, browserResult, serverResult } = result;
            if (!success || !browserResult || !serverResult) {
                return { success, error };
            }
            return _renderUniversal(routes, context, browserResult, serverResult, options.numProcesses);
        });
    }
    exports.execute = execute;
    exports.default = architect_1.createBuilder(execute);
});
//# sourceMappingURL=data:application/json;base64,