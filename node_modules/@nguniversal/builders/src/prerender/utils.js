/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/builders/src/prerender/utils", ["require", "exports", "@angular-devkit/architect", "fs", "guess-parser", "os", "path"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const architect_1 = require("@angular-devkit/architect");
    const fs = require("fs");
    const guess_parser_1 = require("guess-parser");
    const os = require("os");
    const path = require("path");
    /**
     * Returns the union of routes, the contents of routesFile if given,
     * and the static routes extracted if guessRoutes is set to true.
     */
    function getRoutes(options, context) {
        return __awaiter(this, void 0, void 0, function* () {
            let routes = options.routes || [];
            if (options.routesFile) {
                const routesFilePath = path.resolve(context.workspaceRoot, options.routesFile);
                routes = routes.concat(fs.readFileSync(routesFilePath, 'utf8')
                    .split(/\r?\n/)
                    .filter(v => !!v));
            }
            if (options.guessRoutes) {
                const browserTarget = architect_1.targetFromTargetString(options.browserTarget);
                const { tsConfig } = yield context.getTargetOptions(browserTarget);
                if (typeof tsConfig === 'string') {
                    try {
                        routes = routes.concat(guess_parser_1.parseAngularRoutes(path.join(context.workspaceRoot, tsConfig))
                            .map(routeObj => routeObj.path)
                            .filter(route => !route.includes('*') && !route.includes(':')));
                    }
                    catch (e) {
                        context.logger.error('Unable to extract routes from application.', e);
                    }
                }
            }
            return [...new Set(routes)];
        });
    }
    exports.getRoutes = getRoutes;
    /**
     * Evenly shards items in an array.
     * e.g. shardArray([1, 2, 3, 4], 2) => [[1, 2], [3, 4]]
     */
    function shardArray(items, maxNoOfShards = (os.cpus().length - 1) || 1) {
        const shardedArray = [];
        const numShards = Math.min(maxNoOfShards, items.length);
        for (let i = 0; i < numShards; i++) {
            shardedArray.push(items.filter((_, index) => index % numShards === i));
        }
        return shardedArray;
    }
    exports.shardArray = shardArray;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2J1aWxkZXJzL3NyYy9wcmVyZW5kZXIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFSCx5REFBbUY7SUFDbkYseUJBQXlCO0lBQ3pCLCtDQUFrRDtJQUNsRCx5QkFBeUI7SUFDekIsNkJBQTZCO0lBSTdCOzs7T0FHRztJQUNILFNBQXNCLFNBQVMsQ0FDN0IsT0FBZ0MsRUFDaEMsT0FBdUI7O1lBRXZCLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO1lBRWxDLElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtnQkFDdEIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDL0UsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQ3BCLEVBQUUsQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQztxQkFDcEMsS0FBSyxDQUFDLE9BQU8sQ0FBQztxQkFDZCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3BCLENBQUM7YUFDSDtZQUVELElBQUksT0FBTyxDQUFDLFdBQVcsRUFBRTtnQkFDdkIsTUFBTSxhQUFhLEdBQUcsa0NBQXNCLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUNwRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQ25FLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO29CQUNoQyxJQUFJO3dCQUNGLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUNwQixpQ0FBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7NkJBQzNELEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7NkJBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDakUsQ0FBQztxQkFDSDtvQkFBQyxPQUFPLENBQUMsRUFBRTt3QkFDVixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyw0Q0FBNEMsRUFBRSxDQUFDLENBQUMsQ0FBQztxQkFDdkU7aUJBQ0Y7YUFDRjtZQUVELE9BQU8sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDOUIsQ0FBQztLQUFBO0lBaENELDhCQWdDQztJQUVEOzs7T0FHRztJQUNILFNBQWdCLFVBQVUsQ0FBSSxLQUFVLEVBQUUsYUFBYSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ25GLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUN4QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsQyxZQUFZLENBQUMsSUFBSSxDQUNmLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEdBQUcsU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUNwRCxDQUFDO1NBQ0g7UUFFRCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBVkQsZ0NBVUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHsgQnVpbGRlckNvbnRleHQsIHRhcmdldEZyb21UYXJnZXRTdHJpbmcgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvYXJjaGl0ZWN0JztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCB7IHBhcnNlQW5ndWxhclJvdXRlcyB9IGZyb20gJ2d1ZXNzLXBhcnNlcic7XG5pbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBQcmVyZW5kZXJCdWlsZGVyT3B0aW9ucyB9IGZyb20gJy4vbW9kZWxzJztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB1bmlvbiBvZiByb3V0ZXMsIHRoZSBjb250ZW50cyBvZiByb3V0ZXNGaWxlIGlmIGdpdmVuLFxuICogYW5kIHRoZSBzdGF0aWMgcm91dGVzIGV4dHJhY3RlZCBpZiBndWVzc1JvdXRlcyBpcyBzZXQgdG8gdHJ1ZS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJvdXRlcyhcbiAgb3B0aW9uczogUHJlcmVuZGVyQnVpbGRlck9wdGlvbnMsXG4gIGNvbnRleHQ6IEJ1aWxkZXJDb250ZXh0LFxuKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICBsZXQgcm91dGVzID0gb3B0aW9ucy5yb3V0ZXMgfHwgW107XG5cbiAgaWYgKG9wdGlvbnMucm91dGVzRmlsZSkge1xuICAgIGNvbnN0IHJvdXRlc0ZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKGNvbnRleHQud29ya3NwYWNlUm9vdCwgb3B0aW9ucy5yb3V0ZXNGaWxlKTtcbiAgICByb3V0ZXMgPSByb3V0ZXMuY29uY2F0KFxuICAgICAgZnMucmVhZEZpbGVTeW5jKHJvdXRlc0ZpbGVQYXRoLCAndXRmOCcpXG4gICAgICAgIC5zcGxpdCgvXFxyP1xcbi8pXG4gICAgICAgIC5maWx0ZXIodiA9PiAhIXYpXG4gICAgKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmd1ZXNzUm91dGVzKSB7XG4gICAgY29uc3QgYnJvd3NlclRhcmdldCA9IHRhcmdldEZyb21UYXJnZXRTdHJpbmcob3B0aW9ucy5icm93c2VyVGFyZ2V0KTtcbiAgICBjb25zdCB7IHRzQ29uZmlnIH0gPSBhd2FpdCBjb250ZXh0LmdldFRhcmdldE9wdGlvbnMoYnJvd3NlclRhcmdldCk7XG4gICAgaWYgKHR5cGVvZiB0c0NvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJvdXRlcyA9IHJvdXRlcy5jb25jYXQoXG4gICAgICAgICAgcGFyc2VBbmd1bGFyUm91dGVzKHBhdGguam9pbihjb250ZXh0LndvcmtzcGFjZVJvb3QsIHRzQ29uZmlnKSlcbiAgICAgICAgICAgIC5tYXAocm91dGVPYmogPT4gcm91dGVPYmoucGF0aClcbiAgICAgICAgICAgIC5maWx0ZXIocm91dGUgPT4gIXJvdXRlLmluY2x1ZGVzKCcqJykgJiYgIXJvdXRlLmluY2x1ZGVzKCc6JykpXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnRleHQubG9nZ2VyLmVycm9yKCdVbmFibGUgdG8gZXh0cmFjdCByb3V0ZXMgZnJvbSBhcHBsaWNhdGlvbi4nLCBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gWy4uLm5ldyBTZXQocm91dGVzKV07XG59XG5cbi8qKlxuICogRXZlbmx5IHNoYXJkcyBpdGVtcyBpbiBhbiBhcnJheS5cbiAqIGUuZy4gc2hhcmRBcnJheShbMSwgMiwgMywgNF0sIDIpID0+IFtbMSwgMl0sIFszLCA0XV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNoYXJkQXJyYXk8VD4oaXRlbXM6IFRbXSwgbWF4Tm9PZlNoYXJkcyA9IChvcy5jcHVzKCkubGVuZ3RoIC0gMSkgfHwgMSk6IFRbXVtdIHtcbiAgY29uc3Qgc2hhcmRlZEFycmF5ID0gW107XG4gIGNvbnN0IG51bVNoYXJkcyA9IE1hdGgubWluKG1heE5vT2ZTaGFyZHMsIGl0ZW1zLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtU2hhcmRzOyBpKyspIHtcbiAgICBzaGFyZGVkQXJyYXkucHVzaChcbiAgICAgIGl0ZW1zLmZpbHRlcigoXywgaW5kZXgpID0+IGluZGV4ICUgbnVtU2hhcmRzID09PSBpKVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gc2hhcmRlZEFycmF5O1xufVxuIl19