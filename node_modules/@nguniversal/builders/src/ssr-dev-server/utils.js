/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/builders/src/ssr-dev-server/utils", ["require", "exports", "child_process", "net", "rxjs", "rxjs/operators", "tree-kill"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const child_process_1 = require("child_process");
    const net_1 = require("net");
    const rxjs_1 = require("rxjs");
    const operators_1 = require("rxjs/operators");
    const treeKill = require("tree-kill");
    function getAvailablePort() {
        return new Promise((resolve, reject) => {
            const server = net_1.createServer();
            server
                .unref()
                .on('error', reject)
                .listen(0, () => {
                const { port } = server.address();
                server.close(() => resolve(port));
            });
        });
    }
    exports.getAvailablePort = getAvailablePort;
    function spawnAsObservable(command, args = [], options = {}) {
        return new rxjs_1.Observable(obs => {
            const proc = child_process_1.spawn(command, args, options);
            if (proc.stdout) {
                proc.stdout.on('data', data => obs.next({ stdout: data.toString() }));
            }
            if (proc.stderr) {
                proc.stderr.on('data', data => obs.next({ stderr: data.toString() }));
            }
            proc
                .on('error', err => obs.error(err))
                .on('close', code => {
                if (code !== 0) {
                    obs.error(new Error(`${command} exited with ${code} code.`));
                }
                obs.complete();
            });
            return () => {
                if (!proc.killed) {
                    treeKill(proc.pid, 'SIGTERM');
                }
            };
        });
    }
    exports.spawnAsObservable = spawnAsObservable;
    function waitUntilServerIsListening(port, host) {
        const allowedErrorCodes = [
            'ECONNREFUSED',
            'ECONNRESET',
        ];
        return new rxjs_1.Observable(obs => {
            const client = net_1.createConnection({ host, port }, () => {
                obs.next(undefined);
                obs.complete();
            })
                .on('error', err => obs.error(err));
            return () => {
                if (!client.destroyed) {
                    client.destroy();
                }
            };
        })
            .pipe(operators_1.retryWhen(err => err.pipe(operators_1.mergeMap((error, attempts) => {
            return attempts > 10 || !allowedErrorCodes.includes(error.code)
                ? rxjs_1.throwError(error)
                : rxjs_1.timer(100 * (attempts * 1));
        }))));
    }
    exports.waitUntilServerIsListening = waitUntilServerIsListening;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2J1aWxkZXJzL3NyYy9zc3ItZGV2LXNlcnZlci91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7Ozs7Ozs7Ozs7OztJQUVILGlEQUFvRDtJQUNwRCw2QkFBa0U7SUFDbEUsK0JBQXFEO0lBQ3JELDhDQUFxRDtJQUNyRCxzQ0FBc0M7SUFFdEMsU0FBZ0IsZ0JBQWdCO1FBQzlCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsTUFBTSxNQUFNLEdBQUcsa0JBQVksRUFBRSxDQUFDO1lBQzlCLE1BQU07aUJBQ0gsS0FBSyxFQUFFO2lCQUNQLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDO2lCQUNuQixNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRTtnQkFDZCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBaUIsQ0FBQztnQkFDakQsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNwQyxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQVhELDRDQVdDO0lBRUQsU0FBZ0IsaUJBQWlCLENBQy9CLE9BQWUsRUFDZixPQUFpQixFQUFFLEVBQ25CLFVBQXdCLEVBQUU7UUFFMUIsT0FBTyxJQUFJLGlCQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDMUIsTUFBTSxJQUFJLEdBQUcscUJBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzNDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUN2RTtZQUVELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUN2RTtZQUVELElBQUk7aUJBQ0QsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2xDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ2xCLElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtvQkFDZCxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsT0FBTyxnQkFBZ0IsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO2lCQUM5RDtnQkFFRCxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDakIsQ0FBQyxDQUFDLENBQUM7WUFFTCxPQUFPLEdBQUcsRUFBRTtnQkFDVixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDaEIsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7aUJBQy9CO1lBQ0gsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBL0JELDhDQStCQztJQUVELFNBQWdCLDBCQUEwQixDQUN4QyxJQUFZLEVBQ1osSUFBYTtRQUViLE1BQU0saUJBQWlCLEdBQUc7WUFDeEIsY0FBYztZQUNkLFlBQVk7U0FDYixDQUFDO1FBRUYsT0FBTyxJQUFJLGlCQUFVLENBQVksR0FBRyxDQUFDLEVBQUU7WUFDckMsTUFBTSxNQUFNLEdBQUcsc0JBQWdCLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFO2dCQUNuRCxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNwQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDakIsQ0FBQyxDQUFDO2lCQUNELEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFcEMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7b0JBQ3JCLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztpQkFDbEI7WUFDSCxDQUFDLENBQUM7UUFDSixDQUFDLENBQUM7YUFDRCxJQUFJLENBQ0gscUJBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQ3ZCLG9CQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDM0IsT0FBTyxRQUFRLEdBQUcsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQzdELENBQUMsQ0FBQyxpQkFBVSxDQUFDLEtBQUssQ0FBQztnQkFDbkIsQ0FBQyxDQUFDLFlBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FDSCxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUEvQkQsZ0VBK0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IFNwYXduT3B0aW9ucywgc3Bhd24gfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7IEFkZHJlc3NJbmZvLCBjcmVhdGVDb25uZWN0aW9uLCBjcmVhdGVTZXJ2ZXIgfSBmcm9tICduZXQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciwgdGltZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1lcmdlTWFwLCByZXRyeVdoZW4gfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgKiBhcyB0cmVlS2lsbCBmcm9tICd0cmVlLWtpbGwnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXZhaWxhYmxlUG9ydCgpOiBQcm9taXNlPG51bWJlcj4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHNlcnZlciA9IGNyZWF0ZVNlcnZlcigpO1xuICAgIHNlcnZlclxuICAgICAgLnVucmVmKClcbiAgICAgIC5vbignZXJyb3InLCByZWplY3QpXG4gICAgICAubGlzdGVuKDAsICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBwb3J0IH0gPSBzZXJ2ZXIuYWRkcmVzcygpIGFzIEFkZHJlc3NJbmZvO1xuICAgICAgICBzZXJ2ZXIuY2xvc2UoKCkgPT4gcmVzb2x2ZShwb3J0KSk7XG4gICAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGF3bkFzT2JzZXJ2YWJsZShcbiAgY29tbWFuZDogc3RyaW5nLFxuICBhcmdzOiBzdHJpbmdbXSA9IFtdLFxuICBvcHRpb25zOiBTcGF3bk9wdGlvbnMgPSB7fVxuKTogT2JzZXJ2YWJsZTx7IHN0ZG91dD86IHN0cmluZywgc3RkZXJyPzogc3RyaW5nIH0+IHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKG9icyA9PiB7XG4gICAgY29uc3QgcHJvYyA9IHNwYXduKGNvbW1hbmQsIGFyZ3MsIG9wdGlvbnMpO1xuICAgIGlmIChwcm9jLnN0ZG91dCkge1xuICAgICAgcHJvYy5zdGRvdXQub24oJ2RhdGEnLCBkYXRhID0+IG9icy5uZXh0KHsgc3Rkb3V0OiBkYXRhLnRvU3RyaW5nKCkgfSkpO1xuICAgIH1cblxuICAgIGlmIChwcm9jLnN0ZGVycikge1xuICAgICAgcHJvYy5zdGRlcnIub24oJ2RhdGEnLCBkYXRhID0+IG9icy5uZXh0KHsgc3RkZXJyOiBkYXRhLnRvU3RyaW5nKCkgfSkpO1xuICAgIH1cblxuICAgIHByb2NcbiAgICAgIC5vbignZXJyb3InLCBlcnIgPT4gb2JzLmVycm9yKGVycikpXG4gICAgICAub24oJ2Nsb3NlJywgY29kZSA9PiB7XG4gICAgICAgIGlmIChjb2RlICE9PSAwKSB7XG4gICAgICAgICAgb2JzLmVycm9yKG5ldyBFcnJvcihgJHtjb21tYW5kfSBleGl0ZWQgd2l0aCAke2NvZGV9IGNvZGUuYCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JzLmNvbXBsZXRlKCk7XG4gICAgICB9KTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoIXByb2Mua2lsbGVkKSB7XG4gICAgICAgIHRyZWVLaWxsKHByb2MucGlkLCAnU0lHVEVSTScpO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2FpdFVudGlsU2VydmVySXNMaXN0ZW5pbmcoXG4gIHBvcnQ6IG51bWJlcixcbiAgaG9zdD86IHN0cmluZyxcbik6IE9ic2VydmFibGU8dW5kZWZpbmVkPiB7XG4gIGNvbnN0IGFsbG93ZWRFcnJvckNvZGVzID0gW1xuICAgICdFQ09OTlJFRlVTRUQnLFxuICAgICdFQ09OTlJFU0VUJyxcbiAgXTtcblxuICByZXR1cm4gbmV3IE9ic2VydmFibGU8dW5kZWZpbmVkPihvYnMgPT4ge1xuICAgIGNvbnN0IGNsaWVudCA9IGNyZWF0ZUNvbm5lY3Rpb24oeyBob3N0LCBwb3J0IH0sICgpID0+IHtcbiAgICAgIG9icy5uZXh0KHVuZGVmaW5lZCk7XG4gICAgICBvYnMuY29tcGxldGUoKTtcbiAgICB9KVxuICAgIC5vbignZXJyb3InLCBlcnIgPT4gb2JzLmVycm9yKGVycikpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICghY2xpZW50LmRlc3Ryb3llZCkge1xuICAgICAgICBjbGllbnQuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH07XG4gIH0pXG4gIC5waXBlKFxuICAgIHJldHJ5V2hlbihlcnIgPT4gZXJyLnBpcGUoXG4gICAgICBtZXJnZU1hcCgoZXJyb3IsIGF0dGVtcHRzKSA9PiB7XG4gICAgICAgIHJldHVybiBhdHRlbXB0cyA+IDEwIHx8ICFhbGxvd2VkRXJyb3JDb2Rlcy5pbmNsdWRlcyhlcnJvci5jb2RlKVxuICAgICAgICAgID8gdGhyb3dFcnJvcihlcnJvcilcbiAgICAgICAgICA6IHRpbWVyKDEwMCAqIChhdHRlbXB0cyAqIDEpKTtcbiAgICAgIH0pLFxuICAgICkpXG4gICk7XG59XG4iXX0=