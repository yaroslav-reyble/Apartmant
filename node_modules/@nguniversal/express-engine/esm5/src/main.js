import * as fs from 'fs';
import { ÉµCommonEngine as CommonEngine } from '@nguniversal/common/engine';
import { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';
/**
 * This holds a cached version of each index used.
 */
var templateCache = {};
/**
 * This is an express engine for handling Angular Applications
 */
export function ngExpressEngine(setupOptions) {
    var engine = new CommonEngine(setupOptions.bootstrap, setupOptions.providers);
    return function (filePath, options, callback) {
        try {
            if (!setupOptions.bootstrap && !options.bootstrap) {
                throw new Error('You must pass in a NgModule or NgModuleFactory to be bootstrapped');
            }
            var req = options.req;
            var renderOptions = Object.assign({}, options);
            renderOptions.url =
                options.url || req.protocol + "://" + (req.get('host') || '') + req.originalUrl;
            renderOptions.document = options.document || getDocument(filePath);
            renderOptions.providers = options.providers || [];
            renderOptions.providers =
                renderOptions.providers.concat(getReqResProviders(options.req, options.res));
            engine.render(renderOptions)
                .then(function (html) { return callback(null, html); })
                .catch(callback);
        }
        catch (err) {
            callback(err);
        }
    };
}
/**
 * Get providers of the request and response
 */
function getReqResProviders(req, res) {
    var providers = [
        {
            provide: REQUEST,
            useValue: req
        }
    ];
    if (res) {
        providers.push({
            provide: RESPONSE,
            useValue: res
        });
    }
    return providers;
}
/**
 * Get the document at the file path
 */
function getDocument(filePath) {
    return templateCache[filePath] = templateCache[filePath] || fs.readFileSync(filePath).toString();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL21vZHVsZXMvZXhwcmVzcy1lbmdpbmUvc3JjL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFHekIsT0FBTyxFQUFFLGFBQWEsSUFBSSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMzRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBb0J2RTs7R0FFRztBQUNILElBQU0sYUFBYSxHQUE4QixFQUFFLENBQUM7QUFFcEQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsZUFBZSxDQUFDLFlBQXNDO0lBQ3BFLElBQU0sTUFBTSxHQUFHLElBQUksWUFBWSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRWhGLE9BQU8sVUFBVSxRQUFnQixFQUNoQixPQUFnQyxFQUNoQyxRQUFxRDtRQUNwRSxJQUFJO1lBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFO2dCQUNqRCxNQUFNLElBQUksS0FBSyxDQUFDLG1FQUFtRSxDQUFDLENBQUM7YUFDdEY7WUFFRCxJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO1lBRXhCLElBQU0sYUFBYSxHQUFrQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUVoRSxhQUFhLENBQUMsR0FBRztnQkFDZixPQUFPLENBQUMsR0FBRyxJQUFPLEdBQUcsQ0FBQyxRQUFRLFdBQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxXQUFhLENBQUM7WUFDbEYsYUFBYSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVuRSxhQUFhLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO1lBQ2xELGFBQWEsQ0FBQyxTQUFTO2dCQUNyQixhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBRS9FLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO2lCQUN6QixJQUFJLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFwQixDQUFvQixDQUFDO2lCQUNsQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDcEI7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNmO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyxrQkFBa0IsQ0FBQyxHQUFZLEVBQUUsR0FBYztJQUN0RCxJQUFNLFNBQVMsR0FBcUI7UUFDbEM7WUFDRSxPQUFPLEVBQUUsT0FBTztZQUNoQixRQUFRLEVBQUUsR0FBRztTQUNkO0tBQ0YsQ0FBQztJQUNGLElBQUksR0FBRyxFQUFFO1FBQ1AsU0FBUyxDQUFDLElBQUksQ0FBQztZQUNiLE9BQU8sRUFBRSxRQUFRO1lBQ2pCLFFBQVEsRUFBRSxHQUFHO1NBQ2QsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFTLFdBQVcsQ0FBQyxRQUFnQjtJQUNuQyxPQUFPLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNuRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuXG5pbXBvcnQgeyBOZ01vZHVsZUZhY3RvcnksIFN0YXRpY1Byb3ZpZGVyLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyDJtUNvbW1vbkVuZ2luZSBhcyBDb21tb25FbmdpbmUgfSBmcm9tICdAbmd1bml2ZXJzYWwvY29tbW9uL2VuZ2luZSc7XG5pbXBvcnQgeyBSRVFVRVNULCBSRVNQT05TRSB9IGZyb20gJ0BuZ3VuaXZlcnNhbC9leHByZXNzLWVuZ2luZS90b2tlbnMnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSB0aGUgYWxsb3dlZCBvcHRpb25zIGZvciB0aGUgZW5naW5lXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmdTZXR1cE9wdGlvbnMge1xuICBib290c3RyYXA6IFR5cGU8e30+IHwgTmdNb2R1bGVGYWN0b3J5PHt9PjtcbiAgcHJvdmlkZXJzPzogU3RhdGljUHJvdmlkZXJbXTtcbn1cblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIGFsbG93ZWQgb3B0aW9ucyBmb3IgdGhlIHJlbmRlclxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlbmRlck9wdGlvbnMgZXh0ZW5kcyBOZ1NldHVwT3B0aW9ucyB7XG4gIHJlcTogUmVxdWVzdDtcbiAgcmVzPzogUmVzcG9uc2U7XG4gIHVybD86IHN0cmluZztcbiAgZG9jdW1lbnQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogVGhpcyBob2xkcyBhIGNhY2hlZCB2ZXJzaW9uIG9mIGVhY2ggaW5kZXggdXNlZC5cbiAqL1xuY29uc3QgdGVtcGxhdGVDYWNoZTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuXG4vKipcbiAqIFRoaXMgaXMgYW4gZXhwcmVzcyBlbmdpbmUgZm9yIGhhbmRsaW5nIEFuZ3VsYXIgQXBwbGljYXRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZ0V4cHJlc3NFbmdpbmUoc2V0dXBPcHRpb25zOiBSZWFkb25seTxOZ1NldHVwT3B0aW9ucz4pIHtcbiAgY29uc3QgZW5naW5lID0gbmV3IENvbW1vbkVuZ2luZShzZXR1cE9wdGlvbnMuYm9vdHN0cmFwLCBzZXR1cE9wdGlvbnMucHJvdmlkZXJzKTtcblxuICByZXR1cm4gZnVuY3Rpb24gKGZpbGVQYXRoOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgb3B0aW9uczogUmVhZG9ubHk8UmVuZGVyT3B0aW9ucz4sXG4gICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IChlcnI/OiBFcnJvciB8IG51bGwsIGh0bWw/OiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFzZXR1cE9wdGlvbnMuYm9vdHN0cmFwICYmICFvcHRpb25zLmJvb3RzdHJhcCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IHBhc3MgaW4gYSBOZ01vZHVsZSBvciBOZ01vZHVsZUZhY3RvcnkgdG8gYmUgYm9vdHN0cmFwcGVkJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlcSA9IG9wdGlvbnMucmVxO1xuXG4gICAgICBjb25zdCByZW5kZXJPcHRpb25zOiBSZW5kZXJPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG5cbiAgICAgIHJlbmRlck9wdGlvbnMudXJsID1cbiAgICAgICAgb3B0aW9ucy51cmwgfHwgYCR7cmVxLnByb3RvY29sfTovLyR7KHJlcS5nZXQoJ2hvc3QnKSB8fCAnJyl9JHtyZXEub3JpZ2luYWxVcmx9YDtcbiAgICAgIHJlbmRlck9wdGlvbnMuZG9jdW1lbnQgPSBvcHRpb25zLmRvY3VtZW50IHx8IGdldERvY3VtZW50KGZpbGVQYXRoKTtcblxuICAgICAgcmVuZGVyT3B0aW9ucy5wcm92aWRlcnMgPSBvcHRpb25zLnByb3ZpZGVycyB8fCBbXTtcbiAgICAgIHJlbmRlck9wdGlvbnMucHJvdmlkZXJzID1cbiAgICAgICAgcmVuZGVyT3B0aW9ucy5wcm92aWRlcnMuY29uY2F0KGdldFJlcVJlc1Byb3ZpZGVycyhvcHRpb25zLnJlcSwgb3B0aW9ucy5yZXMpKTtcblxuICAgICAgZW5naW5lLnJlbmRlcihyZW5kZXJPcHRpb25zKVxuICAgICAgICAudGhlbihodG1sID0+IGNhbGxiYWNrKG51bGwsIGh0bWwpKVxuICAgICAgICAuY2F0Y2goY2FsbGJhY2spO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogR2V0IHByb3ZpZGVycyBvZiB0aGUgcmVxdWVzdCBhbmQgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gZ2V0UmVxUmVzUHJvdmlkZXJzKHJlcTogUmVxdWVzdCwgcmVzPzogUmVzcG9uc2UpOiBTdGF0aWNQcm92aWRlcltdIHtcbiAgY29uc3QgcHJvdmlkZXJzOiBTdGF0aWNQcm92aWRlcltdID0gW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IFJFUVVFU1QsXG4gICAgICB1c2VWYWx1ZTogcmVxXG4gICAgfVxuICBdO1xuICBpZiAocmVzKSB7XG4gICAgcHJvdmlkZXJzLnB1c2goe1xuICAgICAgcHJvdmlkZTogUkVTUE9OU0UsXG4gICAgICB1c2VWYWx1ZTogcmVzXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcHJvdmlkZXJzO1xufVxuXG4vKipcbiAqIEdldCB0aGUgZG9jdW1lbnQgYXQgdGhlIGZpbGUgcGF0aFxuICovXG5mdW5jdGlvbiBnZXREb2N1bWVudChmaWxlUGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHRlbXBsYXRlQ2FjaGVbZmlsZVBhdGhdID0gdGVtcGxhdGVDYWNoZVtmaWxlUGF0aF0gfHwgZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoKS50b1N0cmluZygpO1xufVxuIl19