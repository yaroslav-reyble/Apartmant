/**
 * @fileoverview added by tsickle
 * Generated from: modules/express-engine/src/main.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as fs from 'fs';
import { ÉµCommonEngine as CommonEngine } from '@nguniversal/common/engine';
import { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';
/**
 * These are the allowed options for the engine
 * @record
 */
export function NgSetupOptions() { }
if (false) {
    /** @type {?} */
    NgSetupOptions.prototype.bootstrap;
    /** @type {?|undefined} */
    NgSetupOptions.prototype.providers;
}
/**
 * These are the allowed options for the render
 * @record
 */
export function RenderOptions() { }
if (false) {
    /** @type {?} */
    RenderOptions.prototype.req;
    /** @type {?|undefined} */
    RenderOptions.prototype.res;
    /** @type {?|undefined} */
    RenderOptions.prototype.url;
    /** @type {?|undefined} */
    RenderOptions.prototype.document;
}
/**
 * This holds a cached version of each index used.
 * @type {?}
 */
const templateCache = {};
/**
 * This is an express engine for handling Angular Applications
 * @param {?} setupOptions
 * @return {?}
 */
export function ngExpressEngine(setupOptions) {
    /** @type {?} */
    const engine = new CommonEngine(setupOptions.bootstrap, setupOptions.providers);
    return (/**
     * @param {?} filePath
     * @param {?} options
     * @param {?} callback
     * @return {?}
     */
    function (filePath, options, callback) {
        try {
            if (!setupOptions.bootstrap && !options.bootstrap) {
                throw new Error('You must pass in a NgModule or NgModuleFactory to be bootstrapped');
            }
            /** @type {?} */
            const req = options.req;
            /** @type {?} */
            const renderOptions = Object.assign({}, options);
            renderOptions.url =
                options.url || `${req.protocol}://${(req.get('host') || '')}${req.originalUrl}`;
            renderOptions.document = options.document || getDocument(filePath);
            renderOptions.providers = options.providers || [];
            renderOptions.providers =
                renderOptions.providers.concat(getReqResProviders(options.req, options.res));
            engine.render(renderOptions)
                .then((/**
             * @param {?} html
             * @return {?}
             */
            html => callback(null, html)))
                .catch(callback);
        }
        catch (err) {
            callback(err);
        }
    });
}
/**
 * Get providers of the request and response
 * @param {?} req
 * @param {?=} res
 * @return {?}
 */
function getReqResProviders(req, res) {
    /** @type {?} */
    const providers = [
        {
            provide: REQUEST,
            useValue: req
        }
    ];
    if (res) {
        providers.push({
            provide: RESPONSE,
            useValue: res
        });
    }
    return providers;
}
/**
 * Get the document at the file path
 * @param {?} filePath
 * @return {?}
 */
function getDocument(filePath) {
    return templateCache[filePath] = templateCache[filePath] || fs.readFileSync(filePath).toString();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL21vZHVsZXMvZXhwcmVzcy1lbmdpbmUvc3JjL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFRQSxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUd6QixPQUFPLEVBQUUsYUFBYSxJQUFJLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzNFLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7Ozs7O0FBS3ZFLG9DQUdDOzs7SUFGQyxtQ0FBMEM7O0lBQzFDLG1DQUE2Qjs7Ozs7O0FBTS9CLG1DQUtDOzs7SUFKQyw0QkFBYTs7SUFDYiw0QkFBZTs7SUFDZiw0QkFBYTs7SUFDYixpQ0FBa0I7Ozs7OztNQU1kLGFBQWEsR0FBOEIsRUFBRTs7Ozs7O0FBS25ELE1BQU0sVUFBVSxlQUFlLENBQUMsWUFBc0M7O1VBQzlELE1BQU0sR0FBRyxJQUFJLFlBQVksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUM7SUFFL0U7Ozs7OztJQUFPLFVBQVUsUUFBZ0IsRUFDaEIsT0FBZ0MsRUFDaEMsUUFBcUQ7UUFDcEUsSUFBSTtZQUNGLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRTtnQkFDakQsTUFBTSxJQUFJLEtBQUssQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO2FBQ3RGOztrQkFFSyxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUc7O2tCQUVqQixhQUFhLEdBQWtCLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQztZQUUvRCxhQUFhLENBQUMsR0FBRztnQkFDZixPQUFPLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLFFBQVEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2xGLGFBQWEsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFbkUsYUFBYSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztZQUNsRCxhQUFhLENBQUMsU0FBUztnQkFDckIsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUUvRSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztpQkFDekIsSUFBSTs7OztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBQztpQkFDbEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3BCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDZjtJQUNILENBQUMsRUFBQztBQUNKLENBQUM7Ozs7Ozs7QUFLRCxTQUFTLGtCQUFrQixDQUFDLEdBQVksRUFBRSxHQUFjOztVQUNoRCxTQUFTLEdBQXFCO1FBQ2xDO1lBQ0UsT0FBTyxFQUFFLE9BQU87WUFDaEIsUUFBUSxFQUFFLEdBQUc7U0FDZDtLQUNGO0lBQ0QsSUFBSSxHQUFHLEVBQUU7UUFDUCxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ2IsT0FBTyxFQUFFLFFBQVE7WUFDakIsUUFBUSxFQUFFLEdBQUc7U0FDZCxDQUFDLENBQUM7S0FDSjtJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7Ozs7OztBQUtELFNBQVMsV0FBVyxDQUFDLFFBQWdCO0lBQ25DLE9BQU8sYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ25HLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5cbmltcG9ydCB7IE5nTW9kdWxlRmFjdG9yeSwgU3RhdGljUHJvdmlkZXIsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IMm1Q29tbW9uRW5naW5lIGFzIENvbW1vbkVuZ2luZSB9IGZyb20gJ0BuZ3VuaXZlcnNhbC9jb21tb24vZW5naW5lJztcbmltcG9ydCB7IFJFUVVFU1QsIFJFU1BPTlNFIH0gZnJvbSAnQG5ndW5pdmVyc2FsL2V4cHJlc3MtZW5naW5lL3Rva2Vucyc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHRoZSBhbGxvd2VkIG9wdGlvbnMgZm9yIHRoZSBlbmdpbmVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOZ1NldHVwT3B0aW9ucyB7XG4gIGJvb3RzdHJhcDogVHlwZTx7fT4gfCBOZ01vZHVsZUZhY3Rvcnk8e30+O1xuICBwcm92aWRlcnM/OiBTdGF0aWNQcm92aWRlcltdO1xufVxuXG4vKipcbiAqIFRoZXNlIGFyZSB0aGUgYWxsb3dlZCBvcHRpb25zIGZvciB0aGUgcmVuZGVyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyT3B0aW9ucyBleHRlbmRzIE5nU2V0dXBPcHRpb25zIHtcbiAgcmVxOiBSZXF1ZXN0O1xuICByZXM/OiBSZXNwb25zZTtcbiAgdXJsPzogc3RyaW5nO1xuICBkb2N1bWVudD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaGlzIGhvbGRzIGEgY2FjaGVkIHZlcnNpb24gb2YgZWFjaCBpbmRleCB1c2VkLlxuICovXG5jb25zdCB0ZW1wbGF0ZUNhY2hlOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG5cbi8qKlxuICogVGhpcyBpcyBhbiBleHByZXNzIGVuZ2luZSBmb3IgaGFuZGxpbmcgQW5ndWxhciBBcHBsaWNhdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5nRXhwcmVzc0VuZ2luZShzZXR1cE9wdGlvbnM6IFJlYWRvbmx5PE5nU2V0dXBPcHRpb25zPikge1xuICBjb25zdCBlbmdpbmUgPSBuZXcgQ29tbW9uRW5naW5lKHNldHVwT3B0aW9ucy5ib290c3RyYXAsIHNldHVwT3B0aW9ucy5wcm92aWRlcnMpO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoZmlsZVBhdGg6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBSZWFkb25seTxSZW5kZXJPcHRpb25zPixcbiAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogKGVycj86IEVycm9yIHwgbnVsbCwgaHRtbD86IHN0cmluZykgPT4gdm9pZCkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIXNldHVwT3B0aW9ucy5ib290c3RyYXAgJiYgIW9wdGlvbnMuYm9vdHN0cmFwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3QgcGFzcyBpbiBhIE5nTW9kdWxlIG9yIE5nTW9kdWxlRmFjdG9yeSB0byBiZSBib290c3RyYXBwZWQnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVxID0gb3B0aW9ucy5yZXE7XG5cbiAgICAgIGNvbnN0IHJlbmRlck9wdGlvbnM6IFJlbmRlck9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcblxuICAgICAgcmVuZGVyT3B0aW9ucy51cmwgPVxuICAgICAgICBvcHRpb25zLnVybCB8fCBgJHtyZXEucHJvdG9jb2x9Oi8vJHsocmVxLmdldCgnaG9zdCcpIHx8ICcnKX0ke3JlcS5vcmlnaW5hbFVybH1gO1xuICAgICAgcmVuZGVyT3B0aW9ucy5kb2N1bWVudCA9IG9wdGlvbnMuZG9jdW1lbnQgfHwgZ2V0RG9jdW1lbnQoZmlsZVBhdGgpO1xuXG4gICAgICByZW5kZXJPcHRpb25zLnByb3ZpZGVycyA9IG9wdGlvbnMucHJvdmlkZXJzIHx8IFtdO1xuICAgICAgcmVuZGVyT3B0aW9ucy5wcm92aWRlcnMgPVxuICAgICAgICByZW5kZXJPcHRpb25zLnByb3ZpZGVycy5jb25jYXQoZ2V0UmVxUmVzUHJvdmlkZXJzKG9wdGlvbnMucmVxLCBvcHRpb25zLnJlcykpO1xuXG4gICAgICBlbmdpbmUucmVuZGVyKHJlbmRlck9wdGlvbnMpXG4gICAgICAgIC50aGVuKGh0bWwgPT4gY2FsbGJhY2sobnVsbCwgaHRtbCkpXG4gICAgICAgIC5jYXRjaChjYWxsYmFjayk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBHZXQgcHJvdmlkZXJzIG9mIHRoZSByZXF1ZXN0IGFuZCByZXNwb25zZVxuICovXG5mdW5jdGlvbiBnZXRSZXFSZXNQcm92aWRlcnMocmVxOiBSZXF1ZXN0LCByZXM/OiBSZXNwb25zZSk6IFN0YXRpY1Byb3ZpZGVyW10ge1xuICBjb25zdCBwcm92aWRlcnM6IFN0YXRpY1Byb3ZpZGVyW10gPSBbXG4gICAge1xuICAgICAgcHJvdmlkZTogUkVRVUVTVCxcbiAgICAgIHVzZVZhbHVlOiByZXFcbiAgICB9XG4gIF07XG4gIGlmIChyZXMpIHtcbiAgICBwcm92aWRlcnMucHVzaCh7XG4gICAgICBwcm92aWRlOiBSRVNQT05TRSxcbiAgICAgIHVzZVZhbHVlOiByZXNcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBwcm92aWRlcnM7XG59XG5cbi8qKlxuICogR2V0IHRoZSBkb2N1bWVudCBhdCB0aGUgZmlsZSBwYXRoXG4gKi9cbmZ1bmN0aW9uIGdldERvY3VtZW50KGZpbGVQYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gdGVtcGxhdGVDYWNoZVtmaWxlUGF0aF0gPSB0ZW1wbGF0ZUNhY2hlW2ZpbGVQYXRoXSB8fCBmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgpLnRvU3RyaW5nKCk7XG59XG4iXX0=