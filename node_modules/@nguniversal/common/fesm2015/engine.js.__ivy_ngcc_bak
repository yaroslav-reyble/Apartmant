import { readFile, readFileSync } from 'fs';
import { __awaiter } from 'tslib';
import { ResourceLoader } from '@angular/compiler';
import { CompilerFactory, NgModuleFactory } from '@angular/core';
import { platformDynamicServer, INITIAL_CONFIG, renderModuleFactory } from '@angular/platform-server';

/**
 * @fileoverview added by tsickle
 * Generated from: modules/common/engine/src/interfaces.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * These are the allowed options for the render
 * @record
 */
function RenderOptions() { }
if (false) {
    /** @type {?} */
    RenderOptions.prototype.bootstrap;
    /** @type {?|undefined} */
    RenderOptions.prototype.providers;
    /** @type {?|undefined} */
    RenderOptions.prototype.url;
    /** @type {?|undefined} */
    RenderOptions.prototype.document;
    /** @type {?|undefined} */
    RenderOptions.prototype.documentFilePath;
}

/**
 * @fileoverview added by tsickle
 * Generated from: modules/common/engine/src/file-loader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * ResourceLoader implementation for loading files
 */
class FileLoader {
    /**
     * @param {?} url
     * @return {?}
     */
    get(url) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            readFile(url, (/**
             * @param {?} err
             * @param {?} data
             * @return {?}
             */
            (err, data) => {
                if (err) {
                    return reject(err);
                }
                resolve(data.toString());
            }));
        }));
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: modules/common/engine/src/engine.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A common rendering engine utility. This abstracts the logic
 * for handling the platformServer compiler, the module cache, and
 * the document loader
 */
class CommonEngine {
    /**
     * @param {?=} moduleOrFactory
     * @param {?=} providers
     */
    constructor(moduleOrFactory, providers = []) {
        this.moduleOrFactory = moduleOrFactory;
        this.providers = providers;
        this.factoryCacheMap = new Map();
        this.templateCache = {};
    }
    /**
     * Return an instance of the platformServer compiler
     * @return {?}
     */
    getCompiler() {
        /** @type {?} */
        const compilerFactory = platformDynamicServer().injector.get(CompilerFactory);
        return compilerFactory.createCompiler([
            { providers: [{ provide: ResourceLoader, useClass: FileLoader, deps: [] }] }
        ]);
    }
    /**
     * Render an HTML document for a specific URL with specified
     * render options
     * @param {?} opts
     * @return {?}
     */
    render(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            // if opts.document dosen't exist then opts.documentFilePath must
            /** @type {?} */
            const doc = opts.document || (yield this.getDocument((/** @type {?} */ (opts.documentFilePath))));
            /** @type {?} */
            const extraProviders = [
                ...(opts.providers || []),
                ...(this.providers || []),
                {
                    provide: INITIAL_CONFIG,
                    useValue: {
                        document: doc,
                        url: opts.url
                    }
                }
            ];
            /** @type {?} */
            const moduleOrFactory = this.moduleOrFactory || opts.bootstrap;
            /** @type {?} */
            const factory = yield this.getFactory(moduleOrFactory);
            return renderModuleFactory(factory, { extraProviders });
        });
    }
    /**
     * Return the factory for a given engine instance
     * @param {?} moduleOrFactory
     * @return {?}
     */
    getFactory(moduleOrFactory) {
        return __awaiter(this, void 0, void 0, function* () {
            // If module has been compiled AoT
            if (moduleOrFactory instanceof NgModuleFactory) {
                return moduleOrFactory;
            }
            else {
                // we're in JIT mode
                /** @type {?} */
                const moduleFactory = this.factoryCacheMap.get(moduleOrFactory);
                // If module factory is cached
                if (moduleFactory) {
                    return moduleFactory;
                }
                // Compile the module and cache it
                /** @type {?} */
                const factory = yield this.getCompiler().compileModuleAsync(moduleOrFactory);
                this.factoryCacheMap.set(moduleOrFactory, factory);
                return factory;
            }
        });
    }
    /**
     * Retrieve the document from the cache or the filesystem
     * @private
     * @param {?} filePath
     * @return {?}
     */
    getDocument(filePath) {
        /** @type {?} */
        const doc = this.templateCache[filePath] = this.templateCache[filePath] ||
            readFileSync(filePath).toString();
        // As  promise so we can change the API later without breaking
        return Promise.resolve(doc);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    CommonEngine.prototype.factoryCacheMap;
    /**
     * @type {?}
     * @private
     */
    CommonEngine.prototype.templateCache;
    /**
     * @type {?}
     * @private
     */
    CommonEngine.prototype.moduleOrFactory;
    /**
     * @type {?}
     * @private
     */
    CommonEngine.prototype.providers;
}

/**
 * @fileoverview added by tsickle
 * Generated from: modules/common/engine/src/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: modules/common/engine/private_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: modules/common/engine/public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: modules/common/engine/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CommonEngine as ɵCommonEngine, FileLoader as ɵFileLoader };
//# sourceMappingURL=engine.js.map
