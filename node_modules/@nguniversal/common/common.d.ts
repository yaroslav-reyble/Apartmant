
import { ApplicationRef } from '@angular/core';
import { HttpEvent } from '@angular/common/http';
import { HttpHandler } from '@angular/common/http';
import { HttpInterceptor } from '@angular/common/http';
import { HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';
import { TransferState } from '@angular/platform-browser';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
export declare class StateTransferInitializerModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<StateTransferInitializerModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<StateTransferInitializerModule>;
}

/**
 * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP
 * calls from the server to the client application.
 */
export declare class TransferHttpCacheModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<TransferHttpCacheModule, never, [typeof ɵngcc1.BrowserTransferStateModule], never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<TransferHttpCacheModule>;
}


export declare function ɵnguniversal_modules_common_common_a(doc: Document): () => Promise<unknown>;

export declare class ɵTransferHttpCacheInterceptor implements HttpInterceptor {
    private transferState;
    private isCacheActive;
    private invalidateCacheEntry;
    private makeCacheKey;
    constructor(appRef: ApplicationRef, transferState: TransferState);
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ɵTransferHttpCacheInterceptor>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ɵTransferHttpCacheInterceptor>;
}

export { }

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmQudHMiLCJzb3VyY2VzIjpbImNvbW1vbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVNBOzs7QUFDQTs7Ozs7Ozs7O0FBT0E7Ozs7Ozs7Ozs7Ozs7O0FBWUEiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEFwcGxpY2F0aW9uUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBFdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSHR0cEhhbmRsZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEh0dHBJbnRlcmNlcHRvciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgVHJhbnNmZXJTdGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3RhdGVUcmFuc2ZlckluaXRpYWxpemVyTW9kdWxlIHtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIE5nTW9kdWxlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgU2VydmVyVHJhbnNmZXJIdHRwQ2FjaGVNb2R1bGVgIHRvIHRyYW5zZmVyIGNhY2hlZCBIVFRQXHJcbiAqIGNhbGxzIGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50IGFwcGxpY2F0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVHJhbnNmZXJIdHRwQ2FjaGVNb2R1bGUge1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gybVuZ3VuaXZlcnNhbF9tb2R1bGVzX2NvbW1vbl9jb21tb25fYShkb2M6IERvY3VtZW50KTogKCkgPT4gUHJvbWlzZTx1bmtub3duPjtcclxuXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIMm1VHJhbnNmZXJIdHRwQ2FjaGVJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XHJcbiAgICBwcml2YXRlIHRyYW5zZmVyU3RhdGU7XHJcbiAgICBwcml2YXRlIGlzQ2FjaGVBY3RpdmU7XHJcbiAgICBwcml2YXRlIGludmFsaWRhdGVDYWNoZUVudHJ5O1xyXG4gICAgcHJpdmF0ZSBtYWtlQ2FjaGVLZXk7XHJcbiAgICBjb25zdHJ1Y3RvcihhcHBSZWY6IEFwcGxpY2F0aW9uUmVmLCB0cmFuc2ZlclN0YXRlOiBUcmFuc2ZlclN0YXRlKTtcclxuICAgIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XHJcbn1cclxuXHJcbmV4cG9ydCB7IH1cclxuIl19