
import { Compiler } from '@angular/core';
import { NgModuleFactory } from '@angular/core';
import { ResourceLoader } from '@angular/compiler';
import { StaticProvider } from '@angular/core';
import { Type } from '@angular/core';

/**
 * A common rendering engine utility. This abstracts the logic
 * for handling the platformServer compiler, the module cache, and
 * the document loader
 */
export declare class ɵCommonEngine {
    private moduleOrFactory?;
    private providers;
    /** Return an instance of the platformServer compiler */
    getCompiler(): Compiler;
    private factoryCacheMap;
    private templateCache;
    constructor(moduleOrFactory?: Type<{}> | NgModuleFactory<{}> | undefined, providers?: StaticProvider[]);
    /**
     * Render an HTML document for a specific URL with specified
     * render options
     */
    render(opts: ɵRenderOptions): Promise<string>;
    /** Return the factory for a given engine instance */
    getFactory(moduleOrFactory: Type<{}> | NgModuleFactory<{}>): Promise<NgModuleFactory<{}>>;
    /** Retrieve the document from the cache or the filesystem */
    private getDocument;
}

/** ResourceLoader implementation for loading files */
export declare class ɵFileLoader implements ResourceLoader {
    get(url: string): Promise<string>;
}

/** These are the allowed options for the render */
export declare interface ɵRenderOptions {
    bootstrap: Type<{}> | NgModuleFactory<{}>;
    providers?: StaticProvider[];
    url?: string;
    document?: string;
    documentFilePath?: string;
}

export { }

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5naW5lLmQudHMiLCJzb3VyY2VzIjpbImVuZ2luZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBDb21waWxlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ01vZHVsZUZhY3RvcnkgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUmVzb3VyY2VMb2FkZXIgfSBmcm9tICdAYW5ndWxhci9jb21waWxlcic7XHJcbmltcG9ydCB7IFN0YXRpY1Byb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBBIGNvbW1vbiByZW5kZXJpbmcgZW5naW5lIHV0aWxpdHkuIFRoaXMgYWJzdHJhY3RzIHRoZSBsb2dpY1xyXG4gKiBmb3IgaGFuZGxpbmcgdGhlIHBsYXRmb3JtU2VydmVyIGNvbXBpbGVyLCB0aGUgbW9kdWxlIGNhY2hlLCBhbmRcclxuICogdGhlIGRvY3VtZW50IGxvYWRlclxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgybVDb21tb25FbmdpbmUge1xyXG4gICAgcHJpdmF0ZSBtb2R1bGVPckZhY3Rvcnk/O1xyXG4gICAgcHJpdmF0ZSBwcm92aWRlcnM7XHJcbiAgICAvKiogUmV0dXJuIGFuIGluc3RhbmNlIG9mIHRoZSBwbGF0Zm9ybVNlcnZlciBjb21waWxlciAqL1xyXG4gICAgZ2V0Q29tcGlsZXIoKTogQ29tcGlsZXI7XHJcbiAgICBwcml2YXRlIGZhY3RvcnlDYWNoZU1hcDtcclxuICAgIHByaXZhdGUgdGVtcGxhdGVDYWNoZTtcclxuICAgIGNvbnN0cnVjdG9yKG1vZHVsZU9yRmFjdG9yeT86IFR5cGU8e30+IHwgTmdNb2R1bGVGYWN0b3J5PHt9PiB8IHVuZGVmaW5lZCwgcHJvdmlkZXJzPzogU3RhdGljUHJvdmlkZXJbXSk7XHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBhbiBIVE1MIGRvY3VtZW50IGZvciBhIHNwZWNpZmljIFVSTCB3aXRoIHNwZWNpZmllZFxyXG4gICAgICogcmVuZGVyIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgcmVuZGVyKG9wdHM6IMm1UmVuZGVyT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPjtcclxuICAgIC8qKiBSZXR1cm4gdGhlIGZhY3RvcnkgZm9yIGEgZ2l2ZW4gZW5naW5lIGluc3RhbmNlICovXHJcbiAgICBnZXRGYWN0b3J5KG1vZHVsZU9yRmFjdG9yeTogVHlwZTx7fT4gfCBOZ01vZHVsZUZhY3Rvcnk8e30+KTogUHJvbWlzZTxOZ01vZHVsZUZhY3Rvcnk8e30+PjtcclxuICAgIC8qKiBSZXRyaWV2ZSB0aGUgZG9jdW1lbnQgZnJvbSB0aGUgY2FjaGUgb3IgdGhlIGZpbGVzeXN0ZW0gKi9cclxuICAgIHByaXZhdGUgZ2V0RG9jdW1lbnQ7XHJcbn1cclxuXHJcbi8qKiBSZXNvdXJjZUxvYWRlciBpbXBsZW1lbnRhdGlvbiBmb3IgbG9hZGluZyBmaWxlcyAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyDJtUZpbGVMb2FkZXIgaW1wbGVtZW50cyBSZXNvdXJjZUxvYWRlciB7XHJcbiAgICBnZXQodXJsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz47XHJcbn1cclxuXHJcbi8qKiBUaGVzZSBhcmUgdGhlIGFsbG93ZWQgb3B0aW9ucyBmb3IgdGhlIHJlbmRlciAqL1xyXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgybVSZW5kZXJPcHRpb25zIHtcclxuICAgIGJvb3RzdHJhcDogVHlwZTx7fT4gfCBOZ01vZHVsZUZhY3Rvcnk8e30+O1xyXG4gICAgcHJvdmlkZXJzPzogU3RhdGljUHJvdmlkZXJbXTtcclxuICAgIHVybD86IHN0cmluZztcclxuICAgIGRvY3VtZW50Pzogc3RyaW5nO1xyXG4gICAgZG9jdW1lbnRGaWxlUGF0aD86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IHsgfVxyXG4iXX0=