import { __decorate, __metadata, __values } from "tslib";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { HTTP_INTERCEPTORS, HttpHeaders, HttpResponse } from '@angular/common/http';
import { ApplicationRef, Injectable, NgModule } from '@angular/core';
import { BrowserTransferStateModule, TransferState, makeStateKey } from '@angular/platform-browser';
import { of as observableOf } from 'rxjs';
import { filter, take, tap } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
function getHeadersMap(headers) {
    var e_1, _a;
    var headersMap = {};
    try {
        for (var _b = __values(headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            headersMap[key] = headers.getAll(key);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return headersMap;
}
var TransferHttpCacheInterceptor = /** @class */ (function () {
    function TransferHttpCacheInterceptor(appRef, transferState) {
        var _this = this;
        this.transferState = transferState;
        this.isCacheActive = true;
        // Stop using the cache if the application has stabilized, indicating initial rendering is
        // complete.
        // tslint:disable-next-line: no-floating-promises
        appRef.isStable
            .pipe(filter(function (isStable) { return isStable; }), take(1)).toPromise()
            .then(function () { _this.isCacheActive = false; });
    }
    TransferHttpCacheInterceptor.prototype.invalidateCacheEntry = function (url) {
        var _this = this;
        Object.keys(this.transferState['store'])
            .forEach(function (key) { return key.includes(url) ? _this.transferState.remove(makeStateKey(key)) : null; });
    };
    TransferHttpCacheInterceptor.prototype.makeCacheKey = function (method, url, params) {
        // make the params encoded same as a url so it's easy to identify
        var encodedParams = params.keys().sort().map(function (k) { return k + "=" + params.get(k); }).join('&');
        var key = (method === 'GET' ? 'G.' : 'H.') + url + '?' + encodedParams;
        return makeStateKey(key);
    };
    TransferHttpCacheInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        // Stop using the cache if there is a mutating call.
        if (req.method !== 'GET' && req.method !== 'HEAD') {
            this.isCacheActive = false;
            this.invalidateCacheEntry(req.url);
        }
        if (!this.isCacheActive) {
            // Cache is no longer active. Pass the request through.
            return next.handle(req);
        }
        var storeKey = this.makeCacheKey(req.method, req.url, req.params);
        if (this.transferState.hasKey(storeKey)) {
            // Request found in cache. Respond using it.
            var response = this.transferState.get(storeKey, {});
            return observableOf(new HttpResponse({
                body: response.body,
                headers: new HttpHeaders(response.headers),
                status: response.status,
                statusText: response.statusText,
                url: response.url,
            }));
        }
        else {
            // Request not found in cache. Make the request and cache it.
            var httpEvent = next.handle(req);
            return httpEvent
                .pipe(tap(function (event) {
                if (event instanceof HttpResponse) {
                    _this.transferState.set(storeKey, {
                        body: event.body,
                        headers: getHeadersMap(event.headers),
                        status: event.status,
                        statusText: event.statusText,
                        url: event.url || '',
                    });
                }
            }));
        }
    };
    TransferHttpCacheInterceptor = __decorate([ __metadata("design:paramtypes", [ApplicationRef, TransferState])
    ], TransferHttpCacheInterceptor);
TransferHttpCacheInterceptor.ɵfac = function TransferHttpCacheInterceptor_Factory(t) { return new (t || TransferHttpCacheInterceptor)(ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc1.TransferState)); };
TransferHttpCacheInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TransferHttpCacheInterceptor, factory: function (t) { return TransferHttpCacheInterceptor.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TransferHttpCacheInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ApplicationRef }, { type: ɵngcc1.TransferState }]; }, null); })();
    return TransferHttpCacheInterceptor;
}());
export { TransferHttpCacheInterceptor };
/**
 * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP
 * calls from the server to the client application.
 */
var TransferHttpCacheModule = /** @class */ (function () {
    function TransferHttpCacheModule() {
    }
TransferHttpCacheModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TransferHttpCacheModule });
TransferHttpCacheModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TransferHttpCacheModule_Factory(t) { return new (t || TransferHttpCacheModule)(); }, providers: [
        TransferHttpCacheInterceptor,
        { provide: HTTP_INTERCEPTORS, useExisting: TransferHttpCacheInterceptor, multi: true },
    ], imports: [[BrowserTransferStateModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TransferHttpCacheModule, { imports: function () { return [BrowserTransferStateModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TransferHttpCacheModule, [{
        type: NgModule,
        args: [{
                imports: [BrowserTransferStateModule],
                providers: [
                    TransferHttpCacheInterceptor,
                    { provide: HTTP_INTERCEPTORS, useExisting: TransferHttpCacheInterceptor, multi: true },
                ]
            }]
    }], function () { return []; }, null); })();
    return TransferHttpCacheModule;
}());
export { TransferHttpCacheModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,