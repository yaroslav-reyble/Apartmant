/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/common/schematics/migrations/update-9/index", ["require", "exports", "@angular-devkit/core", "@angular-devkit/schematics", "@angular-devkit/schematics/tasks", "@schematics/angular/utility/ast-utils", "@schematics/angular/utility/dependencies", "@schematics/angular/utility/workspace", "@schematics/angular/utility/workspace-models", "typescript"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const core_1 = require("@angular-devkit/core");
    const schematics_1 = require("@angular-devkit/schematics");
    const tasks_1 = require("@angular-devkit/schematics/tasks");
    const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
    const dependencies_1 = require("@schematics/angular/utility/dependencies");
    const workspace_1 = require("@schematics/angular/utility/workspace");
    const workspace_models_1 = require("@schematics/angular/utility/workspace-models");
    const ts = require("typescript");
    function version9UpdateRule(collectionPath) {
        return (host) => __awaiter(this, void 0, void 0, function* () {
            return schematics_1.chain([
                backupPackageScriptsRule(),
                updateProjectsStructureRule(collectionPath),
                (tree, context) => {
                    const packageChanges = tree.actions.some(a => a.path.endsWith('/package.json'));
                    if (context && packageChanges) {
                        context.addTask(new tasks_1.NodePackageInstallTask());
                    }
                },
            ]);
        });
    }
    exports.version9UpdateRule = version9UpdateRule;
    function backupPackageScriptsRule() {
        return tree => {
            // Remove old scripts in 'package.json'
            const pkgPath = '/package.json';
            const buffer = tree.read(pkgPath);
            if (!buffer) {
                throw new schematics_1.SchematicsException('Could not find package.json');
            }
            const pkg = JSON.parse(buffer.toString());
            const scripts = pkg.scripts;
            if (!scripts) {
                return;
            }
            // Backup script targets
            [
                'compile:server',
                'build:ssr',
                'serve:ssr',
                'build:client-and-server-bundles',
            ].forEach(key => {
                const keyBackup = `${key}_bak`;
                const scriptValue = scripts[key];
                // Check if script target exists and it has not been already backed up
                if (scriptValue && !scripts[keyBackup]) {
                    scripts[keyBackup] = scriptValue;
                    scripts[key] = undefined;
                }
            });
            tree.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
        };
    }
    function updateProjectsStructureRule(collectionPath) {
        return (tree) => __awaiter(this, void 0, void 0, function* () {
            const workspace = yield workspace_1.getWorkspace(tree);
            const installRules = [];
            for (const [projectName, projectDefinition] of workspace.projects) {
                const serverTarget = projectDefinition.targets.get('server');
                if (!serverTarget || serverTarget.builder !== workspace_models_1.Builders.Server) {
                    // Only process those targets which have a known builder for the CLI
                    continue;
                }
                const root = core_1.normalize(projectDefinition.root);
                // Backup old files
                [
                    'server.ts',
                    'webpack.server.config.js',
                ]
                    .map(f => core_1.join(root, f))
                    .filter(f => tree.exists(f))
                    .forEach(f => tree.rename(f, `${f}.bak`));
                const installOptions = {
                    clientProject: projectName,
                    // Skip install, so we only do one for the entire workspace at the end.
                    skipInstall: true,
                };
                // Run the install schematic again so that we re-create the entire stucture.
                installRules.push(removeModuleMapNgfactoryLoaderRule(core_1.normalize(projectDefinition.sourceRoot)), collectionPath
                    ? schematics_1.externalSchematic(collectionPath, 'ng-add', installOptions)
                    : schematics_1.noop());
            }
            return schematics_1.chain(installRules);
        });
    }
    function removeModuleMapNgfactoryLoaderRule(sourceRoot) {
        return tree => {
            const moduleMapLoaderPackageName = '@nguniversal/module-map-ngfactory-loader';
            // Strip BOM as otherwise TSC methods (Ex: getWidth) will return an offset which
            // which breaks the CLI UpdateRecorder.
            // See: https://github.com/angular/angular/pull/30719
            const createSourceFile = (path) => ts.createSourceFile(path, tree.read(path).toString().replace(/^\uFEFF/, ''), ts.ScriptTarget.Latest, true);
            // Update main.server file
            const mainServerPath = core_1.join(sourceRoot, 'main.server.ts');
            if (tree.exists(mainServerPath)) {
                const recorder = tree.beginUpdate(mainServerPath);
                // Remove exports of '@nguniversal/module-map-ngfactory-loader'
                createSourceFile(mainServerPath)
                    .statements
                    .filter(s => (ts.isExportDeclaration(s) &&
                    s.moduleSpecifier &&
                    ts.isStringLiteral(s.moduleSpecifier) &&
                    s.moduleSpecifier.text === moduleMapLoaderPackageName))
                    .forEach(node => {
                    const index = node.getFullStart();
                    const length = node.getFullWidth();
                    recorder.remove(index, length);
                });
                tree.commitUpdate(recorder);
            }
            // Update app.server.module file
            const appServerModule = core_1.join(sourceRoot, 'app/app.server.module.ts');
            if (tree.exists(appServerModule)) {
                const recorder = tree.beginUpdate(appServerModule);
                const appServerSourceFile = createSourceFile(appServerModule);
                // Remove imports of '@nguniversal/module-map-ngfactory-loader'
                appServerSourceFile
                    .statements
                    .filter(s => (ts.isImportDeclaration(s) &&
                    s.moduleSpecifier &&
                    ts.isStringLiteral(s.moduleSpecifier) &&
                    s.moduleSpecifier.text === moduleMapLoaderPackageName))
                    .forEach(node => {
                    const index = node.getFullStart();
                    const length = node.getFullWidth();
                    recorder.remove(index, length);
                });
                // Create a TS printer to get the text
                const printer = ts.createPrinter();
                // Remove 'ModuleMapLoaderModule' from 'NgModule' imports
                ast_utils_1.getDecoratorMetadata(appServerSourceFile, 'NgModule', '@angular/core')
                    .forEach((metadata) => {
                    const matchingProperties = ast_utils_1.getMetadataField(metadata, 'imports');
                    if (!matchingProperties) {
                        return;
                    }
                    const assignment = matchingProperties[0];
                    if (!ts.isArrayLiteralExpression(assignment.initializer)) {
                        return;
                    }
                    const arrayLiteral = assignment.initializer;
                    const newImports = arrayLiteral.elements
                        .filter(n => !(ts.isIdentifier(n) && n.text === 'ModuleMapLoaderModule'));
                    if (arrayLiteral.elements.length !== newImports.length) {
                        const newImportsText = printer.printNode(ts.EmitHint.Unspecified, ts.updateArrayLiteral(arrayLiteral, newImports), appServerSourceFile);
                        const index = arrayLiteral.getStart();
                        const length = arrayLiteral.getWidth();
                        recorder
                            .remove(index, length)
                            .insertLeft(index, newImportsText);
                    }
                });
                tree.commitUpdate(recorder);
            }
            // Remove package dependency
            dependencies_1.removePackageJsonDependency(tree, moduleMapLoaderPackageName);
        };
    }
});
//# sourceMappingURL=data:application/json;base64,