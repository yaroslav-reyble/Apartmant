{"version":3,"file":"gorniv-ngx-universal.js","sources":["ng://@gorniv/ngx-universal/transfer-http/transfer-http.service.ts","ng://@gorniv/ngx-universal/transfer-http/transfer-http.module.ts","ng://@gorniv/ngx-universal/cookie/utils.ts","ng://@gorniv/ngx-universal/cookie/cookie-options-provider.ts","ng://@gorniv/ngx-universal/cookie/cookie.service.ts","ng://@gorniv/ngx-universal/cookie/tokens.ts","ng://@gorniv/ngx-universal/cookie/cookie-backend.service.ts","ng://@gorniv/ngx-universal/cookie/cookie.factory.ts","ng://@gorniv/ngx-universal/cookie/cookie.module.ts","ng://@gorniv/ngx-universal/gorniv-ngx-universal.ts"],"sourcesContent":["import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { TransferState, StateKey, makeStateKey } from '@angular/platform-browser';\nimport { Observable, from } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class TransferHttpService {\n  constructor(\n    protected transferState: TransferState,\n    private httpClient: HttpClient,\n    @Inject(PLATFORM_ID) private platformId: Object,\n  ) {}\n\n  request<T>(\n    method: string,\n    uri: string | Request,\n    options?: {\n      body?: any;\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>(method, uri, options, (method: string, url: string, options: any) => {\n      return this.httpClient.request<T>(method, url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `get` http method.\n   */\n  get<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>('get', url, options, (_method: string, url: string, options: any) => {\n      return this.httpClient.get<T>(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `post` http method.\n   */\n  post<T>(\n    url: string,\n    body: any,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData<T>(\n      'post',\n      url,\n      body,\n      options,\n      // tslint:disable-next-line:no-shadowed-variable\n      (_method: string, url: string, body: any, options: any) => {\n        return this.httpClient.post<T>(url, body, options);\n      },\n    );\n  }\n\n  /**\n   * Performs a request with `put` http method.\n   */\n  put<T>(\n    url: string,\n    _body: any,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData<T>(\n      'put',\n      url,\n      _body,\n      options,\n      (_method: string, url: string, _body: any, options: any) => {\n        return this.httpClient.put<T>(url, _body, options);\n      },\n    );\n  }\n\n  /**\n   * Performs a request with `delete` http method.\n   */\n  delete<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>('delete', url, options, (_method: string, url: string, options: any) => {\n      return this.httpClient.delete<T>(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `patch` http method.\n   */\n  patch<T>(\n    url: string,\n    body: any,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getPostData<T>(\n      'patch',\n      url,\n      body,\n      options,\n      // tslint:disable-next-line:no-shadowed-variable\n      (_method: string, url: string, body: any, options: any): Observable<any> => {\n        return this.httpClient.patch<T>(url, body, options);\n      },\n    );\n  }\n\n  /**\n   * Performs a request with `head` http method.\n   */\n  head<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>('head', url, options, (_method: string, url: string, options: any) => {\n      return this.httpClient.head<T>(url, options);\n    });\n  }\n\n  /**\n   * Performs a request with `options` http method.\n   */\n  options<T>(\n    url: string,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T> {\n    // tslint:disable-next-line:no-shadowed-variable\n    return this.getData<T>(\n      'options',\n      url,\n      options,\n      // tslint:disable-next-line:no-shadowed-variable\n      (_method: string, url: string, options: any) => {\n        return this.httpClient.options<T>(url, options);\n      },\n    );\n  }\n\n  // tslint:disable-next-line:max-line-length\n  private getData<T>(\n    method: string,\n    uri: string | Request,\n    options: any,\n    callback: (method: string, uri: string | Request, options: any) => Observable<any>,\n  ): Observable<T> {\n    let url = uri;\n\n    if (typeof uri !== 'string') {\n      url = uri.url;\n    }\n\n    const tempKey = url + (options ? JSON.stringify(options) : '');\n    const key = makeStateKey<T>(tempKey);\n    try {\n      return this.resolveData<T>(key);\n    } catch (e) {\n      return callback(method, uri, options).pipe(\n        tap((data: T) => {\n          if (isPlatformBrowser(this.platformId)) {\n            // Client only code.\n            // nothing;\n          }\n          if (isPlatformServer(this.platformId)) {\n            this.setCache<T>(key, data);\n          }\n        }),\n      );\n    }\n  }\n\n  private getPostData<T>(\n    _method: string,\n    uri: string | Request,\n    body: any,\n    options: any,\n    callback: (method: string, uri: string | Request, body: any, options: any) => Observable<any>,\n  ): Observable<T> {\n    let url = uri;\n\n    if (typeof uri !== 'string') {\n      url = uri.url;\n    }\n\n    const tempKey =\n      url + (body ? JSON.stringify(body) : '') + (options ? JSON.stringify(options) : '');\n    const key = makeStateKey<T>(tempKey);\n\n    try {\n      return this.resolveData<T>(key);\n    } catch (e) {\n      return callback(_method, uri, body, options).pipe(\n        tap((data: T) => {\n          if (isPlatformBrowser(this.platformId)) {\n            // Client only code.\n            // nothing;\n          }\n          if (isPlatformServer(this.platformId)) {\n            this.setCache<T>(key, data);\n          }\n        }),\n      );\n    }\n  }\n\n  private resolveData<T>(key: StateKey<T>): Observable<T> {\n    const data = this.getFromCache<T>(key);\n\n    if (!data) {\n      throw new Error();\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Client only code.\n      this.transferState.remove(key);\n    }\n    if (isPlatformServer(this.platformId)) {\n      // Server only code.\n    }\n\n    return from(Promise.resolve<T>(data));\n  }\n\n  private setCache<T>(key: StateKey<T>, data: T): void {\n    return this.transferState.set<T>(key, data);\n  }\n\n  private getFromCache<T>(key: StateKey<T>): T {\n    return this.transferState.get<T>(key, null);\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { TransferHttpService } from './transfer-http.service';\n\n@NgModule({\n  providers: [TransferHttpService],\n})\nexport class TransferHttpModule {}\n","import { CookieOptions } from './cookie-options.model';\n\nexport function isBlank(obj: any): boolean {\n  return obj === undefined || obj === null;\n}\n\nexport function isPresent(obj: any): boolean {\n  return obj !== undefined && obj !== null;\n}\n\nexport function isString(obj: any): obj is string {\n  return typeof obj === 'string';\n}\n\nexport function mergeOptions(oldOptions: CookieOptions, newOptions?: CookieOptions): CookieOptions {\n  if (!newOptions) {\n    return oldOptions;\n  }\n  return {\n    path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,\n    domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,\n    expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,\n    secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,\n    httpOnly: isPresent(newOptions.httpOnly) ? newOptions.httpOnly : oldOptions.httpOnly,\n    storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded,\n  };\n}\n\nexport function safeDecodeURIComponent(str: string) {\n  try {\n    return decodeURIComponent(str);\n  } catch (e) {\n    return str;\n  }\n}\n\nexport function safeJsonParse(str: string) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return str;\n  }\n}\n","import { Inject, Injectable, InjectionToken, Injector } from '@angular/core';\nimport { APP_BASE_HREF } from '@angular/common';\n\nimport { CookieOptions } from './cookie-options.model';\nimport { mergeOptions } from './utils';\n\nexport const COOKIE_OPTIONS = new InjectionToken<CookieOptions>('COOKIE_OPTIONS');\n\n@Injectable()\nexport class CookieOptionsProvider {\n\n  private defaultOptions: CookieOptions;\n  private _options: CookieOptions;\n\n  constructor(@Inject(COOKIE_OPTIONS) options: CookieOptions = {},\n              private _injector: Injector) {\n    this.defaultOptions = {\n      path: this._injector.get(APP_BASE_HREF, '/'),\n      domain: null,\n      expires: null,\n      secure: false,\n      httpOnly: false\n    };\n    this._options = mergeOptions(this.defaultOptions, options);\n  }\n\n  get options(): CookieOptions {\n    return this._options;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { CookieOptionsProvider } from './cookie-options-provider';\nimport { CookieOptions } from './cookie-options.model';\nimport { isBlank, isString, mergeOptions, safeDecodeURIComponent, safeJsonParse } from './utils';\n\ndeclare interface Document {\n  cookie: string;\n}\ndeclare const document: Document;\n\nexport interface ICookieService {\n  get(key: string): string;\n  getObject(key: string): Object;\n  getAll(): Object;\n  put(key: string, value: string, options?: CookieOptions): void;\n  putObject(key: string, value: Object, options?: CookieOptions): void;\n  remove(key: string, options?: CookieOptions): void;\n  removeAll(options?: CookieOptions): void;\n}\n\n@Injectable()\nexport class CookieService implements ICookieService {\n\n  protected options: CookieOptions;\n\n  protected get cookieString(): string {\n    return document.cookie || '';\n  }\n\n  protected set cookieString(val: string) {\n    document.cookie = val;\n  }\n\n  constructor(private _optionsProvider: CookieOptionsProvider) {\n    this.options = this._optionsProvider.options;\n  }\n\n  /**\n   * @name CookieService#get\n   *\n   * @description\n   * Returns the value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Raw cookie value.\n   */\n  get(key: string): string {\n    return (<any>this._cookieReader())[key];\n  }\n\n  /**\n   * @name CookieService#getObject\n   *\n   * @description\n   * Returns the deserialized value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Deserialized cookie value.\n   */\n  getObject(key: string): Object {\n    const value = this.get(key);\n    return value ? safeJsonParse(value) : value;\n  }\n\n  /**\n   * @name CookieService#getAll\n   *\n   * @description\n   * Returns a key value object with all the cookies.\n   *\n   * @returns All cookies\n   */\n  getAll(): Object {\n    return <any>this._cookieReader();\n  }\n\n  /**\n   * @name CookieService#put\n   *\n   * @description\n   * Sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Raw value to be stored.\n   * @param options (Optional) Options object.\n   */\n  put(key: string, value: string, options?: CookieOptions) {\n    this._cookieWriter()(key, value, options);\n  }\n\n  /**\n   * @name CookieService#putObject\n   *\n   * @description\n   * Serializes and sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Value to be stored.\n   * @param options (Optional) Options object.\n   */\n  putObject(key: string, value: Object, options?: CookieOptions) {\n    this.put(key, JSON.stringify(value), options);\n  }\n\n  /**\n   * @name CookieService#remove\n   *\n   * @description\n   * Remove given cookie.\n   *\n   * @param key Id of the key-value pair to delete.\n   * @param options (Optional) Options object.\n   */\n  remove(key: string, options?: CookieOptions): void {\n    this._cookieWriter()(key, undefined, options);\n  }\n\n  /**\n   * @name CookieService#removeAll\n   *\n   * @description\n   * Remove all cookies.\n   */\n  removeAll(options?: CookieOptions): void {\n    const cookies = this.getAll();\n    Object.keys(cookies).forEach(key => {\n      this.remove(key, options);\n    });\n  }\n\n  private _cookieReader(): Object {\n    let lastCookies = {};\n    let lastCookieString = '';\n    let cookieArray: string[], cookie: string, i: number, index: number, name: string;\n    const currentCookieString = this.cookieString;\n    if (currentCookieString !== lastCookieString) {\n      lastCookieString = currentCookieString;\n      cookieArray = lastCookieString.split('; ');\n      lastCookies = {};\n      for (i = 0; i < cookieArray.length; i++) {\n        cookie = cookieArray[i];\n        index = cookie.indexOf('=');\n        if (index > 0) {  // ignore nameless cookies\n          name = safeDecodeURIComponent(cookie.substring(0, index));\n          // the first value that is seen for a cookie is the most\n          // specific one.  values for the same cookie name that\n          // follow are for less specific paths.\n          if (isBlank((<any>lastCookies)[name])) {\n            (<any>lastCookies)[name] = safeDecodeURIComponent(cookie.substring(index + 1));\n          }\n        }\n      }\n    }\n    return lastCookies;\n  }\n\n  private _cookieWriter() {\n    const that = this;\n\n    return function (name: string, value: string, options?: CookieOptions) {\n      that.cookieString = that._buildCookieString(name, value, options);\n    };\n  }\n\n  private _buildCookieString(name: string, value: string, options?: CookieOptions): string {\n    const opts: CookieOptions = mergeOptions(this.options, options);\n    let expires: any = opts.expires;\n    if (isBlank(value)) {\n      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n      value = '';\n    }\n    if (isString(expires)) {\n      expires = new Date(expires);\n    }\n    const cookieValue = opts.storeUnencoded ? value : encodeURIComponent(value);\n    let str = encodeURIComponent(name) + '=' + cookieValue;\n    str += opts.path ? ';path=' + opts.path : '';\n    str += opts.domain ? ';domain=' + opts.domain : '';\n    str += expires ? ';expires=' + expires.toUTCString() : '';\n    str += opts.secure ? ';secure' : '';\n    str += opts.httpOnly ? '; HttpOnly' : '';\n\n    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n    // - 300 cookies\n    // - 20 cookies per unique domain\n    // - 4096 bytes per cookie\n    const cookieLength = str.length + 1;\n    if (cookieLength > 4096) {\n      console.log(`Cookie \\'${name}\\' possibly not set or overflowed because it was too large (${cookieLength} > 4096 bytes)!`);\n    }\n    return str;\n  }\n}\n","export class NgxRequest {\n\n}\n\nexport class NgxResponse {\n\n}\n","import { Inject, Injectable } from '@angular/core';\n\nimport { CookieService } from './cookie.service';\nimport { CookieOptionsProvider } from './cookie-options-provider';\nimport { CookieOptions } from './cookie-options.model';\nimport { NgxRequest, NgxResponse } from './tokens';\n\n@Injectable()\nexport class CookieBackendService extends CookieService {\n  constructor(\n    @Inject(NgxRequest) private request: any,\n    @Inject(NgxResponse) private response: any,\n    _optionsProvider: CookieOptionsProvider,\n  ) {\n    super(_optionsProvider);\n  }\n\n  protected get cookieString(): string {\n    return this.request.cookie || this.request.headers['cookie'] || '';\n  }\n\n  protected set cookieString(val: string) {\n    this.request.cookie = val;\n    this.response.cookie = val;\n  }\n\n  put(key: string, value: string, options: CookieOptions = {}): void {\n    let findKey = false;\n    let newCookie = Object.keys(this.getAll())\n      // tslint:disable-next-line: no-shadowed-variable\n      .map((keyItem) => {\n        if (keyItem === key) {\n          findKey = true;\n          return `${key}=${value}`;\n        }\n        return `${keyItem}=${this.get(keyItem)}`;\n      })\n      .join('; ');\n    if (!findKey) {\n      newCookie += `; ${key}=${value}`;\n    }\n    this.request.headers.cookie = newCookie;\n    // not sure\n    this.cookieString = newCookie;\n  }\n\n  remove(key: string, options?: CookieOptions): void {\n    const newCookie = Object.keys(this.getAll())\n      // tslint:disable-next-line: no-shadowed-variable\n      .map((keyItem) => {\n        if (keyItem === key) {\n          return '';\n        }\n        return `${keyItem}=${this.get(keyItem)}`;\n      })\n      .join('; ');\n    this.request.headers.cookie = newCookie;\n    // not sure\n    this.cookieString = newCookie;\n  }\n}\n","import { CookieService } from './cookie.service';\nimport { CookieOptionsProvider } from './cookie-options-provider';\n\nexport function cookieServiceFactory(cookieOptionsProvider: CookieOptionsProvider): CookieService {\n  return new CookieService(cookieOptionsProvider);\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CookieOptionsProvider, COOKIE_OPTIONS } from './cookie-options-provider';\nimport { CookieService } from './cookie.service';\nimport { CookieOptions } from './cookie-options.model';\nimport { cookieServiceFactory } from './cookie.factory';\n\n@NgModule({\n  providers: [CookieOptionsProvider]\n})\nexport class CookieModule {\n  /**\n   * Use this method in your root module to provide the CookieService\n   */\n  static forRoot(options: CookieOptions = {}): ModuleWithProviders<CookieModule> {\n    return {\n      ngModule: CookieModule,\n      providers: [\n        {provide: COOKIE_OPTIONS, useValue: options},\n        {provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider]}\n      ]\n    };\n  }\n\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(options: CookieOptions = {}): ModuleWithProviders<CookieModule> {\n    return {\n      ngModule: CookieModule,\n      providers: [\n        {provide: COOKIE_OPTIONS, useValue: options},\n        {provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider]}\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}