// https://github.com/angular/angular/issues/15776#issuecomment-291862953
import { __decorate, __metadata, __param } from "tslib";
import { Injectable, RendererFactory2, ViewEncapsulation, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
let LinkService = class LinkService {
    constructor(rendererFactory, document) {
        this.rendererFactory = rendererFactory;
        this.document = document;
    }
    /**
     * Inject the State into the bottom of the <head>
     */
    addTag(tag, forceCreation) {
        try {
            const renderer = this.rendererFactory.createRenderer(this.document, {
                id: '-1',
                encapsulation: ViewEncapsulation.None,
                styles: [],
                data: {},
            });
            const link = renderer.createElement('link');
            const head = this.document.head;
            const selector = this._parseSelector(tag);
            if (head === null) {
                throw new Error('<head> not found within DOCUMENT.');
            }
            Object.keys(tag).forEach((prop) => {
                return renderer.setAttribute(link, prop, tag[prop]);
            });
            // [TODO]: get them to update the existing one (if it exists) ?
            renderer.appendChild(head, link);
        }
        catch (e) {
            console.error('Error within linkService : ', e);
        }
    }
    _parseSelector(tag) {
        // Possibly re-work this
        const attr = tag.rel ? 'rel' : 'hreflang';
        return `${attr}="${tag[attr]}"`;
    }
};
LinkService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
LinkService = __decorate([
    Injectable({
        providedIn: 'root',
    })
    /*
     * -- LinkService --        [Temporary]
     * @MarkPieszak
     *
     * Similar to Meta service but made to handle <link> creation for SEO purposes
     * -- NOTE: Soon there will be an overall DocumentService within Angular that handles Meta/Link everything
     */
    ,
    Injectable(),
    __param(1, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [RendererFactory2, Object])
], LinkService);
export { LinkService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdvcm5pdi9uZ3gtdW5pdmVyc2FsLyIsInNvdXJjZXMiOlsibGluay9saW5rLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseUVBQXlFOztBQUV6RSxPQUFPLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFjM0MsSUFBYSxXQUFXLEdBQXhCLE1BQWEsV0FBVztJQUN0QixZQUNVLGVBQWlDLEVBQ2YsUUFBYztRQURoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBa0I7UUFDZixhQUFRLEdBQVIsUUFBUSxDQUFNO0lBQ3ZDLENBQUM7SUFFSjs7T0FFRztJQUNILE1BQU0sQ0FBQyxHQUFtQixFQUFFLGFBQXVCO1FBQ2pELElBQUk7WUFDRixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNsRSxFQUFFLEVBQUUsSUFBSTtnQkFDUixhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsSUFBSSxFQUFFLEVBQUU7YUFDVCxDQUFDLENBQUM7WUFFSCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzVDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQ2hDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFMUMsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO2dCQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7YUFDdEQ7WUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO2dCQUN4QyxPQUFPLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN0RCxDQUFDLENBQUMsQ0FBQztZQUVILCtEQUErRDtZQUMvRCxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNsQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNqRDtJQUNILENBQUM7SUFFTyxjQUFjLENBQUMsR0FBbUI7UUFDeEMsd0JBQXdCO1FBQ3hCLE1BQU0sSUFBSSxHQUFXLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1FBQ2xELE9BQU8sR0FBRyxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEMsQ0FBQztDQUNGLENBQUE7O1lBeEM0QixnQkFBZ0I7NENBQ3hDLE1BQU0sU0FBQyxRQUFROztBQUhQLFdBQVc7SUFadkIsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztJQUNGOzs7Ozs7T0FNRzs7SUFFRixVQUFVLEVBQUU7SUFJUixXQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtxQ0FEUSxnQkFBZ0I7R0FGaEMsV0FBVyxDQTBDdkI7U0ExQ1ksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzE1Nzc2I2lzc3VlY29tbWVudC0yOTE4NjI5NTNcblxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgUmVuZGVyZXJGYWN0b3J5MiwgVmlld0VuY2Fwc3VsYXRpb24sIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG4vKlxuICogLS0gTGlua1NlcnZpY2UgLS0gICAgICAgIFtUZW1wb3JhcnldXG4gKiBATWFya1BpZXN6YWtcbiAqXG4gKiBTaW1pbGFyIHRvIE1ldGEgc2VydmljZSBidXQgbWFkZSB0byBoYW5kbGUgPGxpbms+IGNyZWF0aW9uIGZvciBTRU8gcHVycG9zZXNcbiAqIC0tIE5PVEU6IFNvb24gdGhlcmUgd2lsbCBiZSBhbiBvdmVyYWxsIERvY3VtZW50U2VydmljZSB3aXRoaW4gQW5ndWxhciB0aGF0IGhhbmRsZXMgTWV0YS9MaW5rIGV2ZXJ5dGhpbmdcbiAqL1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTGlua1NlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5MixcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50PzogYW55LFxuICApIHt9XG5cbiAgLyoqXG4gICAqIEluamVjdCB0aGUgU3RhdGUgaW50byB0aGUgYm90dG9tIG9mIHRoZSA8aGVhZD5cbiAgICovXG4gIGFkZFRhZyh0YWc6IExpbmtEZWZpbml0aW9uLCBmb3JjZUNyZWF0aW9uPzogYm9vbGVhbik6IHZvaWQge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZW5kZXJlciA9IHRoaXMucmVuZGVyZXJGYWN0b3J5LmNyZWF0ZVJlbmRlcmVyKHRoaXMuZG9jdW1lbnQsIHtcbiAgICAgICAgaWQ6ICctMScsXG4gICAgICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgICAgIHN0eWxlczogW10sXG4gICAgICAgIGRhdGE6IHt9LFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGxpbmsgPSByZW5kZXJlci5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgICBjb25zdCBoZWFkID0gdGhpcy5kb2N1bWVudC5oZWFkO1xuICAgICAgY29uc3Qgc2VsZWN0b3IgPSB0aGlzLl9wYXJzZVNlbGVjdG9yKHRhZyk7XG5cbiAgICAgIGlmIChoZWFkID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignPGhlYWQ+IG5vdCBmb3VuZCB3aXRoaW4gRE9DVU1FTlQuJyk7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5rZXlzKHRhZykuZm9yRWFjaCgocHJvcDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHJldHVybiByZW5kZXJlci5zZXRBdHRyaWJ1dGUobGluaywgcHJvcCwgdGFnW3Byb3BdKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBbVE9ET106IGdldCB0aGVtIHRvIHVwZGF0ZSB0aGUgZXhpc3Rpbmcgb25lIChpZiBpdCBleGlzdHMpID9cbiAgICAgIHJlbmRlcmVyLmFwcGVuZENoaWxkKGhlYWQsIGxpbmspO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHdpdGhpbiBsaW5rU2VydmljZSA6ICcsIGUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3BhcnNlU2VsZWN0b3IodGFnOiBMaW5rRGVmaW5pdGlvbik6IHN0cmluZyB7XG4gICAgLy8gUG9zc2libHkgcmUtd29yayB0aGlzXG4gICAgY29uc3QgYXR0cjogc3RyaW5nID0gdGFnLnJlbCA/ICdyZWwnIDogJ2hyZWZsYW5nJztcbiAgICByZXR1cm4gYCR7YXR0cn09XCIke3RhZ1thdHRyXX1cImA7XG4gIH1cbn1cblxuZXhwb3J0IGRlY2xhcmUgdHlwZSBMaW5rRGVmaW5pdGlvbiA9IHtcbiAgY2hhcnNldD86IHN0cmluZztcbiAgY3Jvc3NvcmlnaW4/OiBzdHJpbmc7XG4gIGhyZWY/OiBzdHJpbmc7XG4gIGhyZWZsYW5nPzogc3RyaW5nO1xuICBtZWRpYT86IHN0cmluZztcbiAgcmVsPzogc3RyaW5nO1xuICByZXY/OiBzdHJpbmc7XG4gIHNpemVzPzogc3RyaW5nO1xuICB0YXJnZXQ/OiBzdHJpbmc7XG4gIHR5cGU/OiBzdHJpbmc7XG59ICYge1xuICBbcHJvcDogc3RyaW5nXTogc3RyaW5nO1xufTtcbiJdfQ==