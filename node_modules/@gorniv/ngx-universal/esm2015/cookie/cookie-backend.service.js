import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { CookieService } from './cookie.service';
import { CookieOptionsProvider } from './cookie-options-provider';
import { NgxRequest, NgxResponse } from './tokens';
import * as ɵngcc0 from '@angular/core';
let CookieBackendService = class CookieBackendService extends CookieService {
    constructor(request, response, _optionsProvider) {
        super(_optionsProvider);
        this.request = request;
        this.response = response;
    }
    get cookieString() {
        return this.request.cookie || this.request.headers['cookie'] || '';
    }
    set cookieString(val) {
        this.request.cookie = val;
        this.response.cookie = val;
    }
    put(key, value, options = {}) {
        let findKey = false;
        let newCookie = Object.keys(this.getAll())
            // tslint:disable-next-line: no-shadowed-variable
            .map((keyItem) => {
            if (keyItem === key) {
                findKey = true;
                return `${key}=${value}`;
            }
            return `${keyItem}=${this.get(keyItem)}`;
        })
            .join('; ');
        if (!findKey) {
            newCookie += `; ${key}=${value}`;
        }
        this.request.headers.cookie = newCookie;
        // not sure
        this.cookieString = newCookie;
    }
    remove(key, options) {
        const newCookie = Object.keys(this.getAll())
            // tslint:disable-next-line: no-shadowed-variable
            .map((keyItem) => {
            if (keyItem === key) {
                return '';
            }
            return `${keyItem}=${this.get(keyItem)}`;
        })
            .join('; ');
        this.request.headers.cookie = newCookie;
        // not sure
        this.cookieString = newCookie;
    }
};
CookieBackendService.ɵfac = function CookieBackendService_Factory(t) { return new (t || CookieBackendService)(ɵngcc0.ɵɵinject(NgxRequest), ɵngcc0.ɵɵinject(NgxResponse), ɵngcc0.ɵɵinject(CookieOptionsProvider)); };
CookieBackendService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CookieBackendService, factory: CookieBackendService.ɵfac });
CookieBackendService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NgxRequest,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [NgxResponse,] }] },
    { type: CookieOptionsProvider }
];
CookieBackendService = __decorate([ __param(0, Inject(NgxRequest)),
    __param(1, Inject(NgxResponse)),
    __metadata("design:paramtypes", [Object, Object, CookieOptionsProvider])
], CookieBackendService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieBackendService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [NgxRequest]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [NgxResponse]
            }] }, { type: CookieOptionsProvider }]; }, null); })();
export { CookieBackendService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLWJhY2tlbmQuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0Bnb3JuaXYvbmd4LXVuaXZlcnNhbC9jb29raWUvY29va2llLWJhY2tlbmQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDOztBQUduRCxJQUFhLG9CQUFvQixHQUFqQyxNQUFhLG9CQUFxQixTQUFRLGFBQWE7SUFDckQsWUFDOEIsT0FBWSxFQUNYLFFBQWEsRUFDMUMsZ0JBQXVDO1FBRXZDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBSkksWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUNYLGFBQVEsR0FBUixRQUFRLENBQUs7SUFJNUMsQ0FBQztJQUVELElBQWMsWUFBWTtRQUN4QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyRSxDQUFDO0lBRUQsSUFBYyxZQUFZLENBQUMsR0FBVztRQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO0lBQzdCLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBVyxFQUFFLEtBQWEsRUFBRSxVQUF5QixFQUFFO1FBQ3pELElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN4QyxpREFBaUQ7YUFDaEQsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDZixJQUFJLE9BQU8sS0FBSyxHQUFHLEVBQUU7Z0JBQ25CLE9BQU8sR0FBRyxJQUFJLENBQUM7Z0JBQ2YsT0FBTyxHQUFHLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQzthQUMxQjtZQUNELE9BQU8sR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQzNDLENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixTQUFTLElBQUksS0FBSyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7U0FDbEM7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQ3hDLFdBQVc7UUFDWCxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQVcsRUFBRSxPQUF1QjtRQUN6QyxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUMxQyxpREFBaUQ7YUFDaEQsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDZixJQUFJLE9BQU8sS0FBSyxHQUFHLEVBQUU7Z0JBQ25CLE9BQU8sRUFBRSxDQUFDO2FBQ1g7WUFDRCxPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUMzQyxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQ3hDLFdBQVc7UUFDWCxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztJQUNoQyxDQUFDO0NBQ0Y7OzRIQUFBOzs0Q0FsREksTUFBTSxTQUFDLFVBQVU7NENBQ2pCLE1BQU0sU0FBQyxXQUFXO1lBQ0QscUJBQXFCOztBQUo5QixvQkFBb0IsZUFBZSxLQUQvQyxVQUFVLEVBQUUsakJBQ1QsQ0FFQyxXQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNsQixXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtxREFDRixxQkFBcUI7R0FKOUIsb0JBQW9CLENBb0RoQzs7Ozs7Ozs7O21FQUNEO1NBckRhLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDb29raWVTZXJ2aWNlIH0gZnJvbSAnLi9jb29raWUuc2VydmljZSc7XG5pbXBvcnQgeyBDb29raWVPcHRpb25zUHJvdmlkZXIgfSBmcm9tICcuL2Nvb2tpZS1vcHRpb25zLXByb3ZpZGVyJztcbmltcG9ydCB7IENvb2tpZU9wdGlvbnMgfSBmcm9tICcuL2Nvb2tpZS1vcHRpb25zLm1vZGVsJztcbmltcG9ydCB7IE5neFJlcXVlc3QsIE5neFJlc3BvbnNlIH0gZnJvbSAnLi90b2tlbnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29va2llQmFja2VuZFNlcnZpY2UgZXh0ZW5kcyBDb29raWVTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChOZ3hSZXF1ZXN0KSBwcml2YXRlIHJlcXVlc3Q6IGFueSxcbiAgICBASW5qZWN0KE5neFJlc3BvbnNlKSBwcml2YXRlIHJlc3BvbnNlOiBhbnksXG4gICAgX29wdGlvbnNQcm92aWRlcjogQ29va2llT3B0aW9uc1Byb3ZpZGVyLFxuICApIHtcbiAgICBzdXBlcihfb3B0aW9uc1Byb3ZpZGVyKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXQgY29va2llU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdC5jb29raWUgfHwgdGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ2Nvb2tpZSddIHx8ICcnO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldCBjb29raWVTdHJpbmcodmFsOiBzdHJpbmcpIHtcbiAgICB0aGlzLnJlcXVlc3QuY29va2llID0gdmFsO1xuICAgIHRoaXMucmVzcG9uc2UuY29va2llID0gdmFsO1xuICB9XG5cbiAgcHV0KGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBvcHRpb25zOiBDb29raWVPcHRpb25zID0ge30pOiB2b2lkIHtcbiAgICBsZXQgZmluZEtleSA9IGZhbHNlO1xuICAgIGxldCBuZXdDb29raWUgPSBPYmplY3Qua2V5cyh0aGlzLmdldEFsbCgpKVxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1zaGFkb3dlZC12YXJpYWJsZVxuICAgICAgLm1hcCgoa2V5SXRlbSkgPT4ge1xuICAgICAgICBpZiAoa2V5SXRlbSA9PT0ga2V5KSB7XG4gICAgICAgICAgZmluZEtleSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGAke2tleX09JHt2YWx1ZX1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtrZXlJdGVtfT0ke3RoaXMuZ2V0KGtleUl0ZW0pfWA7XG4gICAgICB9KVxuICAgICAgLmpvaW4oJzsgJyk7XG4gICAgaWYgKCFmaW5kS2V5KSB7XG4gICAgICBuZXdDb29raWUgKz0gYDsgJHtrZXl9PSR7dmFsdWV9YDtcbiAgICB9XG4gICAgdGhpcy5yZXF1ZXN0LmhlYWRlcnMuY29va2llID0gbmV3Q29va2llO1xuICAgIC8vIG5vdCBzdXJlXG4gICAgdGhpcy5jb29raWVTdHJpbmcgPSBuZXdDb29raWU7XG4gIH1cblxuICByZW1vdmUoa2V5OiBzdHJpbmcsIG9wdGlvbnM/OiBDb29raWVPcHRpb25zKTogdm9pZCB7XG4gICAgY29uc3QgbmV3Q29va2llID0gT2JqZWN0LmtleXModGhpcy5nZXRBbGwoKSlcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tc2hhZG93ZWQtdmFyaWFibGVcbiAgICAgIC5tYXAoKGtleUl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGtleUl0ZW0gPT09IGtleSkge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7a2V5SXRlbX09JHt0aGlzLmdldChrZXlJdGVtKX1gO1xuICAgICAgfSlcbiAgICAgIC5qb2luKCc7ICcpO1xuICAgIHRoaXMucmVxdWVzdC5oZWFkZXJzLmNvb2tpZSA9IG5ld0Nvb2tpZTtcbiAgICAvLyBub3Qgc3VyZVxuICAgIHRoaXMuY29va2llU3RyaW5nID0gbmV3Q29va2llO1xuICB9XG59XG4iXX0=