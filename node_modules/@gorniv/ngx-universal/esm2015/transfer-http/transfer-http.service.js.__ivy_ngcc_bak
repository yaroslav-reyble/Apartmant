import { __decorate, __metadata, __param } from "tslib";
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { TransferState, StateKey, makeStateKey } from '@angular/platform-browser';
import { from } from 'rxjs';
import { tap } from 'rxjs/operators';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
let TransferHttpService = class TransferHttpService {
    constructor(transferState, httpClient, platformId) {
        this.transferState = transferState;
        this.httpClient = httpClient;
        this.platformId = platformId;
    }
    request(method, uri, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData(method, uri, options, (method, url, options) => {
            return this.httpClient.request(method, url, options);
        });
    }
    /**
     * Performs a request with `get` http method.
     */
    get(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('get', url, options, (_method, url, options) => {
            return this.httpClient.get(url, options);
        });
    }
    /**
     * Performs a request with `post` http method.
     */
    post(url, body, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('post', url, body, options, 
        // tslint:disable-next-line:no-shadowed-variable
        (_method, url, body, options) => {
            return this.httpClient.post(url, body, options);
        });
    }
    /**
     * Performs a request with `put` http method.
     */
    put(url, _body, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('put', url, _body, options, (_method, url, _body, options) => {
            return this.httpClient.put(url, _body, options);
        });
    }
    /**
     * Performs a request with `delete` http method.
     */
    delete(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('delete', url, options, (_method, url, options) => {
            return this.httpClient.delete(url, options);
        });
    }
    /**
     * Performs a request with `patch` http method.
     */
    patch(url, body, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('patch', url, body, options, 
        // tslint:disable-next-line:no-shadowed-variable
        (_method, url, body, options) => {
            return this.httpClient.patch(url, body, options);
        });
    }
    /**
     * Performs a request with `head` http method.
     */
    head(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('head', url, options, (_method, url, options) => {
            return this.httpClient.head(url, options);
        });
    }
    /**
     * Performs a request with `options` http method.
     */
    options(url, options) {
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('options', url, options, 
        // tslint:disable-next-line:no-shadowed-variable
        (_method, url, options) => {
            return this.httpClient.options(url, options);
        });
    }
    // tslint:disable-next-line:max-line-length
    getData(method, uri, options, callback) {
        let url = uri;
        if (typeof uri !== 'string') {
            url = uri.url;
        }
        const tempKey = url + (options ? JSON.stringify(options) : '');
        const key = makeStateKey(tempKey);
        try {
            return this.resolveData(key);
        }
        catch (e) {
            return callback(method, uri, options).pipe(tap((data) => {
                if (isPlatformBrowser(this.platformId)) {
                    // Client only code.
                    // nothing;
                }
                if (isPlatformServer(this.platformId)) {
                    this.setCache(key, data);
                }
            }));
        }
    }
    getPostData(_method, uri, body, options, callback) {
        let url = uri;
        if (typeof uri !== 'string') {
            url = uri.url;
        }
        const tempKey = url + (body ? JSON.stringify(body) : '') + (options ? JSON.stringify(options) : '');
        const key = makeStateKey(tempKey);
        try {
            return this.resolveData(key);
        }
        catch (e) {
            return callback(_method, uri, body, options).pipe(tap((data) => {
                if (isPlatformBrowser(this.platformId)) {
                    // Client only code.
                    // nothing;
                }
                if (isPlatformServer(this.platformId)) {
                    this.setCache(key, data);
                }
            }));
        }
    }
    resolveData(key) {
        const data = this.getFromCache(key);
        if (!data) {
            throw new Error();
        }
        if (isPlatformBrowser(this.platformId)) {
            // Client only code.
            this.transferState.remove(key);
        }
        if (isPlatformServer(this.platformId)) {
            // Server only code.
        }
        return from(Promise.resolve(data));
    }
    setCache(key, data) {
        return this.transferState.set(key, data);
    }
    getFromCache(key) {
        return this.transferState.get(key, null);
    }
};
TransferHttpService.ctorParameters = () => [
    { type: TransferState },
    { type: HttpClient },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
TransferHttpService = __decorate([
    Injectable(),
    __param(2, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [TransferState,
        HttpClient,
        Object])
], TransferHttpService);
export { TransferHttpService };
//# sourceMappingURL=data:application/json;base64,