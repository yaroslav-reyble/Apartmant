// https://github.com/angular/angular/issues/15776#issuecomment-291862953
import { __decorate, __metadata, __param } from "tslib";
import { Injectable, RendererFactory2, ViewEncapsulation, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
var LinkService = /** @class */ (function () {
    function LinkService(rendererFactory, document) {
        this.rendererFactory = rendererFactory;
        this.document = document;
    }
    /**
     * Inject the State into the bottom of the <head>
     */
    LinkService.prototype.addTag = function (tag, forceCreation) {
        try {
            var renderer_1 = this.rendererFactory.createRenderer(this.document, {
                id: '-1',
                encapsulation: ViewEncapsulation.None,
                styles: [],
                data: {},
            });
            var link_1 = renderer_1.createElement('link');
            var head = this.document.head;
            var selector = this._parseSelector(tag);
            if (head === null) {
                throw new Error('<head> not found within DOCUMENT.');
            }
            Object.keys(tag).forEach(function (prop) {
                return renderer_1.setAttribute(link_1, prop, tag[prop]);
            });
            // [TODO]: get them to update the existing one (if it exists) ?
            renderer_1.appendChild(head, link_1);
        }
        catch (e) {
            console.error('Error within linkService : ', e);
        }
    };
    LinkService.prototype._parseSelector = function (tag) {
        // Possibly re-work this
        var attr = tag.rel ? 'rel' : 'hreflang';
        return attr + "=\"" + tag[attr] + "\"";
    };
    LinkService.ctorParameters = function () { return [
        { type: RendererFactory2 },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    LinkService = __decorate([
        Injectable({
            providedIn: 'root',
        })
        /*
         * -- LinkService --        [Temporary]
         * @MarkPieszak
         *
         * Similar to Meta service but made to handle <link> creation for SEO purposes
         * -- NOTE: Soon there will be an overall DocumentService within Angular that handles Meta/Link everything
         */
        ,
        Injectable(),
        __param(1, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [RendererFactory2, Object])
    ], LinkService);
    return LinkService;
}());
export { LinkService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdvcm5pdi9uZ3gtdW5pdmVyc2FsLyIsInNvdXJjZXMiOlsibGluay9saW5rLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseUVBQXlFOztBQUV6RSxPQUFPLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFjM0M7SUFDRSxxQkFDVSxlQUFpQyxFQUNmLFFBQWM7UUFEaEMsb0JBQWUsR0FBZixlQUFlLENBQWtCO1FBQ2YsYUFBUSxHQUFSLFFBQVEsQ0FBTTtJQUN2QyxDQUFDO0lBRUo7O09BRUc7SUFDSCw0QkFBTSxHQUFOLFVBQU8sR0FBbUIsRUFBRSxhQUF1QjtRQUNqRCxJQUFJO1lBQ0YsSUFBTSxVQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDbEUsRUFBRSxFQUFFLElBQUk7Z0JBQ1IsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLE1BQU0sRUFBRSxFQUFFO2dCQUNWLElBQUksRUFBRSxFQUFFO2FBQ1QsQ0FBQyxDQUFDO1lBRUgsSUFBTSxNQUFJLEdBQUcsVUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM1QyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztZQUNoQyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRTFDLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtnQkFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO2FBQ3REO1lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFZO2dCQUNwQyxPQUFPLFVBQVEsQ0FBQyxZQUFZLENBQUMsTUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN0RCxDQUFDLENBQUMsQ0FBQztZQUVILCtEQUErRDtZQUMvRCxVQUFRLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxNQUFJLENBQUMsQ0FBQztTQUNsQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNqRDtJQUNILENBQUM7SUFFTyxvQ0FBYyxHQUF0QixVQUF1QixHQUFtQjtRQUN4Qyx3QkFBd0I7UUFDeEIsSUFBTSxJQUFJLEdBQVcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7UUFDbEQsT0FBVSxJQUFJLFdBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFHLENBQUM7SUFDbEMsQ0FBQzs7Z0JBdkMwQixnQkFBZ0I7Z0RBQ3hDLE1BQU0sU0FBQyxRQUFROztJQUhQLFdBQVc7UUFadkIsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztRQUNGOzs7Ozs7V0FNRzs7UUFFRixVQUFVLEVBQUU7UUFJUixXQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTt5Q0FEUSxnQkFBZ0I7T0FGaEMsV0FBVyxDQTBDdkI7SUFBRCxrQkFBQztDQUFBLEFBMUNELElBMENDO1NBMUNZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xNTc3NiNpc3N1ZWNvbW1lbnQtMjkxODYyOTUzXG5cbmltcG9ydCB7IEluamVjdGFibGUsIFJlbmRlcmVyRmFjdG9yeTIsIFZpZXdFbmNhcHN1bGF0aW9uLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuLypcbiAqIC0tIExpbmtTZXJ2aWNlIC0tICAgICAgICBbVGVtcG9yYXJ5XVxuICogQE1hcmtQaWVzemFrXG4gKlxuICogU2ltaWxhciB0byBNZXRhIHNlcnZpY2UgYnV0IG1hZGUgdG8gaGFuZGxlIDxsaW5rPiBjcmVhdGlvbiBmb3IgU0VPIHB1cnBvc2VzXG4gKiAtLSBOT1RFOiBTb29uIHRoZXJlIHdpbGwgYmUgYW4gb3ZlcmFsbCBEb2N1bWVudFNlcnZpY2Ugd2l0aGluIEFuZ3VsYXIgdGhhdCBoYW5kbGVzIE1ldGEvTGluayBldmVyeXRoaW5nXG4gKi9cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExpbmtTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZW5kZXJlckZhY3Rvcnk6IFJlbmRlcmVyRmFjdG9yeTIsXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudD86IGFueSxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBJbmplY3QgdGhlIFN0YXRlIGludG8gdGhlIGJvdHRvbSBvZiB0aGUgPGhlYWQ+XG4gICAqL1xuICBhZGRUYWcodGFnOiBMaW5rRGVmaW5pdGlvbiwgZm9yY2VDcmVhdGlvbj86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyRmFjdG9yeS5jcmVhdGVSZW5kZXJlcih0aGlzLmRvY3VtZW50LCB7XG4gICAgICAgIGlkOiAnLTEnLFxuICAgICAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgICAgICBzdHlsZXM6IFtdLFxuICAgICAgICBkYXRhOiB7fSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBsaW5rID0gcmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuICAgICAgY29uc3QgaGVhZCA9IHRoaXMuZG9jdW1lbnQuaGVhZDtcbiAgICAgIGNvbnN0IHNlbGVjdG9yID0gdGhpcy5fcGFyc2VTZWxlY3Rvcih0YWcpO1xuXG4gICAgICBpZiAoaGVhZCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJzxoZWFkPiBub3QgZm91bmQgd2l0aGluIERPQ1VNRU5ULicpO1xuICAgICAgfVxuXG4gICAgICBPYmplY3Qua2V5cyh0YWcpLmZvckVhY2goKHByb3A6IHN0cmluZykgPT4ge1xuICAgICAgICByZXR1cm4gcmVuZGVyZXIuc2V0QXR0cmlidXRlKGxpbmssIHByb3AsIHRhZ1twcm9wXSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gW1RPRE9dOiBnZXQgdGhlbSB0byB1cGRhdGUgdGhlIGV4aXN0aW5nIG9uZSAoaWYgaXQgZXhpc3RzKSA/XG4gICAgICByZW5kZXJlci5hcHBlbmRDaGlsZChoZWFkLCBsaW5rKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB3aXRoaW4gbGlua1NlcnZpY2UgOiAnLCBlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9wYXJzZVNlbGVjdG9yKHRhZzogTGlua0RlZmluaXRpb24pOiBzdHJpbmcge1xuICAgIC8vIFBvc3NpYmx5IHJlLXdvcmsgdGhpc1xuICAgIGNvbnN0IGF0dHI6IHN0cmluZyA9IHRhZy5yZWwgPyAncmVsJyA6ICdocmVmbGFuZyc7XG4gICAgcmV0dXJuIGAke2F0dHJ9PVwiJHt0YWdbYXR0cl19XCJgO1xuICB9XG59XG5cbmV4cG9ydCBkZWNsYXJlIHR5cGUgTGlua0RlZmluaXRpb24gPSB7XG4gIGNoYXJzZXQ/OiBzdHJpbmc7XG4gIGNyb3Nzb3JpZ2luPzogc3RyaW5nO1xuICBocmVmPzogc3RyaW5nO1xuICBocmVmbGFuZz86IHN0cmluZztcbiAgbWVkaWE/OiBzdHJpbmc7XG4gIHJlbD86IHN0cmluZztcbiAgcmV2Pzogc3RyaW5nO1xuICBzaXplcz86IHN0cmluZztcbiAgdGFyZ2V0Pzogc3RyaW5nO1xuICB0eXBlPzogc3RyaW5nO1xufSAmIHtcbiAgW3Byb3A6IHN0cmluZ106IHN0cmluZztcbn07XG4iXX0=