import { __decorate, __metadata, __param } from "tslib";
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { TransferState, StateKey, makeStateKey } from '@angular/platform-browser';
import { from } from 'rxjs';
import { tap } from 'rxjs/operators';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from '@angular/common/http';
var TransferHttpService = /** @class */ (function () {
    function TransferHttpService(transferState, httpClient, platformId) {
        this.transferState = transferState;
        this.httpClient = httpClient;
        this.platformId = platformId;
    }
    TransferHttpService.prototype.request = function (method, uri, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData(method, uri, options, function (method, url, options) {
            return _this.httpClient.request(method, url, options);
        });
    };
    /**
     * Performs a request with `get` http method.
     */
    TransferHttpService.prototype.get = function (url, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('get', url, options, function (_method, url, options) {
            return _this.httpClient.get(url, options);
        });
    };
    /**
     * Performs a request with `post` http method.
     */
    TransferHttpService.prototype.post = function (url, body, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('post', url, body, options, 
        // tslint:disable-next-line:no-shadowed-variable
        function (_method, url, body, options) {
            return _this.httpClient.post(url, body, options);
        });
    };
    /**
     * Performs a request with `put` http method.
     */
    TransferHttpService.prototype.put = function (url, _body, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('put', url, _body, options, function (_method, url, _body, options) {
            return _this.httpClient.put(url, _body, options);
        });
    };
    /**
     * Performs a request with `delete` http method.
     */
    TransferHttpService.prototype.delete = function (url, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('delete', url, options, function (_method, url, options) {
            return _this.httpClient.delete(url, options);
        });
    };
    /**
     * Performs a request with `patch` http method.
     */
    TransferHttpService.prototype.patch = function (url, body, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getPostData('patch', url, body, options, 
        // tslint:disable-next-line:no-shadowed-variable
        function (_method, url, body, options) {
            return _this.httpClient.patch(url, body, options);
        });
    };
    /**
     * Performs a request with `head` http method.
     */
    TransferHttpService.prototype.head = function (url, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('head', url, options, function (_method, url, options) {
            return _this.httpClient.head(url, options);
        });
    };
    /**
     * Performs a request with `options` http method.
     */
    TransferHttpService.prototype.options = function (url, options) {
        var _this = this;
        // tslint:disable-next-line:no-shadowed-variable
        return this.getData('options', url, options, 
        // tslint:disable-next-line:no-shadowed-variable
        function (_method, url, options) {
            return _this.httpClient.options(url, options);
        });
    };
    // tslint:disable-next-line:max-line-length
    TransferHttpService.prototype.getData = function (method, uri, options, callback) {
        var _this = this;
        var url = uri;
        if (typeof uri !== 'string') {
            url = uri.url;
        }
        var tempKey = url + (options ? JSON.stringify(options) : '');
        var key = makeStateKey(tempKey);
        try {
            return this.resolveData(key);
        }
        catch (e) {
            return callback(method, uri, options).pipe(tap(function (data) {
                if (isPlatformBrowser(_this.platformId)) {
                    // Client only code.
                    // nothing;
                }
                if (isPlatformServer(_this.platformId)) {
                    _this.setCache(key, data);
                }
            }));
        }
    };
    TransferHttpService.prototype.getPostData = function (_method, uri, body, options, callback) {
        var _this = this;
        var url = uri;
        if (typeof uri !== 'string') {
            url = uri.url;
        }
        var tempKey = url + (body ? JSON.stringify(body) : '') + (options ? JSON.stringify(options) : '');
        var key = makeStateKey(tempKey);
        try {
            return this.resolveData(key);
        }
        catch (e) {
            return callback(_method, uri, body, options).pipe(tap(function (data) {
                if (isPlatformBrowser(_this.platformId)) {
                    // Client only code.
                    // nothing;
                }
                if (isPlatformServer(_this.platformId)) {
                    _this.setCache(key, data);
                }
            }));
        }
    };
    TransferHttpService.prototype.resolveData = function (key) {
        var data = this.getFromCache(key);
        if (!data) {
            throw new Error();
        }
        if (isPlatformBrowser(this.platformId)) {
            // Client only code.
            this.transferState.remove(key);
        }
        if (isPlatformServer(this.platformId)) {
            // Server only code.
        }
        return from(Promise.resolve(data));
    };
    TransferHttpService.prototype.setCache = function (key, data) {
        return this.transferState.set(key, data);
    };
    TransferHttpService.prototype.getFromCache = function (key) {
        return this.transferState.get(key, null);
    };
    TransferHttpService.ctorParameters = function () { return [
        { type: TransferState },
        { type: HttpClient },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    TransferHttpService = __decorate([ __param(2, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [TransferState,
            HttpClient,
            Object])
    ], TransferHttpService);
TransferHttpService.ɵfac = function TransferHttpService_Factory(t) { return new (t || TransferHttpService)(ɵngcc0.ɵɵinject(ɵngcc1.TransferState), ɵngcc0.ɵɵinject(ɵngcc2.HttpClient), ɵngcc0.ɵɵinject(PLATFORM_ID)); };
TransferHttpService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TransferHttpService, factory: function (t) { return TransferHttpService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TransferHttpService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.TransferState }, { type: ɵngcc2.HttpClient }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
    return TransferHttpService;
}());
export { TransferHttpService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,