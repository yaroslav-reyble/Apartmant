import { __decorate, __extends, __metadata, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { CookieService } from './cookie.service';
import { CookieOptionsProvider } from './cookie-options-provider';
import { NgxRequest, NgxResponse } from './tokens';
import * as ɵngcc0 from '@angular/core';
var CookieBackendService = /** @class */ (function (_super) {
    __extends(CookieBackendService, _super);
    function CookieBackendService(request, response, _optionsProvider) {
        var _this = _super.call(this, _optionsProvider) || this;
        _this.request = request;
        _this.response = response;
        return _this;
    }
    Object.defineProperty(CookieBackendService.prototype, "cookieString", {
        get: function () {
            return this.request.cookie || this.request.headers['cookie'] || '';
        },
        set: function (val) {
            this.request.cookie = val;
            this.response.cookie = val;
        },
        enumerable: true,
        configurable: true
    });
    CookieBackendService.prototype.put = function (key, value, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var findKey = false;
        var newCookie = Object.keys(this.getAll())
            // tslint:disable-next-line: no-shadowed-variable
            .map(function (keyItem) {
            if (keyItem === key) {
                findKey = true;
                return key + "=" + value;
            }
            return keyItem + "=" + _this.get(keyItem);
        })
            .join('; ');
        if (!findKey) {
            newCookie += "; " + key + "=" + value;
        }
        this.request.headers.cookie = newCookie;
        // not sure
        this.cookieString = newCookie;
    };
    CookieBackendService.prototype.remove = function (key, options) {
        var _this = this;
        var newCookie = Object.keys(this.getAll())
            // tslint:disable-next-line: no-shadowed-variable
            .map(function (keyItem) {
            if (keyItem === key) {
                return '';
            }
            return keyItem + "=" + _this.get(keyItem);
        })
            .join('; ');
        this.request.headers.cookie = newCookie;
        // not sure
        this.cookieString = newCookie;
    };
    CookieBackendService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NgxRequest,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [NgxResponse,] }] },
        { type: CookieOptionsProvider }
    ]; };
    CookieBackendService = __decorate([ __param(0, Inject(NgxRequest)),
        __param(1, Inject(NgxResponse)),
        __metadata("design:paramtypes", [Object, Object, CookieOptionsProvider])
    ], CookieBackendService);
CookieBackendService.ɵfac = function CookieBackendService_Factory(t) { return new (t || CookieBackendService)(ɵngcc0.ɵɵinject(NgxRequest), ɵngcc0.ɵɵinject(NgxResponse), ɵngcc0.ɵɵinject(CookieOptionsProvider)); };
CookieBackendService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CookieBackendService, factory: function (t) { return CookieBackendService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieBackendService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [NgxRequest]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [NgxResponse]
            }] }, { type: CookieOptionsProvider }]; }, null); })();
    return CookieBackendService;
}(CookieService));
export { CookieBackendService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLWJhY2tlbmQuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0Bnb3JuaXYvbmd4LXVuaXZlcnNhbC9jb29raWUvY29va2llLWJhY2tlbmQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDOztBQUduRDtJQUEwQyx3Q0FBYTtJQUNyRCw4QkFDOEIsT0FBWSxFQUNYLFFBQWEsRUFDMUMsZ0JBQXVDO1FBSHpDLFlBS0Usa0JBQU0sZ0JBQWdCLENBQUMsU0FDeEI7UUFMNkIsYUFBTyxHQUFQLE9BQU8sQ0FBSztRQUNYLGNBQVEsR0FBUixRQUFRLENBQUs7O0lBSTVDLENBQUM7SUFFRCxzQkFBYyw4Q0FBWTthQUExQjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JFLENBQUM7YUFFRCxVQUEyQixHQUFXO1lBQ3BDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7UUFDN0IsQ0FBQzs7O09BTEE7SUFPRCxrQ0FBRyxHQUFILFVBQUksR0FBVyxFQUFFLEtBQWEsRUFBRSxPQUEyQjtRQUEzRCxpQkFrQkM7UUFsQitCLHdCQUFBLEVBQUEsWUFBMkI7UUFDekQsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3hDLGlEQUFpRDthQUNoRCxHQUFHLENBQUMsVUFBQyxPQUFPO1lBQ1gsSUFBSSxPQUFPLEtBQUssR0FBRyxFQUFFO2dCQUNuQixPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUNmLE9BQVUsR0FBRyxTQUFJLEtBQU8sQ0FBQzthQUMxQjtZQUNELE9BQVUsT0FBTyxTQUFJLEtBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFHLENBQUM7UUFDM0MsQ0FBQyxDQUFDO2FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLFNBQVMsSUFBSSxPQUFLLEdBQUcsU0FBSSxLQUFPLENBQUM7U0FDbEM7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQ3hDLFdBQVc7UUFDWCxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztJQUNoQyxDQUFDO0lBRUQscUNBQU0sR0FBTixVQUFPLEdBQVcsRUFBRSxPQUF1QjtRQUEzQyxpQkFhQztRQVpDLElBQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQzFDLGlEQUFpRDthQUNoRCxHQUFHLENBQUMsVUFBQyxPQUFPO1lBQ1gsSUFBSSxPQUFPLEtBQUssR0FBRyxFQUFFO2dCQUNuQixPQUFPLEVBQUUsQ0FBQzthQUNYO1lBQ0QsT0FBVSxPQUFPLFNBQUksS0FBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUcsQ0FBQztRQUMzQyxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQ3hDLFdBQVc7UUFDWCxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztJQUNoQyxDQUFDOztnREFqREUsTUFBTSxTQUFDLFVBQVU7Z0RBQ2pCLE1BQU0sU0FBQyxXQUFXO2dCQUNELHFCQUFxQjs7SUFKOUIsb0JBQW9CLGVBQWUsU0FEL0MsVUFBVSxFQUFFLHJCQUNMLENBRUgsV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDbEIsV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7eURBQ0YscUJBQXFCO09BSjlCLG9CQUFvQixDQW9EaEM7Ozs7Ozs7Ozs7O21FQUNEO0lBREEsMkJBQUM7Q0FBQSxBQXBERCxDQUEwQyxhQUFhLEdBb0R0RDtTQXBEWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29va2llU2VydmljZSB9IGZyb20gJy4vY29va2llLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29va2llT3B0aW9uc1Byb3ZpZGVyIH0gZnJvbSAnLi9jb29raWUtb3B0aW9ucy1wcm92aWRlcic7XG5pbXBvcnQgeyBDb29raWVPcHRpb25zIH0gZnJvbSAnLi9jb29raWUtb3B0aW9ucy5tb2RlbCc7XG5pbXBvcnQgeyBOZ3hSZXF1ZXN0LCBOZ3hSZXNwb25zZSB9IGZyb20gJy4vdG9rZW5zJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvb2tpZUJhY2tlbmRTZXJ2aWNlIGV4dGVuZHMgQ29va2llU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoTmd4UmVxdWVzdCkgcHJpdmF0ZSByZXF1ZXN0OiBhbnksXG4gICAgQEluamVjdChOZ3hSZXNwb25zZSkgcHJpdmF0ZSByZXNwb25zZTogYW55LFxuICAgIF9vcHRpb25zUHJvdmlkZXI6IENvb2tpZU9wdGlvbnNQcm92aWRlcixcbiAgKSB7XG4gICAgc3VwZXIoX29wdGlvbnNQcm92aWRlcik7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IGNvb2tpZVN0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QuY29va2llIHx8IHRoaXMucmVxdWVzdC5oZWFkZXJzWydjb29raWUnXSB8fCAnJztcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXQgY29va2llU3RyaW5nKHZhbDogc3RyaW5nKSB7XG4gICAgdGhpcy5yZXF1ZXN0LmNvb2tpZSA9IHZhbDtcbiAgICB0aGlzLnJlc3BvbnNlLmNvb2tpZSA9IHZhbDtcbiAgfVxuXG4gIHB1dChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgb3B0aW9uczogQ29va2llT3B0aW9ucyA9IHt9KTogdm9pZCB7XG4gICAgbGV0IGZpbmRLZXkgPSBmYWxzZTtcbiAgICBsZXQgbmV3Q29va2llID0gT2JqZWN0LmtleXModGhpcy5nZXRBbGwoKSlcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tc2hhZG93ZWQtdmFyaWFibGVcbiAgICAgIC5tYXAoKGtleUl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGtleUl0ZW0gPT09IGtleSkge1xuICAgICAgICAgIGZpbmRLZXkgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBgJHtrZXl9PSR7dmFsdWV9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7a2V5SXRlbX09JHt0aGlzLmdldChrZXlJdGVtKX1gO1xuICAgICAgfSlcbiAgICAgIC5qb2luKCc7ICcpO1xuICAgIGlmICghZmluZEtleSkge1xuICAgICAgbmV3Q29va2llICs9IGA7ICR7a2V5fT0ke3ZhbHVlfWA7XG4gICAgfVxuICAgIHRoaXMucmVxdWVzdC5oZWFkZXJzLmNvb2tpZSA9IG5ld0Nvb2tpZTtcbiAgICAvLyBub3Qgc3VyZVxuICAgIHRoaXMuY29va2llU3RyaW5nID0gbmV3Q29va2llO1xuICB9XG5cbiAgcmVtb3ZlKGtleTogc3RyaW5nLCBvcHRpb25zPzogQ29va2llT3B0aW9ucyk6IHZvaWQge1xuICAgIGNvbnN0IG5ld0Nvb2tpZSA9IE9iamVjdC5rZXlzKHRoaXMuZ2V0QWxsKCkpXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXNoYWRvd2VkLXZhcmlhYmxlXG4gICAgICAubWFwKChrZXlJdGVtKSA9PiB7XG4gICAgICAgIGlmIChrZXlJdGVtID09PSBrZXkpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke2tleUl0ZW19PSR7dGhpcy5nZXQoa2V5SXRlbSl9YDtcbiAgICAgIH0pXG4gICAgICAuam9pbignOyAnKTtcbiAgICB0aGlzLnJlcXVlc3QuaGVhZGVycy5jb29raWUgPSBuZXdDb29raWU7XG4gICAgLy8gbm90IHN1cmVcbiAgICB0aGlzLmNvb2tpZVN0cmluZyA9IG5ld0Nvb2tpZTtcbiAgfVxufVxuIl19