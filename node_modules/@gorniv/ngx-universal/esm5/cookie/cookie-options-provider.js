import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable, InjectionToken, Injector } from '@angular/core';
import { APP_BASE_HREF } from '@angular/common';
import { mergeOptions } from './utils';
import * as ɵngcc0 from '@angular/core';
export var COOKIE_OPTIONS = new InjectionToken('COOKIE_OPTIONS');
var CookieOptionsProvider = /** @class */ (function () {
    function CookieOptionsProvider(options, _injector) {
        if (options === void 0) { options = {}; }
        this._injector = _injector;
        this.defaultOptions = {
            path: this._injector.get(APP_BASE_HREF, '/'),
            domain: null,
            expires: null,
            secure: false,
            httpOnly: false
        };
        this._options = mergeOptions(this.defaultOptions, options);
    }
    Object.defineProperty(CookieOptionsProvider.prototype, "options", {
        get: function () {
            return this._options;
        },
        enumerable: true,
        configurable: true
    });
    CookieOptionsProvider.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [COOKIE_OPTIONS,] }] },
        { type: Injector }
    ]; };
    CookieOptionsProvider = __decorate([ __param(0, Inject(COOKIE_OPTIONS)),
        __metadata("design:paramtypes", [Object, Injector])
    ], CookieOptionsProvider);
CookieOptionsProvider.ɵfac = function CookieOptionsProvider_Factory(t) { return new (t || CookieOptionsProvider)(ɵngcc0.ɵɵinject(COOKIE_OPTIONS), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
CookieOptionsProvider.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CookieOptionsProvider, factory: function (t) { return CookieOptionsProvider.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieOptionsProvider, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [COOKIE_OPTIONS]
            }] }, { type: ɵngcc0.Injector }]; }, null); })();
    return CookieOptionsProvider;
}());
export { CookieOptionsProvider };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLW9wdGlvbnMtcHJvdmlkZXIuanMiLCJzb3VyY2VzIjpbIm5nOi9AZ29ybml2L25neC11bml2ZXJzYWwvY29va2llL2Nvb2tpZS1vcHRpb25zLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUdoRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sU0FBUyxDQUFDOztBQUV2QyxNQUFNLENBQUMsSUFBTSxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQWdCLGdCQUFnQixDQUFDLENBQUM7QUFHbEY7SUFLRSwrQkFBb0MsT0FBMkIsRUFDM0MsU0FBbUI7UUFESCx3QkFBQSxFQUFBLFlBQTJCO1FBQzNDLGNBQVMsR0FBVCxTQUFTLENBQVU7UUFDckMsSUFBSSxDQUFDLGNBQWMsR0FBRztZQUNwQixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQztZQUM1QyxNQUFNLEVBQUUsSUFBSTtZQUNaLE9BQU8sRUFBRSxJQUFJO1lBQ2IsTUFBTSxFQUFFLEtBQUs7WUFDYixRQUFRLEVBQUUsS0FBSztTQUNoQixDQUFDO1FBQ0YsSUFBSSxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsc0JBQUksMENBQU87YUFBWDtZQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QixDQUFDOzs7T0FBQTs7Z0RBZFksTUFBTSxTQUFDLGNBQWM7Z0JBQ0gsUUFBUTs7SUFONUIscUJBQXFCLGVBRXZCLFNBSFYsVUFBVSxFQUFFLHJCQUNMLENBS08sV0FBQSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUE7aURBQ0osUUFBUTtPQU41QixxQkFBcUIsQ0FvQmpDOzs7Ozs7Ozs2REFDRDtJQURBLDRCQUFDO0NBQUEsQUFwQkQsSUFvQkM7U0FwQlkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFQUF9CQVNFX0hSRUYgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBDb29raWVPcHRpb25zIH0gZnJvbSAnLi9jb29raWUtb3B0aW9ucy5tb2RlbCc7XG5pbXBvcnQgeyBtZXJnZU9wdGlvbnMgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IENPT0tJRV9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPENvb2tpZU9wdGlvbnM+KCdDT09LSUVfT1BUSU9OUycpO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29va2llT3B0aW9uc1Byb3ZpZGVyIHtcblxuICBwcml2YXRlIGRlZmF1bHRPcHRpb25zOiBDb29raWVPcHRpb25zO1xuICBwcml2YXRlIF9vcHRpb25zOiBDb29raWVPcHRpb25zO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoQ09PS0lFX09QVElPTlMpIG9wdGlvbnM6IENvb2tpZU9wdGlvbnMgPSB7fSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgdGhpcy5kZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IHRoaXMuX2luamVjdG9yLmdldChBUFBfQkFTRV9IUkVGLCAnLycpLFxuICAgICAgZG9tYWluOiBudWxsLFxuICAgICAgZXhwaXJlczogbnVsbCxcbiAgICAgIHNlY3VyZTogZmFsc2UsXG4gICAgICBodHRwT25seTogZmFsc2VcbiAgICB9O1xuICAgIHRoaXMuX29wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5kZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gIH1cblxuICBnZXQgb3B0aW9ucygpOiBDb29raWVPcHRpb25zIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgfVxufVxuIl19